; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27026.1 

	TITLE	C:\Users\Michael McNally\source\repos\Final Proj\src\mainsrc\MySphere.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG41036 DB	'Number of Faces: ', 00H
	ORG $+2
$SG40793 DB	'../../data/meshes/mysphere.obj', 00H
	ORG $+1
$SG40873 DB	' ', 00H
	ORG $+2
$SG40874 DB	' ', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsprintf_s_l
PUBLIC	_sprintf_s
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	_sqrtf
PUBLIC	_fabsl
PUBLIC	_frexpl
PUBLIC	??0exception@std@@QAE@QBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPADQADID@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHABD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z	; std::_Container_base12::_Swap_all
PUBLIC	?_Clrcont@_Iterator_base12@std@@QAEXXZ		; std::_Iterator_base12::_Clrcont
PUBLIC	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ	; std::_Iterator_base12::_Getpnext
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??$_Convert_size@I@std@@YAII@Z			; std::_Convert_size<unsigned int>
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
PUBLIC	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0STVector3@@QAE@ABU0@@Z			; STVector3::STVector3
PUBLIC	??0STVector3@@QAE@MMM@Z				; STVector3::STVector3
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
PUBLIC	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ	; std::_Locinfo::_Getlconv
PUBLIC	?_Getfalse@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Getfalse
PUBLIC	?_Gettrue@_Locinfo@std@@QBEPBDXZ		; std::_Locinfo::_Gettrue
PUBLIC	??0?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QBEPBDXZ			; std::_Yarn<char>::c_str
PUBLIC	?_Tidy@?$_Yarn@D@std@@AAEXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??0?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AAEXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0_Facet_base@std@@QAE@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??2_Crt_new_delete@std@@SAPAXI@Z		; std::_Crt_new_delete::operator new
PUBLIC	??2_Crt_new_delete@std@@SAPAXIABUnothrow_t@1@@Z	; std::_Crt_new_delete::operator new
PUBLIC	??3_Crt_new_delete@std@@SAXPAX@Z		; std::_Crt_new_delete::operator delete
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??Bid@locale@std@@QAEIXZ			; std::locale::id::operator unsigned int
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??0facet@locale@std@@IAE@I@Z			; std::locale::facet::facet
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??0locale@std@@QAE@ABV01@@Z			; std::locale::locale
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	?c_str@locale@std@@QBEPBDXZ			; std::locale::c_str
PUBLIC	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z	; std::locale::_Getfacet
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z	; std::_Adl_verify_range<char const *,char const *>
PUBLIC	??0ctype_base@std@@QAE@I@Z			; std::ctype_base::ctype_base
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z		; std::ctype<char>::widen
PUBLIC	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z		; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?_Tidy@?$ctype@D@std@@IAEXXZ			; std::ctype<char>::_Tidy
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??0error_code@std@@QAE@HABVerror_category@1@@Z	; std::error_code::error_code
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8std@@YA_NABVerror_condition@0@0@Z		; std::operator==
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??1_System_error@std@@UAE@XZ			; std::_System_error::~_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QAE@Verror_code@1@PBD@Z	; std::system_error::system_error
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	?rdstate@ios_base@std@@QBEHXZ			; std::ios_base::rdstate
PUBLIC	?good@ios_base@std@@QBE_NXZ			; std::ios_base::good
PUBLIC	?flags@ios_base@std@@QBEHXZ			; std::ios_base::flags
PUBLIC	?precision@ios_base@std@@QBE_JXZ		; std::ios_base::precision
PUBLIC	?width@ios_base@std@@QBE_JXZ			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QAE_J_J@Z			; std::ios_base::width
PUBLIC	?getloc@ios_base@std@@QBE?AVlocale@2@XZ		; std::ios_base::getloc
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??_GSTTriangleMesh@@QAEPAXI@Z			; STTriangleMesh::`scalar deleting destructor'
PUBLIC	??0MySphere@@QAE@XZ				; MySphere::MySphere
PUBLIC	??1MySphere@@QAE@XZ				; MySphere::~MySphere
PUBLIC	?Create@MySphere@@QAEXH@Z			; MySphere::Create
PUBLIC	?GetTriangleMesh@MySphere@@QAE?AV?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@XZ ; MySphere::GetTriangleMesh
PUBLIC	?GetTriangleMesh@MySphere@@QAEPAVSTTriangleMesh@@H@Z ; MySphere::GetTriangleMesh
PUBLIC	?FileName@MySphere@@QAEPADXZ			; MySphere::FileName
PUBLIC	??0?$allocator@USTVector3@@@std@@QAE@XZ		; std::allocator<STVector3>::allocator<STVector3>
PUBLIC	?deallocate@?$allocator@USTVector3@@@std@@QAEXQAUSTVector3@@I@Z ; std::allocator<STVector3>::deallocate
PUBLIC	?allocate@?$allocator@USTVector3@@@std@@QAEPAUSTVector3@@I@Z ; std::allocator<STVector3>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAIABV?$allocator@USTVector3@@@2@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SA?AV?$allocator@USTVector3@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::select_on_container_copy_construction
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::~_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<STVector3> >::_Vector_val<std::_Simple_types<STVector3> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$allocator@USTVector3@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second
PUBLIC	??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >
PUBLIC	??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >
PUBLIC	??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::vector<STVector3,std::allocator<STVector3> >::~vector<STVector3,std::allocator<STVector3> >
PUBLIC	?push_back@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ; std::vector<STVector3,std::allocator<STVector3> >::push_back
PUBLIC	?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ ; std::vector<STVector3,std::allocator<STVector3> >::clear
PUBLIC	?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::size
PUBLIC	?max_size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::max_size
PUBLIC	?capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABE_NXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Has_unused_capacity
PUBLIC	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
PUBLIC	?_Umove@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU3@00@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00U?$integral_constant@_N$0A@@2@@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEII@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Calculate_growth
PUBLIC	?_Buy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAE_NI@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Buy
PUBLIC	?_Change_array@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXQAUSTVector3@@II@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Change_array
PUBLIC	?_Tidy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Tidy
PUBLIC	?_Xlength@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Xlength
PUBLIC	?_Xrange@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Xrange
PUBLIC	?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Orphan_range
PUBLIC	??0?$allocator@UTriangleIndices@@@std@@QAE@XZ	; std::allocator<TriangleIndices>::allocator<TriangleIndices>
PUBLIC	?deallocate@?$allocator@UTriangleIndices@@@std@@QAEXQAUTriangleIndices@@I@Z ; std::allocator<TriangleIndices>::deallocate
PUBLIC	?allocate@?$allocator@UTriangleIndices@@@std@@QAEPAUTriangleIndices@@I@Z ; std::allocator<TriangleIndices>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAIABV?$allocator@UTriangleIndices@@@2@@Z ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SA?AV?$allocator@UTriangleIndices@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::select_on_container_copy_construction
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::~_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TriangleIndices> >::_Vector_val<std::_Simple_types<TriangleIndices> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second
PUBLIC	??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >
PUBLIC	??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >
PUBLIC	??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::~vector<TriangleIndices,std::allocator<TriangleIndices> >
PUBLIC	?push_back@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::push_back
PUBLIC	?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size
PUBLIC	?max_size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::max_size
PUBLIC	?capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABE_NXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Has_unused_capacity
PUBLIC	?at@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEAAUTriangleIndices@@I@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::at
PUBLIC	?_Umove@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU3@00@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00U?$integral_constant@_N$00@2@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@0@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEII@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Calculate_growth
PUBLIC	?_Buy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAE_NI@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Buy
PUBLIC	?_Change_array@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXQAUTriangleIndices@@II@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Change_array
PUBLIC	?_Tidy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Tidy
PUBLIC	?_Xlength@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xlength
PUBLIC	?_Xrange@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xrange
PUBLIC	?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Orphan_range
PUBLIC	??0?$allocator@PAVSTTriangleMesh@@@std@@QAE@XZ	; std::allocator<STTriangleMesh *>::allocator<STTriangleMesh *>
PUBLIC	?deallocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEXQAPAVSTTriangleMesh@@I@Z ; std::allocator<STTriangleMesh *>::deallocate
PUBLIC	?allocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEPAPAVSTTriangleMesh@@I@Z ; std::allocator<STTriangleMesh *>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAIABV?$allocator@PAVSTTriangleMesh@@@2@@Z ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SA?AV?$allocator@PAVSTTriangleMesh@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::select_on_container_copy_construction
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >
PUBLIC	??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::~_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >
PUBLIC	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Free_proxy
PUBLIC	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getpfirst
PUBLIC	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<STTriangleMesh *> >::_Vector_val<std::_Simple_types<STTriangleMesh *> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second
PUBLIC	??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
PUBLIC	??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
PUBLIC	??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::~vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
PUBLIC	?push_back@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::push_back
PUBLIC	?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::clear
PUBLIC	?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
PUBLIC	?max_size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::max_size
PUBLIC	?capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABE_NXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Has_unused_capacity
PUBLIC	??A?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEAAPAVSTTriangleMesh@@I@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::operator[]
PUBLIC	?_Umove@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV3@00@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove
PUBLIC	?_Umove_if_noexcept1@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00U?$integral_constant@_N$00@2@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEII@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Calculate_growth
PUBLIC	?_Buy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAE_NI@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Buy
PUBLIC	?_Change_array@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXQAPAVSTTriangleMesh@@II@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Change_array
PUBLIC	?_Tidy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Tidy
PUBLIC	?_Xlength@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@CAXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Orphan_range
PUBLIC	?InitVertices@MySphere@@AAEXXZ			; MySphere::InitVertices
PUBLIC	?InitFaces@MySphere@@AAEXXZ			; MySphere::InitFaces
PUBLIC	?SubDivideTriangles@MySphere@@AAEXHPAV?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@0PAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@3@@Z ; MySphere::SubDivideTriangles
PUBLIC	?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z ; MySphere::GenerateMesh
PUBLIC	?MidPoint@MySphere@@AAEHHHPAV?$multimap@JHU?$less@J@std@@V?$allocator@U?$pair@$$CBJH@std@@@2@@std@@PAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@3@@Z ; MySphere::MidPoint
PUBLIC	?Offset@MySphere@@AAEHHPAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@Z ; MySphere::Offset
PUBLIC	?MakeTIndices@MySphere@@AAE?AUTriangleIndices@@HHH@Z ; MySphere::MakeTIndices
PUBLIC	?ClearMesh@MySphere@@AAEXXZ			; MySphere::ClearMesh
PUBLIC	?Save@MySphere@@AAEXPAD@Z			; MySphere::Save
PUBLIC	??$move@AAUTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::move<TriangleIndices &>
PUBLIC	??$emplace_back@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::emplace_back<TriangleIndices>
PUBLIC	??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::forward<TriangleIndices>
PUBLIC	??$_Emplace_back_with_unused_capacity@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEX$$QAUTriangleIndices@@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_back_with_unused_capacity<TriangleIndices>
PUBLIC	??$_Unfancy@UTriangleIndices@@@std@@YAPAUTriangleIndices@@PAU1@@Z ; std::_Unfancy<TriangleIndices>
PUBLIC	??$construct@UTriangleIndices@@U1@@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAXAAV?$allocator@UTriangleIndices@@@1@QAUTriangleIndices@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::construct<TriangleIndices,TriangleIndices>
PUBLIC	??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_reallocate<TriangleIndices>
PUBLIC	??$?0V?$allocator@UTriangleIndices@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UTriangleIndices@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > ><std::allocator<TriangleIndices>,void>
PUBLIC	??$_Ucopy@PAUTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU2@00@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Ucopy<TriangleIndices *>
PUBLIC	??$move@AAUSTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::move<STVector3 &>
PUBLIC	??$emplace_back@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ; std::vector<STVector3,std::allocator<STVector3> >::emplace_back<STVector3>
PUBLIC	??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::forward<STVector3>
PUBLIC	??$_Emplace_back_with_unused_capacity@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEX$$QAUSTVector3@@@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_back_with_unused_capacity<STVector3>
PUBLIC	??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z ; std::_Unfancy<STVector3>
PUBLIC	??$construct@USTVector3@@U1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3>
PUBLIC	??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_reallocate<STVector3>
PUBLIC	??$?0V?$allocator@USTVector3@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USTVector3@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > ><std::allocator<STVector3>,void>
PUBLIC	??$_Ucopy@PAUSTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU2@00@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Ucopy<STVector3 *>
PUBLIC	??$emplace_back@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::emplace_back<STTriangleMesh * const &>
PUBLIC	??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z ; std::forward<STTriangleMesh * const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXABQAVSTTriangleMesh@@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_back_with_unused_capacity<STTriangleMesh * const &>
PUBLIC	??$_Unfancy@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@@Z ; std::_Unfancy<STTriangleMesh *>
PUBLIC	??$construct@PAVSTTriangleMesh@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAXAAV?$allocator@PAVSTTriangleMesh@@@1@QAPAVSTTriangleMesh@@ABQAV3@@Z ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::construct<STTriangleMesh *,STTriangleMesh * const &>
PUBLIC	??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_reallocate<STTriangleMesh * const &>
PUBLIC	??$?0V?$allocator@PAVSTTriangleMesh@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > ><std::allocator<STTriangleMesh *>,void>
PUBLIC	??$_Ucopy@PAPAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV2@00@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Ucopy<STTriangleMesh * *>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@@Z ; std::_Destroy_range<std::allocator<STVector3> >
PUBLIC	??$_Destroy_range@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ; std::_Destroy_range<std::allocator<STTriangleMesh *> >
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	?decimal_point@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::decimal_point
PUBLIC	?thousands_sep@?$numpunct@D@std@@QBEDXZ		; std::numpunct<char>::thousands_sep
PUBLIC	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
PUBLIC	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
PUBLIC	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
PUBLIC	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z	; std::numpunct<char>::_Init
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	?_Tidy@?$numpunct@D@std@@AAEXXZ			; std::numpunct<char>::_Tidy
PUBLIC	??_G?$numpunct@D@std@@MAEPAXI@Z			; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$_Max_value@I@std@@YAABIABI0@Z		; std::_Max_value<unsigned int>
PUBLIC	??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0PAVSTTriangleMesh@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVSTTriangleMesh@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STTriangleMesh *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<STTriangleMesh *> > >
PUBLIC	??$?0UTriangleIndices@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UTriangleIndices@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><TriangleIndices>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<TriangleIndices> > >
PUBLIC	??$_Destroy_range@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@@Z ; std::_Destroy_range<std::allocator<TriangleIndices> >
PUBLIC	??$_Get_size_of_n@$0M@@std@@YAII@Z		; std::_Get_size_of_n<12>
PUBLIC	??$?0USTVector3@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USTVector3@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STVector3>
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<STVector3> > >
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
PUBLIC	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z		; std::operator!=<char,char>
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Verify_range@D@std@@YAXQBD0@Z		; std::_Verify_range<char>
PUBLIC	??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z ; std::_Adl_verify_range1<char const *,char const *>
PUBLIC	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
PUBLIC	?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
PUBLIC	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
PUBLIC	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
PUBLIC	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
PUBLIC	??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
PUBLIC	??$forward@V?$allocator@UTriangleIndices@@@std@@@std@@YA$$QAV?$allocator@UTriangleIndices@@@0@AAV10@@Z ; std::forward<std::allocator<TriangleIndices> >
PUBLIC	??$?0V?$allocator@UTriangleIndices@@@std@@$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UTriangleIndices@@@1@@Z ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><std::allocator<TriangleIndices> >
PUBLIC	??$_Uninitialized_copy@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z ; std::_Uninitialized_copy<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >
PUBLIC	??$forward@V?$allocator@USTVector3@@@std@@@std@@YA$$QAV?$allocator@USTVector3@@@0@AAV10@@Z ; std::forward<std::allocator<STVector3> >
PUBLIC	??$?0V?$allocator@USTVector3@@@std@@$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USTVector3@@@1@@Z ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><std::allocator<STVector3> >
PUBLIC	??$_Uninitialized_copy@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z ; std::_Uninitialized_copy<STVector3 *,STVector3 *,std::allocator<STVector3> >
PUBLIC	??$forward@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YA$$QAV?$allocator@PAVSTTriangleMesh@@@0@AAV10@@Z ; std::forward<std::allocator<STTriangleMesh *> >
PUBLIC	??$?0V?$allocator@PAVSTTriangleMesh@@@std@@$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><std::allocator<STTriangleMesh *> >
PUBLIC	??$_Uninitialized_copy@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ; std::_Uninitialized_copy<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$_Destroy_range1@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<STVector3> >
PUBLIC	??$_Destroy_range1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<STTriangleMesh *> >
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$_Destroy_range1@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<TriangleIndices> >
PUBLIC	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >
PUBLIC	??$_Uninitialized_move@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z ; std::_Uninitialized_move<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >
PUBLIC	??$_Uninitialized_move@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z ; std::_Uninitialized_move<STVector3 *,STVector3 *,std::allocator<STVector3> >
PUBLIC	??$_Uninitialized_move@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ; std::_Uninitialized_move<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
PUBLIC	??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
PUBLIC	??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
PUBLIC	??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z ; std::_Get_unwrapped<TriangleIndices>
PUBLIC	??$_Idl_distance@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0@Z ; std::_Idl_distance<TriangleIndices *,TriangleIndices *>
PUBLIC	??$_Idl_distance1@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<TriangleIndices *,TriangleIndices *>
PUBLIC	??$_Get_unwrapped_n@UTriangleIndices@@H$0A@@std@@YAPAUTriangleIndices@@QAU1@H@Z ; std::_Get_unwrapped_n<TriangleIndices,int,0>
PUBLIC	??$_Ptr_copy_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z ; std::_Ptr_copy_cat<TriangleIndices,TriangleIndices>
PUBLIC	??$_Uninitialized_copy_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >
PUBLIC	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
PUBLIC	??$_Seek_wrapped@UTriangleIndices@@@std@@YAXAAPAUTriangleIndices@@QAU1@@Z ; std::_Seek_wrapped<TriangleIndices>
PUBLIC	??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z ; std::_Get_unwrapped<STVector3>
PUBLIC	??$_Idl_distance@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0@Z ; std::_Idl_distance<STVector3 *,STVector3 *>
PUBLIC	??$_Idl_distance1@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<STVector3 *,STVector3 *>
PUBLIC	??$_Get_unwrapped_n@USTVector3@@H$0A@@std@@YAPAUSTVector3@@QAU1@H@Z ; std::_Get_unwrapped_n<STVector3,int,0>
PUBLIC	??$_Ptr_copy_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z ; std::_Ptr_copy_cat<STVector3,STVector3>
PUBLIC	??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_copy_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >
PUBLIC	??$_Seek_wrapped@USTVector3@@@std@@YAXAAPAUSTVector3@@QAU1@@Z ; std::_Seek_wrapped<STVector3>
PUBLIC	??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Get_unwrapped<STTriangleMesh *>
PUBLIC	??$_Idl_distance@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0@Z ; std::_Idl_distance<STTriangleMesh * *,STTriangleMesh * *>
PUBLIC	??$_Idl_distance1@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<STTriangleMesh * *,STTriangleMesh * *>
PUBLIC	??$_Get_unwrapped_n@PAVSTTriangleMesh@@H$0A@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@H@Z ; std::_Get_unwrapped_n<STTriangleMesh *,int,0>
PUBLIC	??$_Ptr_copy_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z ; std::_Ptr_copy_cat<STTriangleMesh *,STTriangleMesh *>
PUBLIC	??$_Uninitialized_copy_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >
PUBLIC	??$_Seek_wrapped@PAVSTTriangleMesh@@@std@@YAXAAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Seek_wrapped<STTriangleMesh *>
PUBLIC	??$_Ptr_move_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z ; std::_Ptr_move_cat<TriangleIndices,TriangleIndices>
PUBLIC	??$_Uninitialized_move_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >
PUBLIC	??$_Ptr_move_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z ; std::_Ptr_move_cat<STVector3,STVector3>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >
PUBLIC	??$_Ptr_move_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z ; std::_Ptr_move_cat<STTriangleMesh *,STTriangleMesh *>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >
PUBLIC	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
PUBLIC	??$_Copy_memmove@PAUTriangleIndices@@PAU1@@std@@YAPAUTriangleIndices@@PAU1@00@Z ; std::_Copy_memmove<TriangleIndices *,TriangleIndices *>
PUBLIC	??0?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@PAUSTVector3@@AAV?$allocator@USTVector3@@@1@@Z ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
PUBLIC	??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::~_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Release
PUBLIC	??$_Emplace_back@AAUSTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXAAUSTVector3@@@Z ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3 &>
PUBLIC	??$_Copy_memmove@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@00@Z ; std::_Copy_memmove<STTriangleMesh * *,STTriangleMesh * *>
PUBLIC	??$_Emplace_back@USTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3>
PUBLIC	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
PUBLIC	??$forward@AAUSTVector3@@@std@@YAAAUSTVector3@@AAU1@@Z ; std::forward<STVector3 &>
PUBLIC	??$construct@USTVector3@@AAU1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@AAU3@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3 &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic@			; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error@	; `string'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_C@_01LFCBOECM@?4@				; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1LO@PDFJBEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ ; `string'
PUBLIC	??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@ ; `string'
PUBLIC	??_C@_02BBAHNLBA@?$CFp@				; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu@				; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld@				; `string'
PUBLIC	??_C@_02BDDLJJBK@lu@				; `string'
PUBLIC	??_C@_02EAOCLKAK@ld@				; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
PUBLIC	??_C@_02MDKMJEGG@eE@				; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP@				; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
PUBLIC	?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@	; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@3f800000
PUBLIC	__real@3fc999999999999a
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40a00000
PUBLIC	__real@4202a05f20000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	__invalid_parameter:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strcspn:PROC
EXTRN	_strlen:PROC
EXTRN	__calloc_dbg:PROC
EXTRN	__free_dbg:PROC
EXTRN	__malloc_dbg:PROC
EXTRN	__CrtDbgReport:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_free:PROC
EXTRN	_abs:PROC
EXTRN	_fabs:PROC
EXTRN	_sqrt:PROC
EXTRN	_frexp:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	_terminate:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	_localeconv:PROC
EXTRN	__Getctype:PROC
EXTRN	__Getcvt:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z:PROC ; std::_Execute_once
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	??0STTriangleMesh@@QAE@XZ:PROC			; STTriangleMesh::STTriangleMesh
EXTRN	??1STTriangleMesh@@QAE@XZ:PROC			; STTriangleMesh::~STTriangleMesh
EXTRN	?Write@STTriangleMesh@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:PROC ; STTriangleMesh::Write
EXTRN	?AddVertex@STTriangleMesh@@QAEIMMMMM@Z:PROC	; STTriangleMesh::AddVertex
EXTRN	?AddFace@STTriangleMesh@@QAEIIII@Z:PROC		; STTriangleMesh::AddFace
EXTRN	??0DiamondSquare@@QAE@XZ:PROC			; DiamondSquare::DiamondSquare
EXTRN	??1DiamondSquare@@QAE@XZ:PROC			; DiamondSquare::~DiamondSquare
EXTRN	?getArray@DiamondSquare@@QAEPAPAMXZ:PROC	; DiamondSquare::getArray
EXTRN	?buildArray@DiamondSquare@@QAEXXZ:PROC		; DiamondSquare::buildArray
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cout
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA
_BSS	SEGMENT
?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA DD 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
_BSS	ENDS
;	COMDAT ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A
_BSS	SEGMENT
?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A DQ 01H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+10
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fc999999999999a
CONST	SEGMENT
__real@3fc999999999999a DQ 03fc999999999999ar	; 0.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
data$r	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ DB '"'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
CONST	SEGMENT
??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@ DB 'transposed pointer ran'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp@ DB '%p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@ DB 'invalid vecto'
	DB	'r<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
CONST	SEGMENT
??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'i', 00H, 'c', 00H, '_', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ',', 00H, 's', 00H, 't', 00H, 'r', 00H, 'u'
	DB	00H, 'c', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '_'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'i', 00H, 't', 00H, 's', 00H
	DB	'<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>', 00H, ','
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, '<', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xstring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@ DB 'string subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@PDFJBEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
CONST	SEGMENT
??_C@_1LO@PDFJBEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'S', 00H, 'T', 00H
	DB	'T', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'l'
	DB	00H, 'e', 00H, 'M', 00H, 'e', 00H, 's', 00H, 'h', 00H, ' ', 00H
	DB	'*', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, ' ', 00H, 'S', 00H, 'T', 00H, 'T', 00H, 'r'
	DB	00H, 'i', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'e', 00H
	DB	'M', 00H, 'e', 00H, 's', 00H, 'h', 00H, ' ', 00H, '*', 00H, '>'
	DB	00H, ' ', 00H, '>', 00H, ':', 00H, ':', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '[', 00H, ']', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4@
CONST	SEGMENT
??_C@_01LFCBOECM@?4@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error@ DB 'iostream stream error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xmemory0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '7', 00H, '\', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'v', 00H, 'c', 00H, '\', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'm', 00H
	DB	's', 00H, 'v', 00H, 'c', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '1', 00H, '6', 00H, '.', 00H, '2', 00H, '7', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
CONST	SEGMENT
??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@ DB 'c:\pro'
	DB	'gram files (x86)\microsoft visual studio\2017\community\vc\to'
	DB	'ols\msvc\14.16.27023\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$2
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$numpunct@D@std@@MAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3
__ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0
__ehfuncinfo$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z$0
__unwindtable$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z$0
__unwindtable$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z$0
__ehfuncinfo$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z$0
__tryblocktable$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z$3
__unwindtable$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?Save@MySphere@@AAEXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Save@MySphere@@AAEXPAD@Z$0
__unwindtable$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z$1
__unwindtable$?Create@MySphere@@QAEXH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@MySphere@@QAEXH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Create@MySphere@@QAEXH@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Create@MySphere@@QAEXH@Z$2
__ehfuncinfo$?Save@MySphere@@AAEXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Save@MySphere@@AAEXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Create@MySphere@@QAEXH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Create@MySphere@@QAEXH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1MySphere@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$4
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$4
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?iostream_category@std@@YAABVerror_category@1@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ctype@D@std@@MAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0
__ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1locale@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0locale@std@@QAE@ABV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Yarn@_W@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Yarn@D@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
__ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$numpunct@D@std@@2P6AXXZA@@3P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$numpunct@D@std@@2P6AXXZA@@3P6AXXZA
CRT$XCU	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@USTVector3@@AAU1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@AAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USTVector3@@AAU1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@AAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3 &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	12					; 0000000cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAUSTVector3@@@std@@YAAAUSTVector3@@AAU1@@Z ; std::forward<STVector3 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0STVector3@@QAE@ABU0@@Z		; STVector3::STVector3

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@USTVector3@@AAU1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@AAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3 &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAUSTVector3@@@std@@YAAAUSTVector3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAUSTVector3@@@std@@YAAAUSTVector3@@AAU1@@Z PROC ; std::forward<STVector3 &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@AAUSTVector3@@@std@@YAAAUSTVector3@@AAU1@@Z ENDP ; std::forward<STVector3 &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z PROC ; std::forward<std::_Facet_base * &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ENDP ; std::forward<std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@USTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@USTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z PROC ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::forward<STVector3>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z ; std::_Unfancy<STVector3>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@USTVector3@@U1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3>
	add	esp, 12					; 0000000cH

; 165  : 		++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 166  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@USTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ENDP ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@00@Z PROC ; std::_Copy_memmove<STTriangleMesh * *,STTriangleMesh * *>, COMDAT

; 2398 : 	{	// implement copy-like function as memmove

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 2405 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@00@Z ENDP ; std::_Copy_memmove<STTriangleMesh * *,STTriangleMesh * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@AAUSTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXAAUSTVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAUSTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXAAUSTVector3@@@Z PROC ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3 &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		allocator_traits<_Alloc>::construct(_Al, _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@AAUSTVector3@@@std@@YAAAUSTVector3@@AAU1@@Z ; std::forward<STVector3 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z ; std::_Unfancy<STVector3>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@USTVector3@@AAU1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@AAU3@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3 &>
	add	esp, 12					; 0000000cH

; 165  : 		++_Last;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 166  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@AAUSTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXAAUSTVector3@@@Z ENDP ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3 &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Release@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@XZ PROC ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Release, COMDAT
; _this$ = ecx

; 169  : 		{	// suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		_First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 171  : 		return (_Last);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 172  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@XZ ENDP ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::~_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy all elements guarded by this instance

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		_Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@@Z ; std::_Destroy_range<std::allocator<STVector3> >
	add	esp, 12					; 0000000cH

; 159  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::~_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@PAUSTVector3@@AAV?$allocator@USTVector3@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@PAUSTVector3@@AAV?$allocator@USTVector3@@@1@@Z PROC ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >, COMDAT
; _this$ = ecx

; 150  : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  : 		: _First(_Dest),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx

; 148  : 		_Last(_Dest),

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx+4], eax

; 149  : 		_Al(_Al_)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 151  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@PAUSTVector3@@AAV?$allocator@USTVector3@@@1@@Z ENDP ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAUTriangleIndices@@PAU1@@std@@YAPAUTriangleIndices@@PAU1@00@Z
_TEXT	SEGMENT
__Last_ch$ = -16					; size = 4
__Count$ = -12						; size = 4
__Dest_ch$ = -8						; size = 4
__First_ch$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAUTriangleIndices@@PAU1@@std@@YAPAUTriangleIndices@@PAU1@00@Z PROC ; std::_Copy_memmove<TriangleIndices *,TriangleIndices *>, COMDAT

; 2398 : 	{	// implement copy-like function as memmove

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));

	mov	ecx, DWORD PTR __Last$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], ecx

; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));

	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], edx

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First_ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest_ch$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 2405 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAUTriangleIndices@@PAU1@@std@@YAPAUTriangleIndices@@PAU1@00@Z ENDP ; std::_Copy_memmove<TriangleIndices *,TriangleIndices *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
_<_Val2_0>$ = 12					; size = 4
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	eax, DWORD PTR _<_Val2_0>$[ebp]
	push	eax
	call	??$forward@AAPAV_Facet_base@std@@@std@@YAAAPAV_Facet_base@0@AAPAV10@@Z ; std::forward<std::_Facet_base * &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >, COMDAT

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@00@Z ; std::_Copy_memmove<STTriangleMesh * *,STTriangleMesh * *>
	add	esp, 12					; 0000000cH

; 245  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z PROC ; std::_Ptr_move_cat<STTriangleMesh *,STTriangleMesh *>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp

; 1087 : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1088 : 	}

	pop	ebp
	ret	0
??$_Ptr_move_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z ENDP ; std::_Ptr_move_cat<STTriangleMesh *,STTriangleMesh *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
__Backout$ = -28					; size = 12
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >, COMDAT

; 228  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H

; 229  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@PAUSTVector3@@AAV?$allocator@USTVector3@@@1@@Z ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 230  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN4@Uninitiali:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Uninitiali

; 231  : 		{
; 232  : 		_Backout._Emplace_back(_STD move(*_First));

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$move@AAUSTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::move<STVector3 &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@USTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3>

; 233  : 		}

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 234  : 
; 235  : 	return (_Backout._Release());

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::~_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
	mov	eax, DWORD PTR $T2[ebp]

; 236  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::~_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
__ehhandler$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_move_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z PROC ; std::_Ptr_move_cat<STVector3,STVector3>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 1087 : 	return {};

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	al, BYTE PTR $T1[ebp]

; 1088 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_move_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z ENDP ; std::_Ptr_move_cat<STVector3,STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >, COMDAT

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PAUTriangleIndices@@PAU1@@std@@YAPAUTriangleIndices@@PAU1@00@Z ; std::_Copy_memmove<TriangleIndices *,TriangleIndices *>
	add	esp, 12					; 0000000cH

; 245  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z PROC ; std::_Ptr_move_cat<TriangleIndices,TriangleIndices>, COMDAT

; 1086 : 	{	// return pointer move optimization category for pointers

	push	ebp
	mov	ebp, esp

; 1087 : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1088 : 	}

	pop	ebp
	ret	0
??$_Ptr_move_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z ENDP ; std::_Ptr_move_cat<TriangleIndices,TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@PAVSTTriangleMesh@@@std@@YAXAAPAPAVSTTriangleMesh@@QAPAV1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@PAVSTTriangleMesh@@@std@@YAXAAPAPAVSTTriangleMesh@@QAPAV1@@Z PROC ; std::_Seek_wrapped<STTriangleMesh *>, COMDAT

; 871  : 	{

	push	ebp
	mov	ebp, esp

; 872  : 	_It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 873  : 	}

	pop	ebp
	ret	0
??$_Seek_wrapped@PAVSTTriangleMesh@@@std@@YAXAAPAPAVSTTriangleMesh@@QAPAV1@@Z ENDP ; std::_Seek_wrapped<STTriangleMesh *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >, COMDAT

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@00@Z ; std::_Copy_memmove<STTriangleMesh * *,STTriangleMesh * *>
	add	esp, 12					; 0000000cH

; 203  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_copy_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_copy_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z PROC ; std::_Ptr_copy_cat<STTriangleMesh *,STTriangleMesh *>, COMDAT

; 1069 : 	{	// return pointer copy optimization category for pointers

	push	ebp
	mov	ebp, esp

; 1070 : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1071 : 	}

	pop	ebp
	ret	0
??$_Ptr_copy_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z ENDP ; std::_Ptr_copy_cat<STTriangleMesh *,STTriangleMesh *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@PAVSTTriangleMesh@@H$0A@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@PAVSTTriangleMesh@@H$0A@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@H@Z PROC ; std::_Get_unwrapped_n<STTriangleMesh *,int,0>, COMDAT

; 808  : 	{

	push	ebp
	mov	ebp, esp

; 809  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 810  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped_n@PAVSTTriangleMesh@@H$0A@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@H@Z ENDP ; std::_Get_unwrapped_n<STTriangleMesh *,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<STTriangleMesh * *,STTriangleMesh * *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

	push	ebp
	mov	ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 2

; 969  : 	}

	pop	ebp
	ret	0
??$_Idl_distance1@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<STTriangleMesh * *,STTriangleMesh * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0@Z PROC ; std::_Idl_distance<STTriangleMesh * *,STTriangleMesh * *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp
	push	ecx

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Idl_distance1@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<STTriangleMesh * *,STTriangleMesh * *>
	add	esp, 12					; 0000000cH

; 976  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Idl_distance@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0@Z ENDP ; std::_Idl_distance<STTriangleMesh * *,STTriangleMesh * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z PROC ; std::_Get_unwrapped<STTriangleMesh *>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 663  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z ENDP ; std::_Get_unwrapped<STTriangleMesh *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@USTVector3@@@std@@YAXAAPAUSTVector3@@QAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@USTVector3@@@std@@YAXAAPAUSTVector3@@QAU1@@Z PROC ; std::_Seek_wrapped<STVector3>, COMDAT

; 871  : 	{

	push	ebp
	mov	ebp, esp

; 872  : 	_It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 873  : 	}

	pop	ebp
	ret	0
??$_Seek_wrapped@USTVector3@@@std@@YAXAAPAUSTVector3@@QAU1@@Z ENDP ; std::_Seek_wrapped<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
__Backout$ = -28					; size = 12
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >, COMDAT

; 186  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, no special optimization

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H

; 187  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@PAUSTVector3@@AAV?$allocator@USTVector3@@@1@@Z ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 188  : 	for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	edx, DWORD PTR __First$[ebp]
	add	edx, 12					; 0000000cH
	mov	DWORD PTR __First$[ebp], edx
$LN4@Uninitiali:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Uninitiali

; 189  : 		{
; 190  : 		_Backout._Emplace_back(*_First);

	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@AAUSTVector3@@@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXAAUSTVector3@@@Z ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Emplace_back<STVector3 &>

; 191  : 		}

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 192  : 
; 193  : 	return (_Backout._Release());

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::~_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
	mov	eax, DWORD PTR $T2[ebp]

; 194  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@PAUSTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >::~_Uninitialized_backout_al<STVector3 *,std::allocator<STVector3> >
__ehhandler$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_copy_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z PROC ; std::_Ptr_copy_cat<STVector3,STVector3>, COMDAT

; 1069 : 	{	// return pointer copy optimization category for pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 1070 : 	return {};

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	al, BYTE PTR $T1[ebp]

; 1071 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_copy_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z ENDP ; std::_Ptr_copy_cat<STVector3,STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@USTVector3@@H$0A@@std@@YAPAUSTVector3@@QAU1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@USTVector3@@H$0A@@std@@YAPAUSTVector3@@QAU1@H@Z PROC ; std::_Get_unwrapped_n<STVector3,int,0>, COMDAT

; 808  : 	{

	push	ebp
	mov	ebp, esp

; 809  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 810  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped_n@USTVector3@@H$0A@@std@@YAPAUSTVector3@@QAU1@H@Z ENDP ; std::_Get_unwrapped_n<STVector3,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<STVector3 *,STVector3 *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

	push	ebp
	mov	ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx

; 969  : 	}

	pop	ebp
	ret	0
??$_Idl_distance1@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<STVector3 *,STVector3 *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0@Z PROC ; std::_Idl_distance<STVector3 *,STVector3 *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp
	push	ecx

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Idl_distance1@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<STVector3 *,STVector3 *>
	add	esp, 12					; 0000000cH

; 976  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Idl_distance@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0@Z ENDP ; std::_Idl_distance<STVector3 *,STVector3 *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z PROC ; std::_Get_unwrapped<STVector3>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 663  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z ENDP ; std::_Get_unwrapped<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@UTriangleIndices@@@std@@YAXAAPAUTriangleIndices@@QAU1@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
__UIt$ = 12						; size = 4
??$_Seek_wrapped@UTriangleIndices@@@std@@YAXAAPAUTriangleIndices@@QAU1@@Z PROC ; std::_Seek_wrapped<TriangleIndices>, COMDAT

; 871  : 	{

	push	ebp
	mov	ebp, esp

; 872  : 	_It = _UIt;

	mov	eax, DWORD PTR __It$[ebp]
	mov	ecx, DWORD PTR __UIt$[ebp]
	mov	DWORD PTR [eax], ecx

; 873  : 	}

	pop	ebp
	ret	0
??$_Seek_wrapped@UTriangleIndices@@@std@@YAXAAPAUTriangleIndices@@QAU1@@Z ENDP ; std::_Seek_wrapped<TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 436  : 		constexpr _Unused_parameter(_Ty&&) noexcept {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >, COMDAT

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	push	ebp
	mov	ebp, esp

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PAUTriangleIndices@@PAU1@@std@@YAPAUTriangleIndices@@PAU1@00@Z ; std::_Copy_memmove<TriangleIndices *,TriangleIndices *>
	add	esp, 12					; 0000000cH

; 203  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_copy_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_copy_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z PROC ; std::_Ptr_copy_cat<TriangleIndices,TriangleIndices>, COMDAT

; 1069 : 	{	// return pointer copy optimization category for pointers

	push	ebp
	mov	ebp, esp

; 1070 : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1071 : 	}

	pop	ebp
	ret	0
??$_Ptr_copy_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z ENDP ; std::_Ptr_copy_cat<TriangleIndices,TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@UTriangleIndices@@H$0A@@std@@YAPAUTriangleIndices@@QAU1@H@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Get_unwrapped_n@UTriangleIndices@@H$0A@@std@@YAPAUTriangleIndices@@QAU1@H@Z PROC ; std::_Get_unwrapped_n<TriangleIndices,int,0>, COMDAT

; 808  : 	{

	push	ebp
	mov	ebp, esp

; 809  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 810  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped_n@UTriangleIndices@@H$0A@@std@@YAPAUTriangleIndices@@QAU1@H@Z ENDP ; std::_Get_unwrapped_n<TriangleIndices,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance1@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Idl_distance1@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Idl_distance1<TriangleIndices *,TriangleIndices *>, COMDAT

; 967  : 	{	// _Idl_distance for random-access iterators

	push	ebp
	mov	ebp, esp

; 968  : 	return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx

; 969  : 	}

	pop	ebp
	ret	0
??$_Idl_distance1@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Idl_distance1<TriangleIndices *,TriangleIndices *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Idl_distance@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0@Z PROC ; std::_Idl_distance<TriangleIndices *,TriangleIndices *>, COMDAT

; 974  : 	{	// tries to get the distance between _First and _Last if they are random-access iterators

	push	ebp
	mov	ebp, esp
	push	ecx

; 975  : 	return (_Idl_distance1<_Checked>(_First, _Last, _Iter_cat_t<_Iter>()));

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Idl_distance1@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0Urandom_access_iterator_tag@0@@Z ; std::_Idl_distance1<TriangleIndices *,TriangleIndices *>
	add	esp, 12					; 0000000cH

; 976  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Idl_distance@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0@Z ENDP ; std::_Idl_distance<TriangleIndices *,TriangleIndices *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z PROC ; std::_Get_unwrapped<TriangleIndices>, COMDAT

; 662  : 	{	// special case already-unwrapped pointers

	push	ebp
	mov	ebp, esp

; 663  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 664  : 	}

	pop	ebp
	ret	0
??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z ENDP ; std::_Get_unwrapped<TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Ptr$ = 8						; size = 4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>, COMDAT
; _this$ = ecx

; 2144 : 		{	// construct with compatible pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2143 : 		: _Mypair(_Zero_then_variadic_args_t(), _Ptr)

	lea	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0AAPAV_Facet_base@std@@@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@AAPAV_Facet_base@1@@Z ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1><std::_Facet_base * &>

; 2145 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 297  : 	__PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT

; 1843 : 	__PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Ptr$ = 12						; size = 4
__Cvt$ = 16						; size = 44
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z PROC ; std::numpunct<char>::_Getvals<char>, COMDAT
; _this$ = ecx

; 188  : 		{	// get values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  : 		_Dp = _Maklocchr(_Ptr->decimal_point[0], static_cast<_Elem2 *>(nullptr), _Cvt);

	lea	eax, DWORD PTR __Cvt$[ebp]
	push	eax
	push	0
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+edx]
	push	edx
	call	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ; std::_Maklocchr<char>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+12], al

; 190  : 		_Kseparator = _Maklocchr(_Ptr->thousands_sep[0], static_cast<_Elem2 *>(nullptr), _Cvt);

	lea	edx, DWORD PTR __Cvt$[ebp]
	push	edx
	push	0
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR [edx+4]
	movzx	ecx, BYTE PTR [eax+ecx]
	push	ecx
	call	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ; std::_Maklocchr<char>
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+13], al

; 191  : 		}

	mov	esp, ebp
	pop	ebp
	ret	52					; 00000034H
??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ENDP ; std::numpunct<char>::_Getvals<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 634  : 	{	// convert char to _Elem using _Cvtvec

	push	ebp
	mov	ebp, esp

; 635  : 	return ((_Elem)(unsigned char)_Byte);

	mov	al, BYTE PTR __Byte$[ebp]

; 636  : 	}

	pop	ebp
	ret	0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptrdest$ = -12					; size = 4
__Ptrnext$1 = -8					; size = 4
__Count$ = -4						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 664  : 	{	// convert C string to _Elem sequence using _Cvtvec

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 665  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 1
	mov	DWORD PTR __Count$[ebp], eax

; 666  : 
; 667  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

	push	668					; 0000029cH
	push	OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	push	1
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	__calloc_dbg
	add	esp, 20					; 00000014H
	mov	DWORD PTR __Ptrdest$[ebp], eax

; 668  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 669  : 
; 670  : 	if (!_Ptrdest)

	cmp	DWORD PTR __Ptrdest$[ebp], 0
	jne	SHORT $LN5@Maklocstr

; 671  : 		_Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN5@Maklocstr:

; 672  : 
; 673  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

	mov	edx, DWORD PTR __Ptrdest$[ebp]
	mov	DWORD PTR __Ptrnext$1[ebp], edx
	jmp	SHORT $LN4@Maklocstr
$LN2@Maklocstr:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	mov	ecx, DWORD PTR __Ptrnext$1[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptrnext$1[ebp], ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx
$LN4@Maklocstr:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@Maklocstr

; 674  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

	mov	eax, DWORD PTR __Ptrnext$1[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	jmp	SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 675  : 
; 676  : 	return (_Ptrdest);

	mov	eax, DWORD PTR __Ptrdest$[ebp]
$LN6@Maklocstr:

; 677  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z
_TEXT	SEGMENT
__ULast$ = -16						; size = 4
__UDest$ = -12						; size = 4
__UFirst$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z PROC ; std::_Uninitialized_move<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Get_unwrapped<STTriangleMesh *>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Get_unwrapped<STTriangleMesh *>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0@Z ; std::_Idl_distance<STTriangleMesh * *,STTriangleMesh * *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@PAVSTTriangleMesh@@H$0A@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@H@Z ; std::_Get_unwrapped_n<STTriangleMesh *,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Ptr_move_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z ; std::_Ptr_move_cat<STTriangleMesh *,STTriangleMesh *>
	add	esp, 12					; 0000000cH
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __ULast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Uninitialized_move_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >
	add	esp, 24					; 00000018H
	push	eax
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Seek_wrapped@PAVSTTriangleMesh@@@std@@YAXAAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Seek_wrapped<STTriangleMesh *>
	add	esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ENDP ; std::_Uninitialized_move<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z
_TEXT	SEGMENT
__ULast$ = -16						; size = 4
__UDest$ = -12						; size = 4
__UFirst$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z PROC ; std::_Uninitialized_move<STVector3 *,STVector3 *,std::allocator<STVector3> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z ; std::_Get_unwrapped<STVector3>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z ; std::_Get_unwrapped<STVector3>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0@Z ; std::_Idl_distance<STVector3 *,STVector3 *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@USTVector3@@H$0A@@std@@YAPAUSTVector3@@QAU1@H@Z ; std::_Get_unwrapped_n<STVector3,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

	lea	edx, DWORD PTR __UDest$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Ptr_move_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z ; std::_Ptr_move_cat<STVector3,STVector3>
	add	esp, 8
	mov	BYTE PTR $T2[ebp], al
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UDest$[ebp]
	push	edx
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Uninitialized_move_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >
	add	esp, 24					; 00000018H
	push	eax
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Seek_wrapped@USTVector3@@@std@@YAXAAPAUSTVector3@@QAU1@@Z ; std::_Seek_wrapped<STVector3>
	add	esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z ENDP ; std::_Uninitialized_move<STVector3 *,STVector3 *,std::allocator<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z
_TEXT	SEGMENT
__ULast$ = -16						; size = 4
__UDest$ = -12						; size = 4
__UFirst$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z PROC ; std::_Uninitialized_move<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >, COMDAT

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z ; std::_Get_unwrapped<TriangleIndices>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z ; std::_Get_unwrapped<TriangleIndices>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0@Z ; std::_Idl_distance<TriangleIndices *,TriangleIndices *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@UTriangleIndices@@H$0A@@std@@YAPAUTriangleIndices@@QAU1@H@Z ; std::_Get_unwrapped_n<TriangleIndices,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 256  : 	_Seek_wrapped(_Dest,

	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Ptr_move_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z ; std::_Ptr_move_cat<TriangleIndices,TriangleIndices>
	add	esp, 12					; 0000000cH
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __ULast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Uninitialized_move_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >
	add	esp, 24					; 00000018H
	push	eax
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Seek_wrapped@UTriangleIndices@@@std@@YAXAAPAUTriangleIndices@@QAU1@@Z ; std::_Seek_wrapped<TriangleIndices>
	add	esp, 8

; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 261  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z ENDP ; std::_Uninitialized_move<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1088 : 	{	// propagate on container move assignment

	push	ebp
	mov	ebp, esp

; 1089 : 	_Left = _STD move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
	add	esp, 4

; 1090 : 	}

	pop	ebp
	ret	0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<TriangleIndices> >, COMDAT

; 1145 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

	push	ebp
	mov	ebp, esp

; 1146 : 		// nothing to do
; 1147 : 	}

	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -12						; size = 4
__Ptr_container$ = -8					; size = 4
__Block_size$ = -4					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 92   : 	{	// allocate _Bytes manually aligned to at least _Big_allocation_alignment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 94   : 	if (_Block_size <= _Bytes)

	mov	ecx, DWORD PTR __Block_size$[ebp]
	cmp	ecx, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);

	mov	DWORD PTR __Block_size$[ebp], -1
$LN8@Allocate_m:

; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	edx, DWORD PTR __Block_size$[ebp]
	push	edx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN7@Allocate_m
	jmp	SHORT $LN2@Allocate_m
$LN7@Allocate_m:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	101					; 00000065H
	push	OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	push	0
	push	101					; 00000065H
	push	OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Allocate_m
$LN2@Allocate_m:
	xor	edx, edx
	jne	SHORT $LN4@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	ecx, 4
	imul	edx, ecx, -1
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	edx, 4
	imul	eax, edx, -2
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [ecx+eax], -84215046		; fafafafaH

; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 110  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<STTriangleMesh *> >, COMDAT

; 1145 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

	push	ebp
	mov	ebp, esp

; 1146 : 		// nothing to do
; 1147 : 	}

	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<STVector3> >, COMDAT

; 1145 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

	push	ebp
	mov	ebp, esp

; 1146 : 		// nothing to do
; 1147 : 	}

	pop	ebp
	ret	0
??$_Destroy_range1@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
	add	esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 288  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z
_TEXT	SEGMENT
__ULast$ = -16						; size = 4
__UDest$ = -12						; size = 4
__UFirst$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z PROC ; std::_Uninitialized_copy<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >, COMDAT

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Get_unwrapped<STTriangleMesh *>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Get_unwrapped<STTriangleMesh *>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAPAVSTTriangleMesh@@PAPAV1@@std@@YAHABQAPAVSTTriangleMesh@@0@Z ; std::_Idl_distance<STTriangleMesh * *,STTriangleMesh * *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@PAVSTTriangleMesh@@H$0A@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@H@Z ; std::_Get_unwrapped_n<STTriangleMesh *,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 214  : 	_Seek_wrapped(_Dest,

	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Ptr_copy_cat@PAVSTTriangleMesh@@PAV1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAVSTTriangleMesh@@0@Z ; std::_Ptr_copy_cat<STTriangleMesh *,STTriangleMesh *>
	add	esp, 12					; 0000000cH
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __ULast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Uninitialized_copy_al_unchecked@PAVSTTriangleMesh@@PAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@00AAV?$allocator@PAVSTTriangleMesh@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<STTriangleMesh *,STTriangleMesh *,std::allocator<STTriangleMesh *> >
	add	esp, 24					; 00000018H
	push	eax
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Seek_wrapped@PAVSTTriangleMesh@@@std@@YAXAAPAPAVSTTriangleMesh@@QAPAV1@@Z ; std::_Seek_wrapped<STTriangleMesh *>
	add	esp, 8

; 215  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 216  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 217  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));
; 218  : 
; 219  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 220  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_copy@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ENDP ; std::_Uninitialized_copy<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@PAVSTTriangleMesh@@@std@@$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@PAVSTTriangleMesh@@@std@@$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><std::allocator<STTriangleMesh *> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YA$$QAV?$allocator@PAVSTTriangleMesh@@@0@AAV10@@Z ; std::forward<std::allocator<STTriangleMesh *> >
	add	esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<STTriangleMesh *> >::_Vector_val<std::_Simple_types<STTriangleMesh *> >

; 288  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@PAVSTTriangleMesh@@@std@@$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YA$$QAV?$allocator@PAVSTTriangleMesh@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YA$$QAV?$allocator@PAVSTTriangleMesh@@@0@AAV10@@Z PROC ; std::forward<std::allocator<STTriangleMesh *> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YA$$QAV?$allocator@PAVSTTriangleMesh@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z
_TEXT	SEGMENT
__ULast$ = -16						; size = 4
__UDest$ = -12						; size = 4
__UFirst$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z PROC ; std::_Uninitialized_copy<STVector3 *,STVector3 *,std::allocator<STVector3> >, COMDAT

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z ; std::_Get_unwrapped<STVector3>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@USTVector3@@@std@@YAPAUSTVector3@@QAU1@@Z ; std::_Get_unwrapped<STVector3>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUSTVector3@@PAU1@@std@@YAHABQAUSTVector3@@0@Z ; std::_Idl_distance<STVector3 *,STVector3 *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@USTVector3@@H$0A@@std@@YAPAUSTVector3@@QAU1@H@Z ; std::_Get_unwrapped_n<STVector3,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 214  : 	_Seek_wrapped(_Dest,

	lea	edx, DWORD PTR __UDest$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Ptr_copy_cat@USTVector3@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUSTVector3@@0@Z ; std::_Ptr_copy_cat<STVector3,STVector3>
	add	esp, 8
	mov	BYTE PTR $T2[ebp], al
	push	ecx
	mov	ecx, esp
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UDest$[ebp]
	push	edx
	mov	eax, DWORD PTR __ULast$[ebp]
	push	eax
	mov	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	call	??$_Uninitialized_copy_al_unchecked@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@PAU1@QAU1@1AAV?$allocator@USTVector3@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_copy_al_unchecked<STVector3 *,STVector3 *,std::allocator<STVector3> >
	add	esp, 24					; 00000018H
	push	eax
	lea	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	??$_Seek_wrapped@USTVector3@@@std@@YAXAAPAUSTVector3@@QAU1@@Z ; std::_Seek_wrapped<STVector3>
	add	esp, 8

; 215  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 216  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 217  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));
; 218  : 
; 219  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 220  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_copy@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z ENDP ; std::_Uninitialized_copy<STVector3 *,STVector3 *,std::allocator<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@USTVector3@@@std@@$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USTVector3@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@USTVector3@@@std@@$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USTVector3@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><std::allocator<STVector3> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@USTVector3@@@std@@@std@@YA$$QAV?$allocator@USTVector3@@@0@AAV10@@Z ; std::forward<std::allocator<STVector3> >
	add	esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<STVector3> >::_Vector_val<std::_Simple_types<STVector3> >

; 288  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@USTVector3@@@std@@$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USTVector3@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><std::allocator<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@USTVector3@@@std@@@std@@YA$$QAV?$allocator@USTVector3@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@USTVector3@@@std@@@std@@YA$$QAV?$allocator@USTVector3@@@0@AAV10@@Z PROC ; std::forward<std::allocator<STVector3> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@USTVector3@@@std@@@std@@YA$$QAV?$allocator@USTVector3@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z
_TEXT	SEGMENT
__ULast$ = -16						; size = 4
__UDest$ = -12						; size = 4
__UFirst$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z PROC ; std::_Uninitialized_copy<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >, COMDAT

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z ; std::_Get_unwrapped<TriangleIndices>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	call	??$_Get_unwrapped@UTriangleIndices@@@std@@YAPAUTriangleIndices@@QAU1@@Z ; std::_Get_unwrapped<TriangleIndices>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

	lea	edx, DWORD PTR __ULast$[ebp]
	push	edx
	lea	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$_Idl_distance@PAUTriangleIndices@@PAU1@@std@@YAHABQAUTriangleIndices@@0@Z ; std::_Idl_distance<TriangleIndices *,TriangleIndices *>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Get_unwrapped_n@UTriangleIndices@@H$0A@@std@@YAPAUTriangleIndices@@QAU1@H@Z ; std::_Get_unwrapped_n<TriangleIndices,int,0>
	add	esp, 8
	mov	DWORD PTR __UDest$[ebp], eax

; 214  : 	_Seek_wrapped(_Dest,

	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR __UDest$[ebp]
	push	eax
	lea	ecx, DWORD PTR __UFirst$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Ptr_copy_cat@UTriangleIndices@@U1@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAUTriangleIndices@@0@Z ; std::_Ptr_copy_cat<TriangleIndices,TriangleIndices>
	add	esp, 12					; 0000000cH
	mov	al, BYTE PTR [eax]
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __UDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __ULast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Uninitialized_copy_al_unchecked@UTriangleIndices@@U1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@00AAV?$allocator@UTriangleIndices@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<TriangleIndices,TriangleIndices,std::allocator<TriangleIndices> >
	add	esp, 24					; 00000018H
	push	eax
	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Seek_wrapped@UTriangleIndices@@@std@@YAXAAPAUTriangleIndices@@QAU1@@Z ; std::_Seek_wrapped<TriangleIndices>
	add	esp, 8

; 215  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 216  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 217  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));
; 218  : 
; 219  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 220  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_copy@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z ENDP ; std::_Uninitialized_copy<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@UTriangleIndices@@@std@@$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UTriangleIndices@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@UTriangleIndices@@@std@@$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UTriangleIndices@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><std::allocator<TriangleIndices> >, COMDAT
; _this$ = ecx

; 287  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 285  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@UTriangleIndices@@@std@@@std@@YA$$QAV?$allocator@UTriangleIndices@@@0@AAV10@@Z ; std::forward<std::allocator<TriangleIndices> >
	add	esp, 4

; 286  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TriangleIndices> >::_Vector_val<std::_Simple_types<TriangleIndices> >

; 288  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@UTriangleIndices@@@std@@$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UTriangleIndices@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@UTriangleIndices@@@std@@@std@@YA$$QAV?$allocator@UTriangleIndices@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@UTriangleIndices@@@std@@@std@@YA$$QAV?$allocator@UTriangleIndices@@@0@AAV10@@Z PROC ; std::forward<std::allocator<TriangleIndices> >, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@UTriangleIndices@@@std@@@std@@YA$$QAV?$allocator@UTriangleIndices@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Storage_ptr$ = 12					; size = 4
___formal$ = 16						; size = 4
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z PROC ; std::_Immortalize_impl<std::_Iostream_error_category>, COMDAT

; 600  : 	{	// adapt True Placement New to _Execute_once

	push	ebp
	mov	ebp, esp
	push	ecx

; 601  : 	::new (_Storage_ptr) _Ty();

	mov	eax, DWORD PTR __Storage_ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category

; 602  : 	return (1);

	mov	eax, 1

; 603  : 	}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ENDP ; std::_Immortalize_impl<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>, COMDAT
; _this$ = ecx

; 2212 : 		{	// construct with pointer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2211 : 			: _Mybase(_Ptr)

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0PAV_Facet_base@std@@@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::_Facet_base *>

; 2213 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
__Ans$ = -8						; size = 4
_this$ = -4						; size = 4
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release, COMDAT
; _this$ = ecx

; 2321 : 		{	// yield ownership of pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2322 : 		pointer _Ans = get();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
	mov	DWORD PTR __Ans$[ebp], eax

; 2323 : 		this->_Myptr() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
	mov	DWORD PTR [eax], 0

; 2324 : 		return (_Ans);

	mov	eax, DWORD PTR __Ans$[ebp]

; 2325 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get, COMDAT
; _this$ = ecx

; 2311 : 		{	// return pointer to object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2312 : 		return (this->_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
	mov	eax, DWORD PTR [eax]

; 2313 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 2293 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2294 : 		if (get() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
	test	eax, eax
	je	SHORT $LN3@unique_ptr

; 2295 : 			{
; 2296 : 			this->get_deleter()(get());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?get@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::get
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
	mov	ecx, eax
	call	??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ; std::default_delete<std::_Facet_base>::operator()
$LN3@unique_ptr:

; 2297 : 			}
; 2298 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2163 : 		{	// return const reference to pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2164 : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QBEABQAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second

; 2165 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QBEABQAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr, COMDAT
; _this$ = ecx

; 2158 : 		{	// return reference to pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2159 : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAPAV_Facet_base@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_second

; 2160 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAPAV_Facet_base@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ PROC ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter, COMDAT
; _this$ = ecx

; 2148 : 		{	// return reference to deleter

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2149 : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$default_delete@V_Facet_base@std@@@std@@PAV_Facet_base@2@$00@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ; std::_Compressed_pair<std::default_delete<std::_Facet_base>,std::_Facet_base *,1>::_Get_first

; 2150 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?get_deleter@?$_Unique_ptr_base@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEAAU?$default_delete@V_Facet_base@std@@@2@XZ ENDP ; std::_Unique_ptr_base<std::_Facet_base,std::default_delete<std::_Facet_base> >::get_deleter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\memory
;	COMDAT ??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv70 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z PROC ; std::default_delete<std::_Facet_base>::operator(), COMDAT
; _this$ = ecx

; 2081 : 		{	// delete a pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2082 : 		static_assert(0 < sizeof (_Ty),
; 2083 : 			"can't delete an incomplete type");
; 2084 : 		delete _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@operator
	push	1
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN2@operator
$LN3@operator:
	mov	DWORD PTR tv70[ebp], 0
$LN2@operator:

; 2085 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??R?$default_delete@V_Facet_base@std@@@std@@QBEXPAV_Facet_base@1@@Z ENDP ; std::default_delete<std::_Facet_base>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z PROC ; std::_Adl_verify_range1<char const *,char const *>, COMDAT

; 602  : 	{	// check that [_First, _Last) forms an iterator range

	push	ebp
	mov	ebp, esp

; 603  : 	_Verify_range(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Verify_range@D@std@@YAXQBD0@Z	; std::_Verify_range<char>
	add	esp, 8

; 604  : 	}

	pop	ebp
	ret	0
??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Adl_verify_range1<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Verify_range@D@std@@YAXQBD0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Verify_range@D@std@@YAXQBD0@Z PROC			; std::_Verify_range<char>, COMDAT

; 558  : 	{	// special case range verification for pointers

	push	ebp
	mov	ebp, esp
$LN4@Verify_ran:

; 559  : 	_STL_VERIFY(_First <= _Last, "transposed pointer range");

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	ja	SHORT $LN7@Verify_ran
	jmp	SHORT $LN2@Verify_ran
$LN7@Verify_ran:
	push	OFFSET ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	559					; 0000022fH
	push	OFFSET ??_C@_0GJ@EJIMBHLG@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@Verify_ran
	int	3
$LN11@Verify_ran:
	push	0
	push	559					; 0000022fH
	push	OFFSET ??_C@_1NC@FANNPLN@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
	push	OFFSET ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	edx, edx
	jne	SHORT $LN7@Verify_ran
$LN2@Verify_ran:
	xor	eax, eax
	jne	SHORT $LN4@Verify_ran

; 560  : 	}

	pop	ebp
	ret	0
??$_Verify_range@D@std@@YAXQBD0@Z ENDP			; std::_Verify_range<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__Tag$ = -1						; size = 1
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z PROC ; std::_Pocma<std::allocator<char> >, COMDAT

; 1099 : 	{	// (maybe) propagate on container move assignment

	push	ebp
	mov	ebp, esp
	push	ecx

; 1100 : 	typename allocator_traits<_Alloc>::propagate_on_container_move_assignment _Tag;
; 1101 : 	_Pocma(_Left, _Right, _Tag);

	movzx	eax, BYTE PTR __Tag$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Left$[ebp]
	push	edx
	call	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::allocator<char> >
	add	esp, 12					; 0000000cH

; 1102 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ENDP ; std::_Pocma<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 1054 : 	{	// test for allocator inequality

	push	ebp
	mov	ebp, esp

; 1055 : 	return (false);

	xor	al, al

; 1056 : 	}

	pop	ebp
	ret	0
??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z
_TEXT	SEGMENT
__Raw_new$ = -40					; size = 4
__Old_ptr$1 = -36					; size = 4
__Old_capacity$ = -32					; size = 4
__New_capacity$ = -28					; size = 4
__New_size$ = -24					; size = 4
__Al$ = -20						; size = 4
__New_ptr$ = -16					; size = 4
__Old_size$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 1
??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3922 : 		const size_type _Old_size = _My_data._Mysize;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	eax, DWORD PTR __Size_increase$[ebp]
	jae	SHORT $LN2@Reallocate

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

	mov	edx, DWORD PTR __Old_size$[ebp]
	add	edx, DWORD PTR __Size_increase$[ebp]
	mov	DWORD PTR __New_size$[ebp], edx

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 3930 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 3931 : 		auto& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3935 : 		_My_data._Myres = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Raw_new$[ebp], eax

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Old_ptr$1[ebp], ecx

; 3940 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

	movzx	edx, BYTE PTR _<_Args_2>$[ebp]
	push	edx
	mov	eax, DWORD PTR _<_Args_1>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Raw_new$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator()

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 3943 : 			}
; 3944 : 		else

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3945 : 			{
; 3946 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

	movzx	eax, BYTE PTR _<_Args_2>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_1>$[ebp]
	push	ecx
	mov	edx, DWORD PTR _<_Args_0>$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR __Raw_new$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator()

; 3947 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

	lea	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
	add	esp, 12					; 0000000cH
$LN4@Reallocate:

; 3948 : 			}
; 3949 : 
; 3950 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3951 : 		}

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Off$ = 20						; size = 4
__Count$ = 24						; size = 4
__Ch$ = 28						; size = 1
??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z PROC ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator(), COMDAT
; _this$ = ecx

; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2803 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2804 : 			_Traits::assign(_New_ptr + _Off, _Count, _Ch);

	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	add	edx, DWORD PTR __Off$[ebp]
	push	edx
	call	?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
	add	esp, 12					; 0000000cH

; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

	mov	eax, DWORD PTR __Old_size$[ebp]
	sub	eax, DWORD PTR __Off$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	add	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	add	edx, DWORD PTR __Off$[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2806 : 			}, _Off, _Count, _Ch));

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??R<lambda_6607a66f2a10a1261ff9db96cba1015b>@@QBEXQADQBDIIID@Z ENDP ; <lambda_6607a66f2a10a1261ff9db96cba1015b>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$ = -8					; size = 4
__Result$ = -4						; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 536870911 ; 1fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT
; _this$ = ecx

; 311  : 		{	// count number of available positions in write buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 312  : 		return (*_IPnext != nullptr ? *_IPcount : 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Pnavail
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@Pnavail
$LN3@Pnavail:
	mov	DWORD PTR tv69[ebp], 0
$LN4@Pnavail:
	mov	eax, DWORD PTR tv69[ebp]
	cdq

; 313  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT
; _this$ = ecx

; 305  : 		{	// increment current position in write buffer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 306  : 		--*_IPcount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [ecx], edx

; 307  : 		return ((*_IPnext)++);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR tv76[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 8
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT
; _this$ = ecx

; 205  : 		{	// put _Count characters from array beginning at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 206  : 		return (xsputn(_Ptr, _Count));

	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax

; 207  : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
_TEXT	SEGMENT
tv85 = -20						; size = 8
tv78 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT
; _this$ = ecx

; 197  : 		{	// put a character

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 198  : 		return (0 < _Pnavail()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBE_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
	mov	DWORD PTR tv85[ebp], eax
	mov	DWORD PTR tv85[ebp+4], edx
	cmp	DWORD PTR tv85[ebp+4], 0
	jl	SHORT $LN3@sputc
	jg	SHORT $LN5@sputc
	cmp	DWORD PTR tv85[ebp], 0
	jbe	SHORT $LN3@sputc
$LN5@sputc:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	cl, BYTE PTR __Ch$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN4@sputc
$LN3@sputc:
	lea	eax, DWORD PTR __Ch$[ebp]
	push	eax
	call	?to_int_type@?$char_traits@D@std@@SAHABD@Z ; std::char_traits<char>::to_int_type
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv78[ebp], eax
$LN4@sputc:
	mov	eax, DWORD PTR tv78[ebp]

; 199  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 200  : 			: overflow(_Traits::to_int_type(_Ch)));
; 201  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT
; _this$ = ecx

; 142  : 		{	// synchronize with external agent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 		return (sync());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax

; 144  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$ = -8					; size = 4
__Result$ = -4						; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 1073741823 ; 3fffffffH

; 25   : 	size_t _Result = _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<STVector3> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<STVector3> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0USTVector3@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USTVector3@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0USTVector3@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USTVector3@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STVector3>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0USTVector3@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USTVector3@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0M@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$ = -8					; size = 4
__Result$ = -4						; size = 4
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0M@@std@@YAII@Z PROC			; std::_Get_size_of_n<12>, COMDAT

; 23   : 	{	// gets the size of _Count copies of a type sized _Ty_size

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$[ebp], 357913941 ; 15555555H

; 25   : 	size_t _Result = _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 12
	mov	DWORD PTR __Result$[ebp], eax

; 26   : 	if (_Max_possible < _Count)

	cmp	DWORD PTR __Count$[ebp], 357913941	; 15555555H
	jbe	SHORT $LN2@Get_size_o

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

	mov	DWORD PTR __Result$[ebp], -1
$LN2@Get_size_o:

; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0M@@std@@YAII@Z ENDP			; std::_Get_size_of_n<12>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@@Z PROC ; std::_Destroy_range<std::allocator<TriangleIndices> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<TriangleIndices> >
	add	esp, 16					; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<TriangleIndices> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<TriangleIndices> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0UTriangleIndices@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UTriangleIndices@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0UTriangleIndices@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UTriangleIndices@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><TriangleIndices>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0UTriangleIndices@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UTriangleIndices@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<STTriangleMesh *> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<STTriangleMesh *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>, COMDAT

; 1212 : 	{	// deallocate a plain pointer using an allocator, non-fancy pointers special case

	push	ebp
	mov	ebp, esp

; 1213 : 	allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1214 : 	}

	pop	ebp
	ret	0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 886  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

	pop	ebp
	ret	0
??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 871  : 		{	// deallocate _Count elements at _Ptr

	push	ebp
	mov	ebp, esp

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 874  : 		}

	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$?0PAVSTTriangleMesh@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVSTTriangleMesh@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??$?0PAVSTTriangleMesh@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVSTTriangleMesh@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STTriangleMesh *>, COMDAT
; _this$ = ecx

; 986  : 		{	// construct from a related allocator (do nothing)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0PAVSTTriangleMesh@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVSTTriangleMesh@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STTriangleMesh *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT

; 199  : 	{	// deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

	mov	edx, DWORD PTR __Bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 208  : 	}

	pop	ebp
	ret	0
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT

; 180  : 	{	// allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__

	push	ebp
	mov	ebp, esp

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Allocate

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

	cmp	DWORD PTR __Bytes$[ebp], 0
	je	SHORT $LN3@Allocate

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));

	mov	ecx, DWORD PTR __Bytes$[ebp]
	push	ecx
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

	xor	eax, eax
$LN1@Allocate:

; 194  : 	}

	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAD@std@@YAABQADABQAD@Z	; std::forward<char * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Raw_new$ = -40					; size = 4
__Old_ptr$1 = -36					; size = 4
__Old_capacity$ = -32					; size = 4
__New_capacity$ = -28					; size = 4
__New_size$ = -24					; size = 4
__Al$ = -20						; size = 4
__New_ptr$ = -16					; size = 4
__Old_size$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3922 : 		const size_type _Old_size = _My_data._Mysize;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	eax, DWORD PTR __Size_increase$[ebp]
	jae	SHORT $LN2@Reallocate

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

	mov	edx, DWORD PTR __Old_size$[ebp]
	add	edx, DWORD PTR __Size_increase$[ebp]
	mov	DWORD PTR __New_size$[ebp], edx

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 3930 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 3931 : 		auto& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3935 : 		_My_data._Myres = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Raw_new$[ebp], eax

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Old_ptr$1[ebp], ecx

; 3940 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

	mov	edx, DWORD PTR _<_Args_1>$[ebp]
	push	edx
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Raw_new$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

	mov	ecx, DWORD PTR __Old_capacity$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3943 : 			}
; 3944 : 		else

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3945 : 			{
; 3946 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

	mov	edx, DWORD PTR _<_Args_1>$[ebp]
	push	edx
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR __Raw_new$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()

; 3947 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
	add	esp, 12					; 0000000cH
$LN4@Reallocate:

; 3948 : 			}
; 3949 : 
; 3950 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3951 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2584 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

	mov	eax, DWORD PTR __Old_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2586 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2587 : 			}, _Ptr, _Count));

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBEXQADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z
_TEXT	SEGMENT
__Raw_new$ = -40					; size = 4
__Old_ptr$1 = -36					; size = 4
__Old_capacity$ = -32					; size = 4
__New_capacity$ = -28					; size = 4
__New_size$ = -24					; size = 4
__Al$ = -20						; size = 4
__New_ptr$ = -16					; size = 4
__Old_size$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 1
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3922 : 		const size_type _Old_size = _My_data._Mysize;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	eax, DWORD PTR __Size_increase$[ebp]
	jae	SHORT $LN2@Reallocate

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

	mov	edx, DWORD PTR __Old_size$[ebp]
	add	edx, DWORD PTR __Size_increase$[ebp]
	mov	DWORD PTR __New_size$[ebp], edx

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 3930 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 3931 : 		auto& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 3933 : 		_My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3934 : 		_My_data._Mysize = _New_size;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3935 : 		_My_data._Myres = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Raw_new$[ebp], eax

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Old_ptr$1[ebp], ecx

; 3940 : 			_Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

	movzx	edx, BYTE PTR _<_Args_1>$[ebp]
	push	edx
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Raw_new$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

	mov	ecx, DWORD PTR __Old_capacity$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3942 : 			_My_data._Bx._Ptr = _New_ptr;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 3943 : 			}
; 3944 : 		else

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3945 : 			{
; 3946 : 			_Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

	movzx	edx, BYTE PTR _<_Args_1>$[ebp]
	push	edx
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR __Raw_new$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()

; 3947 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
	add	esp, 12					; 0000000cH
$LN4@Reallocate:

; 3948 : 			}
; 3949 : 
; 3950 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3951 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Count$ = 20						; size = 4
__Ch$ = 24						; size = 1
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z PROC ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator(), COMDAT
; _this$ = ecx

; 2610 : 				const size_type _Count, const _Elem _Ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2611 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);

	mov	eax, DWORD PTR __Old_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);

	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
	add	esp, 12					; 0000000cH

; 2613 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2614 : 			}, _Count, _Ch));

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??R<lambda_c1b8c41cb4019640539cfd828748c4d4>@@QBEXQADQBDIID@Z ENDP ; <lambda_c1b8c41cb4019640539cfd828748c4d4>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__Old_capacity$ = -24					; size = 4
__New_capacity$ = -20					; size = 4
__Al$ = -16						; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __New_size$[ebp], eax
	jbe	SHORT $LN2@Reallocate

; 3890 : 			{
; 3891 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 3896 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 3897 : 		auto& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 3899 : 		_My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3900 : 		_My_data._Mysize = _New_size;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3901 : 		_My_data._Myres = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3902 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	mov	edx, DWORD PTR _<_Args_0>$[ebp]
	push	edx
	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3906 : 			_My_data._Bx._Ptr = _New_ptr;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 3907 : 			}
; 3908 : 		else

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3909 : 			{
; 3910 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
	add	esp, 12					; 0000000cH
$LN4@Reallocate:

; 3911 : 			}
; 3912 : 
; 3913 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3914 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2669 : 			_Traits::copy(_New_ptr, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2670 : 			_Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2671 : 			}, _Ptr));

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBEXQADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z
_TEXT	SEGMENT
__Old_capacity$ = -24					; size = 4
__New_capacity$ = -20					; size = 4
__Al$ = -16						; size = 4
__New_ptr$ = -12					; size = 4
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 1
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __New_size$[ebp], eax
	jbe	SHORT $LN2@Reallocate

; 3890 : 			{
; 3891 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Reallocate:

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 3896 : 		const size_type _New_capacity = _Calculate_growth(_New_size);

	mov	edx, DWORD PTR __New_size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 3897 : 		auto& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

	mov	eax, DWORD PTR __New_capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_ptr$[ebp], eax

; 3899 : 		_My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 3900 : 		_My_data._Mysize = _New_size;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 3901 : 		_My_data._Myres = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 3902 : 		_Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	movzx	edx, BYTE PTR _<_Args_0>$[ebp]
	push	edx
	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

	cmp	DWORD PTR __Old_capacity$[ebp], 16	; 00000010H
	jb	SHORT $LN3@Reallocate

; 3904 : 			{
; 3905 : 			_Al.deallocate(_My_data._Bx._Ptr, _Old_capacity + 1);

	mov	edx, DWORD PTR __Old_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate

; 3906 : 			_My_data._Bx._Ptr = _New_ptr;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [edx+4], eax

; 3907 : 			}
; 3908 : 		else

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3909 : 			{
; 3910 : 			_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_ptr);

	lea	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
	add	esp, 12					; 0000000cH
$LN4@Reallocate:

; 3911 : 			}
; 3912 : 
; 3913 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN5@Reallocate:

; 3914 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z PROC ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator(), COMDAT
; _this$ = ecx

; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2692 : 			_Traits::assign(_New_ptr, _Count, _Ch);

	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
	add	esp, 12					; 0000000cH

; 2693 : 			_Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2694 : 			}, _Ch));

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R<lambda_c6753c90be971fc9cc00b4f35f237a75>@@QBEXQADID@Z ENDP ; <lambda_c6753c90be971fc9cc00b4f35f237a75>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Max_value@I@std@@YAABIABI0@Z PROC			; std::_Max_value<unsigned int>, COMDAT

; 32   : 	{	// return larger of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 33   : 	return (_Left < _Right ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@Max_value
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@Max_value
$LN3@Max_value:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@Max_value:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 34   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Max_value@I@std@@YAABIABI0@Z ENDP			; std::_Max_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 886  : 		{	// destroy object at _Ptr

	push	ebp
	mov	ebp, esp

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

	pop	ebp
	ret	0
??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 329  : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp

; 330  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 331  : 	}

	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$numpunct@D@std@@MAE@XZ		; std::numpunct<char>::~numpunct<char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 4
	jne	SHORT $LN3@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	add	esp, 4
	jmp	SHORT $LN2@scalar
$LN3@scalar:
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?__global_delete@@YAXPAXI@Z		; __global_delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Tidy@?$numpunct@D@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$numpunct@D@std@@AAEXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT
; _this$ = ecx

; 254  : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		_CSTD free((void *)_Grouping);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_free
	add	esp, 4

; 256  : 		_CSTD free((void *)_Falsename);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_free
	add	esp, 4

; 257  : 		_CSTD free((void *)_Truename);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_free
	add	esp, 4

; 258  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$numpunct@D@std@@AAEXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 248  : 		{	// return name for true

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 249  : 		return (string_type(_Truename));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 250  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 243  : 		{	// return name for false

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 244  : 		return (string_type(_Falsename));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 245  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 238  : 		{	// return grouping string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 239  : 		return (string(_Grouping));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 240  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 233  : 		{	// return thousands separator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		return (_Kseparator);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+13]

; 235  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 228  : 		{	// return decimal point

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 		return (_Dp);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+12]

; 230  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
_TEXT	SEGMENT
$T2 = -140						; size = 44
__Cvt$ = -96						; size = 44
tv154 = -52						; size = 4
tv153 = -48						; size = 4
tv152 = -44						; size = 4
tv151 = -40						; size = 4
tv150 = -36						; size = 4
tv149 = -32						; size = 4
__Ptr$ = -28						; size = 4
tv81 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Lobj$ = 8						; size = 4
__Isdef$ = 12						; size = 1
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT
; _this$ = ecx

; 200  : 		{	// initialize from _Lobj

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 124				; 0000007cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 201  : 		const lconv *_Ptr = _Lobj._Getlconv();

	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ; std::_Locinfo::_Getlconv
	mov	DWORD PTR __Ptr$[ebp], eax

; 202  : 		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	// conversion information

	lea	eax, DWORD PTR __Cvt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt

; 203  : 
; 204  : 		_Grouping = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 205  : 		_Falsename = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0

; 206  : 		_Truename = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 207  : 
; 208  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 209  : 		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char *>(nullptr), _Lobj._Getcvt());

	movzx	ecx, BYTE PTR __Isdef$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@Init
	mov	DWORD PTR tv81[ebp], OFFSET ??_C@_00CNPNBAHC@@
	jmp	SHORT $LN7@Init
$LN6@Init:
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv81[ebp], eax
$LN7@Init:
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt
	mov	DWORD PTR tv149[ebp], eax
	mov	edx, DWORD PTR tv149[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR tv81[ebp]
	push	eax
	call	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR [ecx+8], edx

; 210  : 		_Falsename = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem *>(nullptr), _Cvt);

	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	?_Getfalse@_Locinfo@std@@QBEPBDXZ	; std::_Locinfo::_Getfalse
	mov	DWORD PTR tv151[ebp], eax
	lea	eax, DWORD PTR __Cvt$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR tv151[ebp]
	push	ecx
	call	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv152[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv152[ebp]
	mov	DWORD PTR [edx+16], eax

; 211  : 		_Truename = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem *>(nullptr), _Cvt);

	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	?_Gettrue@_Locinfo@std@@QBEPBDXZ	; std::_Locinfo::_Gettrue
	mov	DWORD PTR tv153[ebp], eax
	lea	ecx, DWORD PTR __Cvt$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR tv153[ebp]
	push	edx
	call	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ; std::_Maklocstr<char>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv154[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv154[ebp]
	mov	DWORD PTR [eax+20], ecx
	jmp	SHORT $LN8@Init
__catch$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0:

; 212  : 		_CATCH_ALL
; 213  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$numpunct@D@std@@AAEXXZ		; std::numpunct<char>::_Tidy

; 214  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 215  : 		_CATCH_END

	mov	eax, $LN11@Init
	ret	0
$LN8@Init:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$1
$LN11@Init:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$1:

; 216  : 
; 217  : 		if (_Isdef)

	movzx	edx, BYTE PTR __Isdef$[ebp]
	test	edx, edx
	je	SHORT $LN3@Init

; 218  : 			{	// apply defaults for required facets
; 219  : //			_Grouping = _Maklocstr("", static_cast<char *>(nullptr), _Cvt);
; 220  : 			_Dp = _Maklocchr('.', static_cast<_Elem *>(nullptr), _Cvt);

	lea	eax, DWORD PTR __Cvt$[ebp]
	push	eax
	push	0
	push	46					; 0000002eH
	call	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ; std::_Maklocchr<char>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+12], al

; 221  : 			_Kseparator = _Maklocchr(',', static_cast<_Elem *>(nullptr), _Cvt);

	lea	edx, DWORD PTR __Cvt$[ebp]
	push	edx
	push	0
	push	44					; 0000002cH
	call	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ; std::_Maklocchr<char>
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+13], al

; 222  : 			}
; 223  : 		else

	jmp	SHORT $LN5@Init
$LN3@Init:

; 224  : 			_Getvals((_Elem)0, _Ptr, _Cvt);

	sub	esp, 44					; 0000002cH
	mov	ecx, 11					; 0000000bH
	lea	esi, DWORD PTR __Cvt$[ebp]
	mov	edi, esp
	rep movsd
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Getvals@D@?$numpunct@D@std@@IAEXDPBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
$LN5@Init:

; 225  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 174  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$numpunct@D@std@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$numpunct@D@std@@6B@

; 175  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$numpunct@D@std@@AAEXXZ		; std::numpunct<char>::_Tidy

; 176  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$numpunct@D@std@@MAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$numpunct@D@std@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 52
$T3 = -36						; size = 4
tv95 = -32						; size = 4
tv132 = -28						; size = 4
tv89 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 165  : 		{	// return locale category mask and construct standard facet

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR $T5[ebp], 0

; 166  : 		if (_Ppf != nullptr && *_Ppf == nullptr)

	cmp	DWORD PTR __Ppf$[ebp], 0
	je	$LN2@Getcat
	mov	eax, DWORD PTR __Ppf$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@Getcat

; 167  : 			*_Ppf = new numpunct<_Elem>(

	push	24					; 00000018H
	call	??2_Crt_new_delete@std@@SAPAXI@Z	; std::_Crt_new_delete::operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN4@Getcat
	push	1
	push	0
	mov	ecx, DWORD PTR __Ploc$[ebp]
	call	?c_str@locale@std@@QBEPBDXZ		; std::locale::c_str
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0_Locinfo@std@@QAE@PBD@Z		; std::_Locinfo::_Locinfo
	mov	DWORD PTR tv132[ebp], eax
	mov	ecx, DWORD PTR tv132[ebp]
	mov	DWORD PTR tv95[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T5[ebp]
	or	edx, 1
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR tv95[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ; std::numpunct<char>::numpunct<char>
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN5@Getcat
$LN4@Getcat:
	mov	DWORD PTR tv89[ebp], 0
$LN5@Getcat:
	mov	ecx, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR __Ppf$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	and	ecx, 1
	je	SHORT $LN2@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 168  : 				_Locinfo(_Ploc->c_str()), 0, true);
; 169  : 		return (_X_NUMERIC);

	mov	eax, 4

; 170  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	and	eax, 1
	je	$LN8@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN8@Getcat:
	ret	0
__ehhandler$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<char>::_Getcat
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
__Isdef$ = 16						; size = 1
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT
; _this$ = ecx

; 159  : 		{	// construct from specified locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 		: locale::facet(_Refs)

	mov	eax, DWORD PTR __Refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0facet@locale@std@@IAE@I@Z		; std::locale::facet::facet
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 159  : 		{	// construct from specified locale

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7?$numpunct@D@std@@6B@

; 160  : 		_Init(_Lobj, _Isdef);

	movzx	edx, BYTE PTR __Isdef$[ebp]
	push	edx
	mov	eax, DWORD PTR __Lobj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init

; 161  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
__ehhandler$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z ENDP	; std::numpunct<char>::numpunct<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT
; _this$ = ecx

; 142  : 		{	// return name for true

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 143  : 		return (do_truename());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 144  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT
; _this$ = ecx

; 137  : 		{	// return name for false

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 138  : 		return (do_falsename());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 139  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT
; _this$ = ecx

; 132  : 		{	// return grouping string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 133  : 		return (do_grouping());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 134  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?thousands_sep@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT
; _this$ = ecx

; 127  : 		{	// return thousands separator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 		return (do_thousands_sep());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax

; 129  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?thousands_sep@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QBEDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?decimal_point@?$numpunct@D@std@@QBEDXZ PROC		; std::numpunct<char>::decimal_point, COMDAT
; _this$ = ecx

; 122  : 		{	// return decimal point

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 123  : 		return (do_decimal_point());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax

; 124  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?decimal_point@?$numpunct@D@std@@QBEDXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
$T3 = -40						; size = 4
__Lock$4 = -36						; size = 4
__Id$5 = -32						; size = 4
__Psave_guard$6 = -28					; size = 4
__Pf$7 = -24						; size = 4
__Pfmod$8 = -20						; size = 4
__Psave$9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

	push	0
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

	mov	eax, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
	mov	DWORD PTR __Psave$9[ebp], eax

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;

	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??Bid@locale@std@@QAEIXZ		; std::locale::id::operator unsigned int
	mov	DWORD PTR __Id$5[ebp], eax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

	mov	ecx, DWORD PTR __Id$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Loc$[ebp]
	call	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
	mov	DWORD PTR __Pf$7[ebp], eax

; 512  : 
; 513  : 		if (_Pf == nullptr)

	cmp	DWORD PTR __Pf$7[ebp], 0
	jne	$LN2@use_facet

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

	cmp	DWORD PTR __Psave$9[ebp], 0
	je	SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

	mov	edx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pf$7[ebp], edx
	jmp	SHORT $LN2@use_facet
$LN3@use_facet:

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

	mov	eax, DWORD PTR __Loc$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Psave$9[ebp]
	push	ecx
	call	?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<char>::_Getcat
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN5@use_facet

; 520  : 				{
; 521  :  #if _HAS_EXCEPTIONS
; 522  : 				_THROW(bad_cast{});	// lazy disallowed

	lea	ecx, DWORD PTR $T2[ebp]
	call	??0bad_cast@std@@QAE@XZ			; std::bad_cast::bad_cast
	push	OFFSET __TI2?AVbad_cast@std@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 				abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 				}
; 527  : 			else

	jmp	SHORT $LN2@use_facet
$LN5@use_facet:

; 528  : 				{	// queue up lazy facet for destruction
; 529  : 				auto _Pfmod = const_cast<locale::facet *>(_Psave);

	mov	eax, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pfmod$8[ebp], eax

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

	mov	ecx, DWORD PTR __Pfmod$8[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

	mov	edx, DWORD PTR __Pfmod$8[ebp]
	push	edx
	call	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
	add	esp, 4

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

	mov	eax, DWORD PTR __Pfmod$8[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Pfmod$8[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

	mov	ecx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::numpunct<char> >::_Psave

; 540  : 				_Pf = _Psave;

	mov	edx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pf$7[ebp], edx

; 541  : 
; 542  : 				(void) _Psave_guard.release();

	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 543  : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

	mov	eax, DWORD PTR __Pf$7[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	eax, DWORD PTR $T3[ebp]
$LN7@use_facet:

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
	lea	ecx, DWORD PTR __Lock$4[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1:
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	jmp	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@@Z PROC ; std::_Destroy_range<std::allocator<STTriangleMesh *> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<STTriangleMesh *> >
	add	esp, 16					; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@@Z PROC ; std::_Destroy_range<std::allocator<STVector3> >, COMDAT

; 1154 : 	{	// destroy [_First, _Last), choose optimization

	push	ebp
	mov	ebp, esp
	push	ecx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range1@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<STVector3> >
	add	esp, 16					; 00000010H

; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@USTVector3@@@std@@QAE@XZ	; std::allocator<STVector3>::allocator<STVector3>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<STVector3> >::_Vector_val<std::_Simple_types<STVector3> >

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@UTriangleIndices@@@std@@QAE@XZ ; std::allocator<TriangleIndices>::allocator<TriangleIndices>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<TriangleIndices> >::_Vector_val<std::_Simple_types<TriangleIndices> >

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><>, COMDAT
; _this$ = ecx

; 278  : 		{	// construct from forwarded values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 277  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@PAVSTTriangleMesh@@@std@@QAE@XZ ; std::allocator<STTriangleMesh *>::allocator<STTriangleMesh *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<STTriangleMesh *> >::_Vector_val<std::_Simple_types<STTriangleMesh *> >

; 279  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT
; _this$ = ecx

; 704  : 		{	// return true if any stores failed

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 705  : 		return (_Failed);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax]

; 706  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT
; _this$ = ecx

; 694  : 		{	// pretend to preincrement

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 695  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 696  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT
; _this$ = ecx

; 689  : 		{	// pretend to get designated element

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 690  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 691  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
__Right$ = 8						; size = 1
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT
; _this$ = ecx

; 680  : 		{	// store element and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 681  : 		if (_Strbuf == nullptr
; 682  : 			|| traits_type::eq_int_type(_Traits::eof(),

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@operator
	movzx	ecx, BYTE PTR __Right$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR $T2[ebp], eax
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@operator
$LN3@operator:

; 683  : 				_Strbuf->sputc(_Right)))
; 684  : 			_Failed = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
$LN2@operator:

; 685  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 686  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Sb$ = 8						; size = 4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT
; _this$ = ecx

; 671  : 		{	// construct from stream buffer _Sb

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 670  : 		: _Failed(false), _Strbuf(_Sb)

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Sb$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 672  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 4
	jne	SHORT $LN3@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	add	esp, 4
	jmp	SHORT $LN2@scalar
$LN3@scalar:
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?__global_delete@@YAXPAXI@Z		; __global_delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1828 : 		{	// put _Count * _Ch to _Dest

	push	ebp
	mov	ebp, esp

; 1829 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

	jmp	SHORT $LN4@Rep
$LN2@Rep:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
$LN4@Rep:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@Rep

; 1830 : 			*_Dest = _Ch;

	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
	mov	ecx, eax
	call	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
	jmp	SHORT $LN2@Rep
$LN3@Rep:

; 1831 : 		return (_Dest);

	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1832 : 		}

	pop	ebp
	ret	0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1820 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

	push	ebp
	mov	ebp, esp

; 1821 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

	jmp	SHORT $LN4@Put
$LN2@Put:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptr$[ebp], ecx
$LN4@Put:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@Put

; 1822 : 			*_Dest = *_Ptr;

	mov	edx, DWORD PTR __Ptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	call	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
	mov	ecx, eax
	call	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAEAAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
	jmp	SHORT $LN2@Put
$LN3@Put:

; 1823 : 		return (_Dest);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1824 : 		}

	pop	ebp
	ret	0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
__Grouping$ = -192					; size = 28
$T2 = -164						; size = 8
$T3 = -156						; size = 8
$T4 = -148						; size = 8
$T5 = -140						; size = 8
$T6 = -132						; size = 8
$T7 = -124						; size = 8
$T8 = -116						; size = 8
$T9 = -108						; size = 8
__Groupstring$ = -100					; size = 28
tv322 = -72						; size = 8
tv270 = -64						; size = 4
tv131 = -60						; size = 4
__Ctype_fac$ = -56					; size = 4
tv267 = -52						; size = 4
tv274 = -48						; size = 4
tv197 = -44						; size = 4
__Punct_fac$ = -40					; size = 4
tv69 = -36						; size = 4
__Adjustfield$ = -32					; size = 4
__Fillcount$ = -28					; size = 4
__Kseparator$10 = -21					; size = 1
__Pg$ = -20						; size = 4
__Prefix$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1761 : 		{	// put formatted integer to _Dest

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 180				; 000000b4H

; 1762 : 		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN14@Iput
	mov	eax, DWORD PTR __Buf$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN13@Iput
	mov	edx, DWORD PTR __Buf$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN14@Iput
$LN13@Iput:
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN15@Iput
$LN14@Iput:
	mov	DWORD PTR tv69[ebp], 0
$LN15@Iput:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR __Prefix$[ebp], ecx

; 1763 : 		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
; 1764 : 			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1765 : 			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 3584				; 00000e00H
	cmp	eax, 2048				; 00000800H
	jne	SHORT $LN4@Iput
	mov	edx, DWORD PTR __Prefix$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN4@Iput
	mov	eax, DWORD PTR __Buf$[ebp]
	add	eax, DWORD PTR __Prefix$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN4@Iput
	mov	edx, DWORD PTR __Buf$[ebp]
	add	edx, DWORD PTR __Prefix$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, 120				; 00000078H
	je	SHORT $LN5@Iput
	mov	ecx, DWORD PTR __Buf$[ebp]
	add	ecx, DWORD PTR __Prefix$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 88					; 00000058H
	jne	SHORT $LN4@Iput
$LN5@Iput:

; 1766 : 			{
; 1767 : 			_Prefix += 2;

	mov	eax, DWORD PTR __Prefix$[ebp]
	add	eax, 2
	mov	DWORD PTR __Prefix$[ebp], eax
$LN4@Iput:

; 1768 : 			}
; 1769 : 
; 1770 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv274[ebp], eax
	mov	edx, DWORD PTR tv274[ebp]
	mov	DWORD PTR tv267[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv267[ebp]
	push	eax
	call	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
	add	esp, 4
	mov	DWORD PTR __Ctype_fac$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T9[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 1771 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

	push	0
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1772 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	edx, DWORD PTR __Buf$[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR __Buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Ctype_fac$[ebp]
	call	?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z	; std::ctype<char>::widen

; 1773 : 
; 1774 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv131[ebp], eax
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv270[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv270[ebp]
	push	ecx
	call	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
	add	esp, 4
	mov	DWORD PTR __Punct_fac$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T8[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 1775 : 		const string _Grouping = _Punct_fac.grouping();

	lea	edx, DWORD PTR __Grouping$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Punct_fac$[ebp]
	call	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1776 : 		const char *_Pg = &_Grouping[0];

	push	0
	lea	ecx, DWORD PTR __Grouping$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	mov	DWORD PTR __Pg$[ebp], eax

; 1777 : 		if (*_Pg != CHAR_MAX && '\0' < *_Pg)

	mov	eax, DWORD PTR __Pg$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 127				; 0000007fH
	je	SHORT $LN6@Iput
	mov	edx, DWORD PTR __Pg$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jle	SHORT $LN6@Iput

; 1778 : 			{	// grouping specified, add thousands separators
; 1779 : 			const _Elem _Kseparator = _Punct_fac.thousands_sep();

	mov	ecx, DWORD PTR __Punct_fac$[ebp]
	call	?thousands_sep@?$numpunct@D@std@@QBEDXZ	; std::numpunct<char>::thousands_sep
	mov	BYTE PTR __Kseparator$10[ebp], al
$LN2@Iput:

; 1780 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1781 : 				&& (size_t)*_Pg < _Count - _Prefix)

	mov	ecx, DWORD PTR __Pg$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 127				; 0000007fH
	je	SHORT $LN6@Iput
	mov	eax, DWORD PTR __Pg$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jle	SHORT $LN6@Iput
	mov	edx, DWORD PTR __Pg$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Prefix$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN6@Iput

; 1782 : 				{	// insert thousands separator
; 1783 : 				_Count -= *_Pg;

	mov	edx, DWORD PTR __Pg$[ebp]
	movsx	eax, BYTE PTR [edx]
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, eax
	mov	DWORD PTR __Count$[ebp], ecx

; 1784 : 				_Groupstring.insert(_Count, 1, _Kseparator);

	movzx	edx, BYTE PTR __Kseparator$10[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1785 : 				if ('\0' < _Pg[1])

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR __Pg$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jle	SHORT $LN7@Iput

; 1786 : 					++_Pg;	// not last group, advance

	mov	ecx, DWORD PTR __Pg$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Pg$[ebp], ecx
$LN7@Iput:

; 1787 : 				}

	jmp	SHORT $LN2@Iput
$LN6@Iput:

; 1788 : 			}
; 1789 : 
; 1790 : 		_Count = _Groupstring.size();

	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	DWORD PTR __Count$[ebp], eax

; 1791 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1792 : 			|| (size_t)_Iosbase.width() <= _Count

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv322[ebp], eax
	mov	DWORD PTR tv322[ebp+4], edx
	cmp	DWORD PTR tv322[ebp+4], 0
	jl	SHORT $LN16@Iput
	jg	SHORT $LN22@Iput
	cmp	DWORD PTR tv322[ebp], 0
	jbe	SHORT $LN16@Iput
$LN22@Iput:
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	cmp	eax, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN16@Iput
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv197[ebp], eax
	jmp	SHORT $LN17@Iput
$LN16@Iput:
	mov	DWORD PTR tv197[ebp], 0
$LN17@Iput:
	mov	edx, DWORD PTR tv197[ebp]
	mov	DWORD PTR __Fillcount$[ebp], edx

; 1793 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1794 : 
; 1795 : 		ios_base::fmtflags _Adjustfield =
; 1796 : 			_Iosbase.flags() & ios_base::adjustfield;

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 448				; 000001c0H
	mov	DWORD PTR __Adjustfield$[ebp], eax

; 1797 : 		if (_Adjustfield != ios_base::left
; 1798 : 			&& _Adjustfield != ios_base::internal)

	cmp	DWORD PTR __Adjustfield$[ebp], 64	; 00000040H
	je	SHORT $LN8@Iput
	cmp	DWORD PTR __Adjustfield$[ebp], 256	; 00000100H
	je	SHORT $LN8@Iput

; 1799 : 			{	// put leading fill
; 1800 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	eax, DWORD PTR __Fillcount$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T7[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1801 : 			_Fillcount = 0;

	mov	DWORD PTR __Fillcount$[ebp], 0

; 1802 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

	mov	eax, DWORD PTR __Prefix$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], edx
	mov	DWORD PTR __Dest$[ebp+4], eax
	jmp	$LN9@Iput
$LN8@Iput:

; 1803 : 			}
; 1804 : 		else if (_Adjustfield == ios_base::internal)

	cmp	DWORD PTR __Adjustfield$[ebp], 256	; 00000100H
	jne	SHORT $LN10@Iput

; 1805 : 			{	// put internal fill
; 1806 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

	mov	ecx, DWORD PTR __Prefix$[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1807 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	eax, DWORD PTR __Fillcount$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1808 : 			_Fillcount = 0;

	mov	DWORD PTR __Fillcount$[ebp], 0

; 1809 : 			}
; 1810 : 		else

	jmp	SHORT $LN9@Iput
$LN10@Iput:

; 1811 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

	mov	eax, DWORD PTR __Prefix$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], edx
	mov	DWORD PTR __Dest$[ebp+4], eax
$LN9@Iput:

; 1812 : 
; 1813 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Prefix$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1814 : 		_Iosbase.width(0);

	push	0
	push	0
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QAE_J_J@Z		; std::ios_base::width

; 1815 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

	mov	eax, DWORD PTR __Fillcount$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __Grouping$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1816 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
	lea	ecx, DWORD PTR $T9[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2:
	lea	ecx, DWORD PTR $T8[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3:
	lea	ecx, DWORD PTR __Grouping$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z
_TEXT	SEGMENT
__Basefield$ = -12					; size = 4
__Ptr$ = -8						; size = 4
tv91 = -3						; size = 1
tv90 = -2						; size = 1
tv89 = -1						; size = 1
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 4
__Flags$ = 20						; size = 4
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1733 : 		{	// generate sprintf format for integer

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1734 : 		char *_Ptr = _Fmt;

	mov	eax, DWORD PTR __Fmt$[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax

; 1735 : 		*_Ptr++ = '%';

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [ecx], 37			; 00000025H
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx

; 1736 : 
; 1737 : 		if (_Flags & ios_base::showpos)

	mov	eax, DWORD PTR __Flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@Ifmt

; 1738 : 			*_Ptr++ = '+';

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [ecx], 43			; 0000002bH
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx
$LN2@Ifmt:

; 1739 : 		if (_Flags & ios_base::showbase)

	mov	eax, DWORD PTR __Flags$[ebp]
	and	eax, 8
	je	SHORT $LN3@Ifmt

; 1740 : 			*_Ptr++ = '#';

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [ecx], 35			; 00000023H
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx
$LN3@Ifmt:

; 1741 : 		if (_Spec[0] != 'L')

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR __Spec$[ebp]
	movsx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 76					; 0000004cH
	je	SHORT $LN4@Ifmt

; 1742 : 			*_Ptr++ = _Spec[0];	// qualifier

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Spec$[ebp]
	mov	dl, BYTE PTR [ecx+edx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR __Ptr$[ebp], eax

; 1743 : 		else

	jmp	SHORT $LN5@Ifmt
$LN4@Ifmt:

; 1744 : 
; 1745 : 			{	/* change L to I64 */
; 1746 : 			*_Ptr++ = 'I';

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [ecx], 73			; 00000049H
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx

; 1747 : 			*_Ptr++ = '6';

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [eax], 54			; 00000036H
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptr$[ebp], ecx

; 1748 : 			*_Ptr++ = '4';

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [edx], 52			; 00000034H
	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR __Ptr$[ebp], eax
$LN5@Ifmt:

; 1749 : 			}
; 1750 : 
; 1751 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

	mov	ecx, DWORD PTR __Flags$[ebp]
	and	ecx, 3584				; 00000e00H
	mov	DWORD PTR __Basefield$[ebp], ecx

; 1752 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

	cmp	DWORD PTR __Basefield$[ebp], 1024	; 00000400H
	jne	SHORT $LN11@Ifmt
	mov	BYTE PTR tv91[ebp], 111			; 0000006fH
	jmp	SHORT $LN12@Ifmt
$LN11@Ifmt:
	cmp	DWORD PTR __Basefield$[ebp], 2048	; 00000800H
	je	SHORT $LN9@Ifmt
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR __Spec$[ebp]
	mov	cl, BYTE PTR [eax+edx]
	mov	BYTE PTR tv90[ebp], cl
	jmp	SHORT $LN10@Ifmt
$LN9@Ifmt:
	mov	edx, DWORD PTR __Flags$[ebp]
	and	edx, 4
	je	SHORT $LN7@Ifmt
	mov	BYTE PTR tv89[ebp], 88			; 00000058H
	jmp	SHORT $LN8@Ifmt
$LN7@Ifmt:
	mov	BYTE PTR tv89[ebp], 120			; 00000078H
$LN8@Ifmt:
	mov	al, BYTE PTR tv89[ebp]
	mov	BYTE PTR tv90[ebp], al
$LN10@Ifmt:
	mov	cl, BYTE PTR tv90[ebp]
	mov	BYTE PTR tv91[ebp], cl
$LN12@Ifmt:
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	al, BYTE PTR tv91[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptr$[ebp], ecx

; 1753 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1754 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1755 : 		*_Ptr = '\0';

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [edx], 0

; 1756 : 		return (_Fmt);

	mov	eax, DWORD PTR __Fmt$[ebp]

; 1757 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
_TEXT	SEGMENT
__Grouping$ = -216					; size = 28
$T2 = -188						; size = 8
$T3 = -180						; size = 8
$T4 = -172						; size = 8
$T5 = -164						; size = 8
$T6 = -156						; size = 8
$T7 = -148						; size = 8
$T8 = -140						; size = 8
$T9 = -132						; size = 8
__Groupstring$ = -124					; size = 28
tv399 = -96						; size = 8
__Eoff$ = -88						; size = 4
tv297 = -84						; size = 4
tv154 = -80						; size = 4
__Ctype_fac$ = -76					; size = 4
tv294 = -72						; size = 4
tv301 = -68						; size = 4
tv224 = -64						; size = 4
tv189 = -60						; size = 4
__Exps$ = -56						; size = 4
tv69 = -52						; size = 4
__Adjustfield$ = -48					; size = 4
__Punct_fac$ = -44					; size = 4
__Off$ = -40						; size = 4
__Poff$ = -36						; size = 4
__Fillcount$ = -32					; size = 4
__Dp$ = -28						; size = 2
__Pg$ = -24						; size = 4
__Kseparator$ = -17					; size = 1
__Prefix$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1663 : 		{	// put formatted floating-point to _Dest

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 204				; 000000ccH
	push	ebx

; 1664 : 		auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN16@Fput
	mov	eax, DWORD PTR __Buf$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN15@Fput
	mov	edx, DWORD PTR __Buf$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN16@Fput
$LN15@Fput:
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN17@Fput
$LN16@Fput:
	mov	DWORD PTR tv69[ebp], 0
$LN17@Fput:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR __Prefix$[ebp], ecx

; 1665 : 		const char *_Exps;
; 1666 : 		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 12288				; 00003000H
	cmp	eax, 12288				; 00003000H
	je	SHORT $LN4@Fput

; 1667 : 			_Exps = "eE";

	mov	DWORD PTR __Exps$[ebp], OFFSET ??_C@_02MDKMJEGG@eE@

; 1668 : 		else

	jmp	SHORT $LN5@Fput
$LN4@Fput:

; 1669 : 			{	// correct for hexadecimal floating-point
; 1670 : 			_Exps = "pP";

	mov	DWORD PTR __Exps$[ebp], OFFSET ??_C@_02OOPEBDOJ@pP@

; 1671 : 			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1672 : 				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

	mov	edx, DWORD PTR __Prefix$[ebp]
	add	edx, 2
	cmp	edx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN5@Fput
	mov	eax, DWORD PTR __Buf$[ebp]
	add	eax, DWORD PTR __Prefix$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN5@Fput
	mov	edx, DWORD PTR __Buf$[ebp]
	add	edx, DWORD PTR __Prefix$[ebp]
	movsx	eax, BYTE PTR [edx+1]
	cmp	eax, 120				; 00000078H
	je	SHORT $LN7@Fput
	mov	ecx, DWORD PTR __Buf$[ebp]
	add	ecx, DWORD PTR __Prefix$[ebp]
	movsx	edx, BYTE PTR [ecx+1]
	cmp	edx, 88					; 00000058H
	jne	SHORT $LN5@Fput
$LN7@Fput:

; 1673 : 				_Prefix += 2;

	mov	eax, DWORD PTR __Prefix$[ebp]
	add	eax, 2
	mov	DWORD PTR __Prefix$[ebp], eax
$LN5@Fput:

; 1674 : 			}
; 1675 : 		const size_t _Eoff =
; 1676 : 			_CSTD strcspn(&_Buf[0], _Exps);	// find exponent

	mov	ecx, DWORD PTR __Exps$[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	add	eax, DWORD PTR __Buf$[ebp]
	push	eax
	call	_strcspn
	add	esp, 8
	mov	DWORD PTR __Eoff$[ebp], eax

; 1677 : 		char _Dp[2] = {"."};

	mov	cx, WORD PTR ??_C@_01LFCBOECM@?4@
	mov	WORD PTR __Dp$[ebp], cx

; 1678 : 		_Dp[0] = _CSTD localeconv()->decimal_point[0];

	call	_localeconv
	mov	edx, 1
	imul	ecx, edx, 0
	mov	edx, DWORD PTR [eax]
	mov	eax, 1
	imul	eax, eax, 0
	mov	cl, BYTE PTR [ecx+edx]
	mov	BYTE PTR __Dp$[ebp+eax], cl

; 1679 : 		const size_t _Poff =
; 1680 : 			_CSTD strcspn(&_Buf[0], &_Dp[0]);	// find decimal point

	mov	edx, 1
	imul	eax, edx, 0
	lea	ecx, DWORD PTR __Dp$[ebp+eax]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	add	eax, DWORD PTR __Buf$[ebp]
	push	eax
	call	_strcspn
	add	esp, 8
	mov	DWORD PTR __Poff$[ebp], eax

; 1681 : 
; 1682 : 		const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

	lea	ecx, DWORD PTR $T9[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv301[ebp], eax
	mov	edx, DWORD PTR tv301[ebp]
	mov	DWORD PTR tv294[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv294[ebp]
	push	eax
	call	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
	add	esp, 4
	mov	DWORD PTR __Ctype_fac$[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T9[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 1683 : 		basic_string<_Elem> _Groupstring(_Count, _Elem(0));	// reserve space

	push	0
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1684 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	edx, DWORD PTR __Buf$[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	add	ecx, DWORD PTR __Buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Ctype_fac$[ebp]
	call	?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z	; std::ctype<char>::widen

; 1685 : 
; 1686 : 		const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv154[ebp], eax
	mov	eax, DWORD PTR tv154[ebp]
	mov	DWORD PTR tv297[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv297[ebp]
	push	ecx
	call	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
	add	esp, 4
	mov	DWORD PTR __Punct_fac$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T8[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 1687 : 		const string _Grouping = _Punct_fac.grouping();

	lea	edx, DWORD PTR __Grouping$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Punct_fac$[ebp]
	call	?grouping@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 1688 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

	mov	ecx, DWORD PTR __Punct_fac$[ebp]
	call	?thousands_sep@?$numpunct@D@std@@QBEDXZ	; std::numpunct<char>::thousands_sep
	mov	BYTE PTR __Kseparator$[ebp], al

; 1689 : 
; 1690 : 		if (_Poff != _Count)

	mov	eax, DWORD PTR __Poff$[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	je	SHORT $LN8@Fput

; 1691 : 			_Groupstring[_Poff] = _Punct_fac.decimal_point();

	mov	ecx, DWORD PTR __Punct_fac$[ebp]
	call	?decimal_point@?$numpunct@D@std@@QBEDXZ	; std::numpunct<char>::decimal_point
	mov	bl, al
	mov	ecx, DWORD PTR __Poff$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	mov	BYTE PTR [eax], bl
$LN8@Fput:

; 1692 : 
; 1693 : 		size_t _Off = _Poff == _Count ? _Eoff : _Poff;

	mov	edx, DWORD PTR __Poff$[ebp]
	cmp	edx, DWORD PTR __Count$[ebp]
	jne	SHORT $LN18@Fput
	mov	eax, DWORD PTR __Eoff$[ebp]
	mov	DWORD PTR tv189[ebp], eax
	jmp	SHORT $LN19@Fput
$LN18@Fput:
	mov	ecx, DWORD PTR __Poff$[ebp]
	mov	DWORD PTR tv189[ebp], ecx
$LN19@Fput:
	mov	edx, DWORD PTR tv189[ebp]
	mov	DWORD PTR __Off$[ebp], edx

; 1694 : 		const char *_Pg = &_Grouping[0];

	push	0
	lea	ecx, DWORD PTR __Grouping$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	mov	DWORD PTR __Pg$[ebp], eax
$LN2@Fput:

; 1695 : 		while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1696 : 			&& (size_t)*_Pg < _Off - _Prefix)

	mov	eax, DWORD PTR __Pg$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 127				; 0000007fH
	je	SHORT $LN3@Fput
	mov	edx, DWORD PTR __Pg$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jle	SHORT $LN3@Fput
	mov	ecx, DWORD PTR __Pg$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR __Off$[ebp]
	sub	eax, DWORD PTR __Prefix$[ebp]
	cmp	edx, eax
	jae	SHORT $LN3@Fput

; 1697 : 			{	// add thousands separator
; 1698 : 			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);

	mov	ecx, DWORD PTR __Pg$[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR __Off$[ebp]
	sub	eax, edx
	mov	DWORD PTR __Off$[ebp], eax
	movzx	ecx, BYTE PTR __Kseparator$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1699 : 			if ('\0' < _Pg[1])

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR __Pg$[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jle	SHORT $LN9@Fput

; 1700 : 				++_Pg;	// not last group, advance

	mov	eax, DWORD PTR __Pg$[ebp]
	add	eax, 1
	mov	DWORD PTR __Pg$[ebp], eax
$LN9@Fput:

; 1701 : 			}

	jmp	SHORT $LN2@Fput
$LN3@Fput:

; 1702 : 
; 1703 : 		_Count = _Groupstring.size();

	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	DWORD PTR __Count$[ebp], eax

; 1704 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1705 : 			|| (size_t)_Iosbase.width() <= _Count

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv399[ebp], eax
	mov	DWORD PTR tv399[ebp+4], edx
	cmp	DWORD PTR tv399[ebp+4], 0
	jl	SHORT $LN20@Fput
	jg	SHORT $LN26@Fput
	cmp	DWORD PTR tv399[ebp], 0
	jbe	SHORT $LN20@Fput
$LN26@Fput:
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	cmp	eax, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN20@Fput
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	sub	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR tv224[ebp], eax
	jmp	SHORT $LN21@Fput
$LN20@Fput:
	mov	DWORD PTR tv224[ebp], 0
$LN21@Fput:
	mov	ecx, DWORD PTR tv224[ebp]
	mov	DWORD PTR __Fillcount$[ebp], ecx

; 1706 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1707 : 
; 1708 : 		ios_base::fmtflags _Adjustfield =
; 1709 : 			_Iosbase.flags() & ios_base::adjustfield;

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 448				; 000001c0H
	mov	DWORD PTR __Adjustfield$[ebp], eax

; 1710 : 		if (_Adjustfield != ios_base::left
; 1711 : 			&& _Adjustfield != ios_base::internal)

	cmp	DWORD PTR __Adjustfield$[ebp], 64	; 00000040H
	je	SHORT $LN10@Fput
	cmp	DWORD PTR __Adjustfield$[ebp], 256	; 00000100H
	je	SHORT $LN10@Fput

; 1712 : 			{	// put leading fill
; 1713 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	edx, DWORD PTR __Fillcount$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Fill$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], edx
	mov	DWORD PTR __Dest$[ebp+4], eax

; 1714 : 			_Fillcount = 0;

	mov	DWORD PTR __Fillcount$[ebp], 0

; 1715 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

	mov	ecx, DWORD PTR __Prefix$[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx
	jmp	$LN11@Fput
$LN10@Fput:

; 1716 : 			}
; 1717 : 		else if (_Adjustfield == ios_base::internal)

	cmp	DWORD PTR __Adjustfield$[ebp], 256	; 00000100H
	jne	SHORT $LN12@Fput

; 1718 : 			{	// put internal fill
; 1719 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

	mov	eax, DWORD PTR __Prefix$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], edx
	mov	DWORD PTR __Dest$[ebp+4], eax

; 1720 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	ecx, DWORD PTR __Fillcount$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Fill$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1721 : 			_Fillcount = 0;

	mov	DWORD PTR __Fillcount$[ebp], 0

; 1722 : 			}
; 1723 : 		else

	jmp	SHORT $LN11@Fput
$LN12@Fput:

; 1724 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

	mov	eax, DWORD PTR __Prefix$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], edx
	mov	DWORD PTR __Dest$[ebp+4], eax
$LN11@Fput:

; 1725 : 
; 1726 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, DWORD PTR __Prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Prefix$[ebp]
	push	edx
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1727 : 		_Iosbase.width(0);

	push	0
	push	0
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QAE_J_J@Z		; std::ios_base::width

; 1728 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

	mov	eax, DWORD PTR __Fillcount$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR __Grouping$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1729 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$0:
	lea	ecx, DWORD PTR $T9[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$1:
	lea	ecx, DWORD PTR __Groupstring$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$2:
	lea	ecx, DWORD PTR $T8[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z$3:
	lea	ecx, DWORD PTR __Grouping$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
__Ffl$ = -16						; size = 4
__Ptr$ = -12						; size = 4
tv92 = -6						; size = 1
tv91 = -5						; size = 1
tv90 = -4						; size = 1
tv85 = -3						; size = 1
tv84 = -2						; size = 1
tv83 = -1						; size = 1
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1633 : 		{	// generate sprintf format for floating-point

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 1634 : 		char *_Ptr = _Fmt;

	mov	eax, DWORD PTR __Fmt$[ebp]
	mov	DWORD PTR __Ptr$[ebp], eax

; 1635 : 		*_Ptr++ = '%';

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [ecx], 37			; 00000025H
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx

; 1636 : 
; 1637 : 		if (_Flags & ios_base::showpos)

	mov	eax, DWORD PTR __Flags$[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN2@Ffmt

; 1638 : 			*_Ptr++ = '+';

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [ecx], 43			; 0000002bH
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx
$LN2@Ffmt:

; 1639 : 		if (_Flags & ios_base::showpoint)

	mov	eax, DWORD PTR __Flags$[ebp]
	and	eax, 16					; 00000010H
	je	SHORT $LN3@Ffmt

; 1640 : 			*_Ptr++ = '#';

	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [ecx], 35			; 00000023H
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx
$LN3@Ffmt:

; 1641 : 		*_Ptr++ = '.';

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [eax], 46			; 0000002eH
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptr$[ebp], ecx

; 1642 : 		*_Ptr++ = '*';	// for precision argument

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [edx], 42			; 0000002aH
	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 1
	mov	DWORD PTR __Ptr$[ebp], eax

; 1643 : 		if (_Spec != '\0')

	movsx	ecx, BYTE PTR __Spec$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@Ffmt

; 1644 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	al, BYTE PTR __Spec$[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptr$[ebp], ecx
$LN4@Ffmt:

; 1645 : 
; 1646 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

	mov	edx, DWORD PTR __Flags$[ebp]
	and	edx, 12288				; 00003000H
	mov	DWORD PTR __Ffl$[ebp], edx

; 1647 : 		if (_Flags & ios_base::uppercase)

	mov	eax, DWORD PTR __Flags$[ebp]
	and	eax, 4
	je	SHORT $LN5@Ffmt

; 1648 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

	cmp	DWORD PTR __Ffl$[ebp], 8192		; 00002000H
	jne	SHORT $LN12@Ffmt
	mov	BYTE PTR tv85[ebp], 102			; 00000066H
	jmp	SHORT $LN13@Ffmt
$LN12@Ffmt:
	cmp	DWORD PTR __Ffl$[ebp], 12288		; 00003000H
	jne	SHORT $LN10@Ffmt
	mov	BYTE PTR tv84[ebp], 65			; 00000041H
	jmp	SHORT $LN11@Ffmt
$LN10@Ffmt:
	cmp	DWORD PTR __Ffl$[ebp], 4096		; 00001000H
	jne	SHORT $LN8@Ffmt
	mov	BYTE PTR tv83[ebp], 69			; 00000045H
	jmp	SHORT $LN9@Ffmt
$LN8@Ffmt:
	mov	BYTE PTR tv83[ebp], 71			; 00000047H
$LN9@Ffmt:
	mov	cl, BYTE PTR tv83[ebp]
	mov	BYTE PTR tv84[ebp], cl
$LN11@Ffmt:
	mov	dl, BYTE PTR tv84[ebp]
	mov	BYTE PTR tv85[ebp], dl
$LN13@Ffmt:
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	cl, BYTE PTR tv85[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR __Ptr$[ebp]
	add	edx, 1
	mov	DWORD PTR __Ptr$[ebp], edx

; 1649 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1650 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1651 : 		else

	jmp	SHORT $LN6@Ffmt
$LN5@Ffmt:

; 1652 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

	cmp	DWORD PTR __Ffl$[ebp], 8192		; 00002000H
	jne	SHORT $LN18@Ffmt
	mov	BYTE PTR tv92[ebp], 102			; 00000066H
	jmp	SHORT $LN19@Ffmt
$LN18@Ffmt:
	cmp	DWORD PTR __Ffl$[ebp], 12288		; 00003000H
	jne	SHORT $LN16@Ffmt
	mov	BYTE PTR tv91[ebp], 97			; 00000061H
	jmp	SHORT $LN17@Ffmt
$LN16@Ffmt:
	cmp	DWORD PTR __Ffl$[ebp], 4096		; 00001000H
	jne	SHORT $LN14@Ffmt
	mov	BYTE PTR tv90[ebp], 101			; 00000065H
	jmp	SHORT $LN15@Ffmt
$LN14@Ffmt:
	mov	BYTE PTR tv90[ebp], 103			; 00000067H
$LN15@Ffmt:
	mov	al, BYTE PTR tv90[ebp]
	mov	BYTE PTR tv91[ebp], al
$LN17@Ffmt:
	mov	cl, BYTE PTR tv91[ebp]
	mov	BYTE PTR tv92[ebp], cl
$LN19@Ffmt:
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	al, BYTE PTR tv92[ebp]
	mov	BYTE PTR [edx], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR __Ptr$[ebp], ecx
$LN6@Ffmt:

; 1653 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1654 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1655 : 
; 1656 : 		*_Ptr = '\0';

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	BYTE PTR [edx], 0

; 1657 : 		return (_Fmt);

	mov	eax, DWORD PTR __Fmt$[ebp]

; 1658 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1623 : 		{	// put formatted void pointer to _Dest

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 1624 : 		char _Buf[2 * _MAX_INT_DIG];
; 1625 : 
; 1626 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	push	OFFSET ??_C@_02BBAHNLBA@?$CFp@
	push	64					; 00000040H
	lea	ecx, DWORD PTR __Buf$[ebp]
	push	ecx
	call	_sprintf_s
	add	esp, 16					; 00000010H
	push	eax
	lea	edx, DWORD PTR __Buf$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Fill$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1627 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val))));
; 1628 : 		}

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
__Buf$ = -104						; size = 28
__Fmt$ = -76						; size = 8
tv184 = -68						; size = 8
__Precision$ = -60					; size = 8
tv166 = -52						; size = 8
tv80 = -44						; size = 8
__Ngen$ = -36						; size = 4
__Ptwo$2 = -32						; size = 4
_this$ = -28						; size = 4
tv71 = -24						; size = 4
__Bufsize$ = -20					; size = 4
__Isfixed$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1599 : 		{	// put formatted long double to _Dest

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 1600 : 		string _Buf;

	lea	ecx, DWORD PTR __Buf$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1601 : 		char _Fmt[8];
; 1602 : 		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
; 1603 : 			== ios_base::fixed;

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 12288				; 00003000H
	cmp	eax, 8192				; 00002000H
	jne	SHORT $LN4@do_put
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN5@do_put
$LN4@do_put:
	mov	DWORD PTR tv71[ebp], 0
$LN5@do_put:
	mov	al, BYTE PTR tv71[ebp]
	mov	BYTE PTR __Isfixed$[ebp], al

; 1604 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?precision@ios_base@std@@QBE_JXZ	; std::ios_base::precision
	mov	DWORD PTR tv166[ebp], eax
	mov	DWORD PTR tv166[ebp+4], edx
	cmp	DWORD PTR tv166[ebp+4], 0
	jg	SHORT $LN6@do_put
	jl	SHORT $LN9@do_put
	cmp	DWORD PTR tv166[ebp], 0
	ja	SHORT $LN6@do_put
$LN9@do_put:
	movzx	ecx, BYTE PTR __Isfixed$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@do_put
	mov	DWORD PTR tv80[ebp], 6
	mov	DWORD PTR tv80[ebp+4], 0
	jmp	SHORT $LN7@do_put
$LN6@do_put:
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?precision@ios_base@std@@QBE_JXZ	; std::ios_base::precision
	mov	DWORD PTR tv80[ebp], eax
	mov	DWORD PTR tv80[ebp+4], edx
$LN7@do_put:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR __Precision$[ebp], edx
	mov	eax, DWORD PTR tv80[ebp+4]
	mov	DWORD PTR __Precision$[ebp+4], eax

; 1605 : 			? 6 : _Iosbase.precision();	// desired precision
; 1606 : 		size_t _Bufsize = (size_t)_Precision;

	mov	ecx, DWORD PTR __Precision$[ebp]
	mov	DWORD PTR __Bufsize$[ebp], ecx

; 1607 : 		if (_Isfixed && 1e10 < _CSTD fabsl(_Val))

	movzx	edx, BYTE PTR __Isfixed$[ebp]
	test	edx, edx
	je	SHORT $LN2@do_put
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_fabsl
	add	esp, 8
	fstp	QWORD PTR tv184[ebp]
	movsd	xmm0, QWORD PTR tv184[ebp]
	comisd	xmm0, QWORD PTR __real@4202a05f20000000
	jbe	SHORT $LN2@do_put

; 1608 : 			{	// f or F format
; 1609 : 			int _Ptwo;
; 1610 : 			(void)_CSTD frexpl(_Val, &_Ptwo);

	lea	eax, DWORD PTR __Ptwo$2[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_frexpl
	fstp	ST(0)
	add	esp, 12					; 0000000cH

; 1611 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

	mov	ecx, DWORD PTR __Ptwo$2[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	imul	eax, eax, 30103
	cdq
	mov	ecx, 100000				; 000186a0H
	idiv	ecx
	add	eax, DWORD PTR __Bufsize$[ebp]
	mov	DWORD PTR __Bufsize$[ebp], eax
$LN2@do_put:

; 1612 : 			}
; 1613 : 
; 1614 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

	push	0
	mov	edx, DWORD PTR __Bufsize$[ebp]
	add	edx, 50					; 00000032H
	push	edx
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1615 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __Val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR __Precision$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	push	eax
	push	76					; 0000004cH
	lea	ecx, DWORD PTR __Fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	call	_sprintf_s
	add	esp, 24					; 00000018H
	mov	DWORD PTR __Ngen$[ebp], eax

; 1616 : 			_Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val));
; 1617 : 
; 1618 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

	mov	eax, DWORD PTR __Ngen$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Iosbase$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
	add	esp, 32					; 00000020H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1619 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0:
	lea	ecx, DWORD PTR __Buf$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z:
	mov	eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
__Buf$ = -104						; size = 28
__Fmt$ = -76						; size = 8
tv184 = -68						; size = 8
__Precision$ = -60					; size = 8
tv166 = -52						; size = 8
tv80 = -44						; size = 8
__Ngen$ = -36						; size = 4
__Ptwo$2 = -32						; size = 4
_this$ = -28						; size = 4
tv71 = -24						; size = 4
__Bufsize$ = -20					; size = 4
__Isfixed$ = -13					; size = 1
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1575 : 		{	// put formatted double to _Dest

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 1576 : 		string _Buf;

	lea	ecx, DWORD PTR __Buf$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1577 : 		char _Fmt[8];
; 1578 : 		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
; 1579 : 			== ios_base::fixed;

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 12288				; 00003000H
	cmp	eax, 8192				; 00002000H
	jne	SHORT $LN4@do_put
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN5@do_put
$LN4@do_put:
	mov	DWORD PTR tv71[ebp], 0
$LN5@do_put:
	mov	al, BYTE PTR tv71[ebp]
	mov	BYTE PTR __Isfixed$[ebp], al

; 1580 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?precision@ios_base@std@@QBE_JXZ	; std::ios_base::precision
	mov	DWORD PTR tv166[ebp], eax
	mov	DWORD PTR tv166[ebp+4], edx
	cmp	DWORD PTR tv166[ebp+4], 0
	jg	SHORT $LN6@do_put
	jl	SHORT $LN9@do_put
	cmp	DWORD PTR tv166[ebp], 0
	ja	SHORT $LN6@do_put
$LN9@do_put:
	movzx	ecx, BYTE PTR __Isfixed$[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@do_put
	mov	DWORD PTR tv80[ebp], 6
	mov	DWORD PTR tv80[ebp+4], 0
	jmp	SHORT $LN7@do_put
$LN6@do_put:
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?precision@ios_base@std@@QBE_JXZ	; std::ios_base::precision
	mov	DWORD PTR tv80[ebp], eax
	mov	DWORD PTR tv80[ebp+4], edx
$LN7@do_put:
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR __Precision$[ebp], edx
	mov	eax, DWORD PTR tv80[ebp+4]
	mov	DWORD PTR __Precision$[ebp+4], eax

; 1581 : 			? 6 : _Iosbase.precision();	// desired precision
; 1582 : 		size_t _Bufsize = (size_t)_Precision;

	mov	ecx, DWORD PTR __Precision$[ebp]
	mov	DWORD PTR __Bufsize$[ebp], ecx

; 1583 : 		if (_Isfixed && 1e10 < _CSTD fabs(_Val))

	movzx	edx, BYTE PTR __Isfixed$[ebp]
	test	edx, edx
	je	SHORT $LN2@do_put
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv184[ebp]
	movsd	xmm0, QWORD PTR tv184[ebp]
	comisd	xmm0, QWORD PTR __real@4202a05f20000000
	jbe	SHORT $LN2@do_put

; 1584 : 			{	// f or F format
; 1585 : 			int _Ptwo;
; 1586 : 			(void)_CSTD frexp(_Val, &_Ptwo);

	lea	eax, DWORD PTR __Ptwo$2[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR __Val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_frexp
	fstp	ST(0)
	add	esp, 12					; 0000000cH

; 1587 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

	mov	ecx, DWORD PTR __Ptwo$2[ebp]
	push	ecx
	call	_abs
	add	esp, 4
	imul	eax, eax, 30103
	cdq
	mov	ecx, 100000				; 000186a0H
	idiv	ecx
	add	eax, DWORD PTR __Bufsize$[ebp]
	mov	DWORD PTR __Bufsize$[ebp], eax
$LN2@do_put:

; 1588 : 			}
; 1589 : 
; 1590 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

	push	0
	mov	edx, DWORD PTR __Bufsize$[ebp]
	add	edx, 50					; 00000032H
	push	edx
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1591 : 		const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

	sub	esp, 8
	movsd	xmm0, QWORD PTR __Val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR __Precision$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	push	eax
	push	0
	lea	ecx, DWORD PTR __Fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	call	_sprintf_s
	add	esp, 24					; 00000018H
	mov	DWORD PTR __Ngen$[ebp], eax

; 1592 : 			_Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val));
; 1593 : 
; 1594 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

	mov	eax, DWORD PTR __Ngen$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Iosbase$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
	add	esp, 32					; 00000020H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Buf$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1595 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0:
	lea	ecx, DWORD PTR __Buf$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z:
	mov	eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1565 : 		{	// put formatted unsigned long long to _Dest

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 1566 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1567 : 
; 1568 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

	mov	eax, DWORD PTR __Val$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	push	eax
	push	OFFSET ??_C@_02CLHGNPPK@Lu@
	lea	edx, DWORD PTR __Fmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	add	esp, 16					; 00000010H
	push	eax
	push	64					; 00000040H
	lea	ecx, DWORD PTR __Buf$[ebp]
	push	ecx
	call	_sprintf_s
	add	esp, 20					; 00000014H
	push	eax
	lea	edx, DWORD PTR __Buf$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Fill$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1569 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1570 : 				_Iosbase.flags()), _Val))));
; 1571 : 		}

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1555 : 		{	// put formatted long long to _Dest

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 1556 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1557 : 
; 1558 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

	mov	eax, DWORD PTR __Val$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Val$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	push	eax
	push	OFFSET ??_C@_02HIKPPMOK@Ld@
	lea	edx, DWORD PTR __Fmt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	add	esp, 16					; 00000010H
	push	eax
	push	64					; 00000040H
	lea	ecx, DWORD PTR __Buf$[ebp]
	push	ecx
	call	_sprintf_s
	add	esp, 20					; 00000014H
	push	eax
	lea	edx, DWORD PTR __Buf$[ebp]
	push	edx
	movzx	eax, BYTE PTR __Fill$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1559 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1560 : 				_Iosbase.flags()), _Val))));
; 1561 : 		}

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1545 : 		{	// put formatted unsigned long to _Dest

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 1546 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1547 : 
; 1548 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	push	eax
	push	OFFSET ??_C@_02BDDLJJBK@lu@
	lea	ecx, DWORD PTR __Fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	add	esp, 16					; 00000010H
	push	eax
	push	64					; 00000040H
	lea	eax, DWORD PTR __Buf$[ebp]
	push	eax
	call	_sprintf_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Fill$[ebp]
	push	edx
	mov	eax, DWORD PTR __Iosbase$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1549 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1550 : 				_Iosbase.flags()), _Val))));
; 1551 : 		}

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1535 : 		{	// put formatted long to _Dest

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 1536 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1537 : 
; 1538 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	push	eax
	push	OFFSET ??_C@_02EAOCLKAK@ld@
	lea	ecx, DWORD PTR __Fmt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADPBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
	add	esp, 16					; 00000010H
	push	eax
	push	64					; 00000040H
	lea	eax, DWORD PTR __Buf$[ebp]
	push	eax
	call	_sprintf_s
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Buf$[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Fill$[ebp]
	push	edx
	mov	eax, DWORD PTR __Iosbase$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
	add	esp, 32					; 00000020H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1539 : 			static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1540 : 				_Iosbase.flags()), _Val))));
; 1541 : 		}

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
$T2 = -160						; size = 28
$T3 = -132						; size = 28
$T4 = -104						; size = 8
$T5 = -96						; size = 8
$T6 = -88						; size = 8
__Str$7 = -80						; size = 28
tv220 = -52						; size = 8
tv186 = -44						; size = 4
tv184 = -40						; size = 4
tv181 = -36						; size = 4
tv188 = -32						; size = 4
tv150 = -28						; size = 4
__Punct_fac$8 = -24					; size = 4
__Fillcount$9 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1506 : 		{	// put formatted bool to _Dest

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 148				; 00000094H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1507 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 16384				; 00004000H
	jne	SHORT $LN2@do_put

; 1508 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

	movzx	eax, BYTE PTR __Val$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Iosbase$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@do_put

; 1509 : 		else

	jmp	$LN1@do_put
$LN2@do_put:

; 1510 : 			{	// put "false" or "true"
; 1511 : 			const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv188[ebp], eax
	mov	edx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv181[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv181[ebp]
	push	eax
	call	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
	add	esp, 4
	mov	DWORD PTR __Punct_fac$8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T6[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 1512 : 			basic_string<_Elem> _Str;

	lea	ecx, DWORD PTR __Str$7[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1513 : 			if (_Val)

	movzx	ecx, BYTE PTR __Val$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@do_put

; 1514 : 				_Str.assign(_Punct_fac.truename());

	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR __Punct_fac$8[ebp]
	call	?truename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
	mov	DWORD PTR tv184[ebp], eax
	mov	eax, DWORD PTR tv184[ebp]
	push	eax
	lea	ecx, DWORD PTR __Str$7[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1515 : 			else

	jmp	SHORT $LN5@do_put
$LN4@do_put:

; 1516 : 				_Str.assign(_Punct_fac.falsename());

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Punct_fac$8[ebp]
	call	?falsename@?$numpunct@D@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
	mov	DWORD PTR tv186[ebp], eax
	mov	edx, DWORD PTR tv186[ebp]
	push	edx
	lea	ecx, DWORD PTR __Str$7[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@do_put:

; 1517 : 
; 1518 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1519 : 				|| (size_t)_Iosbase.width() <= _Str.size()

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv220[ebp], eax
	mov	DWORD PTR tv220[ebp+4], edx
	cmp	DWORD PTR tv220[ebp+4], 0
	jl	SHORT $LN8@do_put
	jg	SHORT $LN14@do_put
	cmp	DWORD PTR tv220[ebp], 0
	jbe	SHORT $LN8@do_put
$LN14@do_put:
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	esi, eax
	lea	ecx, DWORD PTR __Str$7[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	esi, eax
	jbe	SHORT $LN8@do_put
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	esi, eax
	lea	ecx, DWORD PTR __Str$7[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	esi, eax
	mov	DWORD PTR tv150[ebp], esi
	jmp	SHORT $LN9@do_put
$LN8@do_put:
	mov	DWORD PTR tv150[ebp], 0
$LN9@do_put:
	mov	eax, DWORD PTR tv150[ebp]
	mov	DWORD PTR __Fillcount$9[ebp], eax

; 1520 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();
; 1521 : 
; 1522 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	SHORT $LN6@do_put

; 1523 : 				{	// put leading fill
; 1524 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

	mov	ecx, DWORD PTR __Fillcount$9[ebp]
	push	ecx
	movzx	edx, BYTE PTR __Fill$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1525 : 				_Fillcount = 0;

	mov	DWORD PTR __Fillcount$9[ebp], 0
$LN6@do_put:

; 1526 : 				}
; 1527 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

	lea	ecx, DWORD PTR __Str$7[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	push	eax
	lea	ecx, DWORD PTR __Str$7[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR __Dest$[ebp], ecx
	mov	DWORD PTR __Dest$[ebp+4], edx

; 1528 : 			_Iosbase.width(0);

	push	0
	push	0
	mov	ecx, DWORD PTR __Iosbase$[ebp]
	call	?width@ios_base@std@@QAE_J_J@Z		; std::ios_base::width

; 1529 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

	mov	eax, DWORD PTR __Fillcount$9[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
	add	esp, 24					; 00000018H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Str$7[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@do_put:

; 1530 : 			}
; 1531 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
	lea	ecx, DWORD PTR __Str$7[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
	mov	eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1469 : 		{	// put formatted unsigned long to _Dest

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1470 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Iosbase$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1471 : 		}

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT
; _this$ = ecx

; 1463 : 		{	// put formatted long to _Dest

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1464 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	movzx	ecx, BYTE PTR __Fill$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Iosbase$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1465 : 		}

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1448 : 		{	// construct from specified locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1447 : 		: locale::facet(_Refs)

	mov	eax, DWORD PTR __Refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0facet@locale@std@@IAE@I@Z		; std::locale::facet::facet
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1448 : 		{	// construct from specified locale

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1449 : 		_Init(_Lobj);

	mov	edx, DWORD PTR __Lobj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init

; 1450 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
__ehhandler$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT
; _this$ = ecx

; 1434 : 		{	// initialize from _Locinfo object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1435 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IAEXABV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1430 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1431 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocnum
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 52
$T3 = -36						; size = 4
tv94 = -32						; size = 4
tv131 = -28						; size = 4
tv88 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1419 : 		{	// return locale category mask and construct standard facet

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR $T5[ebp], 0

; 1420 : 		if (_Ppf != nullptr && *_Ppf == nullptr)

	cmp	DWORD PTR __Ppf$[ebp], 0
	je	$LN2@Getcat
	mov	eax, DWORD PTR __Ppf$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@Getcat

; 1421 : 			*_Ppf = new num_put<_Elem, _OutIt>(

	push	8
	call	??2_Crt_new_delete@std@@SAPAXI@Z	; std::_Crt_new_delete::operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN4@Getcat
	push	0
	mov	ecx, DWORD PTR __Ploc$[ebp]
	call	?c_str@locale@std@@QBEPBDXZ		; std::locale::c_str
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0_Locinfo@std@@QAE@PBD@Z		; std::_Locinfo::_Locinfo
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T5[ebp]
	or	edx, 1
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QAE@ABV_Locinfo@1@I@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN5@Getcat
$LN4@Getcat:
	mov	DWORD PTR tv88[ebp], 0
$LN5@Getcat:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR __Ppf$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	and	ecx, 1
	je	SHORT $LN2@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 1422 : 				_Locinfo(_Ploc->c_str()));
; 1423 : 		return (_X_NUMERIC);

	mov	eax, 4

; 1424 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	and	eax, 1
	je	$LN8@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN8@Getcat:
	ret	0
__ehhandler$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
$T3 = -40						; size = 4
__Lock$4 = -36						; size = 4
__Id$5 = -32						; size = 4
__Psave_guard$6 = -28					; size = 4
__Pf$7 = -24						; size = 4
__Pfmod$8 = -20						; size = 4
__Psave$9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 505  : 	{	// get facet reference from locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

	push	0
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

	mov	eax, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
	mov	DWORD PTR __Psave$9[ebp], eax

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;

	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??Bid@locale@std@@QAEIXZ		; std::locale::id::operator unsigned int
	mov	DWORD PTR __Id$5[ebp], eax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

	mov	ecx, DWORD PTR __Id$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Loc$[ebp]
	call	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
	mov	DWORD PTR __Pf$7[ebp], eax

; 512  : 
; 513  : 		if (_Pf == nullptr)

	cmp	DWORD PTR __Pf$7[ebp], 0
	jne	$LN2@use_facet

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

	cmp	DWORD PTR __Psave$9[ebp], 0
	je	SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

	mov	edx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pf$7[ebp], edx
	jmp	SHORT $LN2@use_facet
$LN3@use_facet:

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

	mov	eax, DWORD PTR __Loc$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Psave$9[ebp]
	push	ecx
	call	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN5@use_facet

; 520  : 				{
; 521  :  #if _HAS_EXCEPTIONS
; 522  : 				_THROW(bad_cast{});	// lazy disallowed

	lea	ecx, DWORD PTR $T2[ebp]
	call	??0bad_cast@std@@QAE@XZ			; std::bad_cast::bad_cast
	push	OFFSET __TI2?AVbad_cast@std@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 				abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 				}
; 527  : 			else

	jmp	SHORT $LN2@use_facet
$LN5@use_facet:

; 528  : 				{	// queue up lazy facet for destruction
; 529  : 				auto _Pfmod = const_cast<locale::facet *>(_Psave);

	mov	eax, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pfmod$8[ebp], eax

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

	mov	ecx, DWORD PTR __Pfmod$8[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

	mov	edx, DWORD PTR __Pfmod$8[ebp]
	push	edx
	call	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
	add	esp, 4

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

	mov	eax, DWORD PTR __Pfmod$8[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Pfmod$8[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

	mov	ecx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave

; 540  : 				_Pf = _Psave;

	mov	edx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pf$7[ebp], edx

; 541  : 
; 542  : 				(void) _Psave_guard.release();

	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 543  : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

	mov	eax, DWORD PTR __Pf$7[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	eax, DWORD PTR $T3[ebp]
$LN7@use_facet:

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
	lea	ecx, DWORD PTR __Lock$4[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1:
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	jmp	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 152  : 			{	// test if stream state okay

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 			return (_Ok);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+4]

; 154  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 135  : 			{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 136  :  #if _HAS_EXCEPTIONS
; 137  : 			if (!_STD uncaught_exception())	// TRANSITION, OS#15518458

	call	?uncaught_exception@std@@YA_NXZ		; std::uncaught_exception
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@sentry

; 138  : 				{
; 139  : 				this->_Myostr._Osfx();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN1@sentry:

; 140  : 				}
; 141  :  #else /* _HAS_EXCEPTIONS */
; 142  : 			this->_Myostr._Osfx();
; 143  :  #endif /* _HAS_EXCEPTIONS */
; 144  : 			}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 121  : 			{	// construct locking and testing stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 			: _Sentry_base(_Ostr)

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 122  : 			if (_Ostr.good() && _Ostr.tie() != nullptr && _Ostr.tie() != &_Ostr)

	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?good@ios_base@std@@QBE_NXZ		; std::ios_base::good
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
	test	eax, eax
	je	SHORT $LN2@sentry
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
	cmp	eax, DWORD PTR __Ostr$[ebp]
	je	SHORT $LN2@sentry

; 123  : 				_Ostr.tie()->flush();

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
	mov	ecx, eax
	call	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN2@sentry:

; 124  : 			_Ok = _Ostr.good();	// store test only after flushing tie

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?good@ios_base@std@@QBE_NXZ		; std::ios_base::good
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], al

; 125  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv92 = -28						; size = 4
tv86 = -24						; size = 4
_this$ = -20						; size = 4
tv72 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 105  : 			{	// destroy after unlocking

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 			if (_Myostr.rdbuf() != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv72[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	test	eax, eax
	je	SHORT $LN3@Sentry_bas

; 107  : 				_Myostr.rdbuf()->_Unlock();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv86[ebp], edx
	mov	eax, DWORD PTR tv86[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv86[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv92[ebp], eax
	mov	eax, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN3@Sentry_bas:

; 108  : 			}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv93 = -16						; size = 4
tv87 = -12						; size = 4
tv73 = -8						; size = 4
_this$ = -4						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 99   : 			{	// lock the stream buffer, if there

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 98   : 			: _Myostr(_Ostr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR [eax], ecx

; 100  : 			if (_Myostr.rdbuf() != nullptr)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv73[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	test	eax, eax
	je	SHORT $LN1@Sentry_bas

; 101  : 				_Myostr.rdbuf()->_Lock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv87[ebp], ecx
	mov	edx, DWORD PTR tv87[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv87[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv93[ebp], eax
	mov	ecx, DWORD PTR tv93[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv93[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
$LN1@Sentry_bas:

; 102  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>, COMDAT
; _this$ = ecx

; 1943 : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1941 : 		: _Mypair(_One_then_variadic_args_t(),

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1944 : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 1945 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAPAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAPAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV2@00@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Ucopy<STTriangleMesh * *>, COMDAT
; _this$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_copy@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ; std::_Uninitialized_copy<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >
	add	esp, 16					; 00000010H

; 1824 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAPAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV2@00@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Ucopy<STTriangleMesh * *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@PAVSTTriangleMesh@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Al$ = 8						; size = 4
??$?0V?$allocator@PAVSTTriangleMesh@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > ><std::allocator<STTriangleMesh *>,void>, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		: _Mypair(_One_then_variadic_args_t(),

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$forward@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YA$$QAV?$allocator@PAVSTTriangleMesh@@@0@AAV10@@Z ; std::forward<std::allocator<STTriangleMesh *> >
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@PAVSTTriangleMesh@@@std@@$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><std::allocator<STTriangleMesh *> >

; 456  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Alloc_proxy

; 457  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$allocator@PAVSTTriangleMesh@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > ><std::allocator<STTriangleMesh *>,void>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Newsize$ = -52					; size = 4
__Constructed_last$ = -48				; size = 4
__Oldsize$ = -44					; size = 4
__Newcapacity$ = -40					; size = 4
__Al$ = -36						; size = 4
__Constructed_first$ = -32				; size = 4
__Whereoff$ = -28					; size = 4
__Newvec$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_reallocate<STTriangleMesh * const &>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 945  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

	call	?_Xlength@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@CAXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEII@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEPAPAVSTTriangleMesh@@I@Z ; std::allocator<STTriangleMesh *>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	edx, DWORD PTR __Whereoff$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	??$_Unfancy@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@@Z ; std::_Unfancy<STTriangleMesh *>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z ; std::forward<STTriangleMesh * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR tv206[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PAVSTTriangleMesh@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAXAAV?$allocator@PAVSTTriangleMesh@@@1@QAPAVSTTriangleMesh@@ABQAV3@@Z ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::construct<STTriangleMesh *,STTriangleMesh * const &>
	add	esp, 12					; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV3@00@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

	mov	edx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV3@00@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	push	edx
	mov	eax, DWORD PTR __Constructed_first$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEXQAPAVSTTriangleMesh@@I@Z ; std::allocator<STTriangleMesh *>::deallocate

; 977  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 978  : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXQAPAVSTTriangleMesh@@II@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
$LN6@Emplace_re:

; 982  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_reallocate<STTriangleMesh * const &>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAVSTTriangleMesh@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAXAAV?$allocator@PAVSTTriangleMesh@@@1@QAPAVSTTriangleMesh@@ABQAV3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PAVSTTriangleMesh@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAXAAV?$allocator@PAVSTTriangleMesh@@@1@QAPAVSTTriangleMesh@@ABQAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::construct<STTriangleMesh *,STTriangleMesh * const &>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z ; std::forward<STTriangleMesh * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PAVSTTriangleMesh@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAXAAV?$allocator@PAVSTTriangleMesh@@@1@QAPAVSTTriangleMesh@@ABQAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::construct<STTriangleMesh *,STTriangleMesh * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@@Z PROC ; std::_Unfancy<STTriangleMesh *>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@@Z ENDP ; std::_Unfancy<STTriangleMesh *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXABQAVSTTriangleMesh@@@Z
_TEXT	SEGMENT
__Result$ = -12						; size = 4
tv142 = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXABQAVSTTriangleMesh@@@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_back_with_unused_capacity<STTriangleMesh * const &>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z ; std::forward<STTriangleMesh * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@PAVSTTriangleMesh@@@std@@YAPAPAVSTTriangleMesh@@PAPAV1@@Z ; std::_Unfancy<STTriangleMesh *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	call	??$construct@PAVSTTriangleMesh@@ABQAV1@@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAXAAV?$allocator@PAVSTTriangleMesh@@@1@QAPAVSTTriangleMesh@@ABQAV3@@Z ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::construct<STTriangleMesh *,STTriangleMesh * const &>
	add	esp, 12					; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 4
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXABQAVSTTriangleMesh@@@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_back_with_unused_capacity<STTriangleMesh * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z PROC ; std::forward<STTriangleMesh * const &>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z ENDP ; std::forward<STTriangleMesh * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::emplace_back<STTriangleMesh * const &>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABE_NXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z ; std::forward<STTriangleMesh * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXABQAVSTTriangleMesh@@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_back_with_unused_capacity<STTriangleMesh * const &>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@ABQAVSTTriangleMesh@@@std@@YAABQAVSTTriangleMesh@@ABQAV1@@Z ; std::forward<STTriangleMesh * const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEPAPAVSTTriangleMesh@@QAPAV2@ABQAV2@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Emplace_reallocate<STTriangleMesh * const &>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::emplace_back<STTriangleMesh * const &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAUSTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAUSTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU2@00@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Ucopy<STVector3 *>, COMDAT
; _this$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_copy@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z ; std::_Uninitialized_copy<STVector3 *,STVector3 *,std::allocator<STVector3> >
	add	esp, 16					; 00000010H

; 1824 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUSTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU2@00@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Ucopy<STVector3 *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@USTVector3@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USTVector3@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Al$ = 8						; size = 4
??$?0V?$allocator@USTVector3@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USTVector3@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > ><std::allocator<STVector3>,void>, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		: _Mypair(_One_then_variadic_args_t(),

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$forward@V?$allocator@USTVector3@@@std@@@std@@YA$$QAV?$allocator@USTVector3@@@0@AAV10@@Z ; std::forward<std::allocator<STVector3> >
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@USTVector3@@@std@@$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@USTVector3@@@1@@Z ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><std::allocator<STVector3> >

; 456  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Alloc_proxy

; 457  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$allocator@USTVector3@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USTVector3@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > ><std::allocator<STVector3>,void>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Newsize$ = -52					; size = 4
__Constructed_last$ = -48				; size = 4
__Oldsize$ = -44					; size = 4
__Newcapacity$ = -40					; size = 4
__Al$ = -36						; size = 4
__Constructed_first$ = -32				; size = 4
__Whereoff$ = -28					; size = 4
__Newvec$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_reallocate<STVector3>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 945  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

	call	?_Xlength@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEII@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@USTVector3@@@std@@QAEPAUSTVector3@@I@Z ; std::allocator<STVector3>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	edx, DWORD PTR __Whereoff$[ebp], 12
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	imul	eax, DWORD PTR __Whereoff$[ebp], 12
	add	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	call	??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z ; std::_Unfancy<STVector3>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::forward<STVector3>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR tv206[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@USTVector3@@U1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3>
	add	esp, 12					; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

	imul	ecx, DWORD PTR __Whereoff$[ebp], 12
	add	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	edx, DWORD PTR __Whereptr$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU3@00@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	imul	ecx, DWORD PTR __Whereoff$[ebp], 12
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU3@00@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_first$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@USTVector3@@@std@@QAEXQAUSTVector3@@I@Z ; std::allocator<STVector3>::deallocate

; 977  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 978  : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXQAUSTVector3@@II@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

	imul	esi, DWORD PTR __Whereoff$[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	add	esi, DWORD PTR [eax]
	mov	eax, esi
$LN6@Emplace_re:

; 982  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_reallocate<STVector3>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@USTVector3@@U1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@$$QAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@USTVector3@@U1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	12					; 0000000cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::forward<STVector3>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0STVector3@@QAE@ABU0@@Z		; STVector3::STVector3

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@USTVector3@@U1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z PROC ; std::_Unfancy<STVector3>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z ENDP ; std::_Unfancy<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEX$$QAUSTVector3@@@Z
_TEXT	SEGMENT
__Result$ = -12						; size = 4
tv142 = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEX$$QAUSTVector3@@@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_back_with_unused_capacity<STVector3>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::forward<STVector3>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@USTVector3@@@std@@YAPAUSTVector3@@PAU1@@Z ; std::_Unfancy<STVector3>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	call	??$construct@USTVector3@@U1@@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAXAAV?$allocator@USTVector3@@@1@QAUSTVector3@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::construct<STVector3,STVector3>
	add	esp, 12					; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEX$$QAUSTVector3@@@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_back_with_unused_capacity<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z PROC ; std::forward<STVector3>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ENDP ; std::forward<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::emplace_back<STVector3>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABE_NXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::forward<STVector3>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEX$$QAUSTVector3@@@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_back_with_unused_capacity<STVector3>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@USTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::forward<STVector3>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEPAUSTVector3@@QAU2@$$QAU2@@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Emplace_reallocate<STVector3>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::emplace_back<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAUSTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUSTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z PROC ; std::move<STVector3 &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAUSTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ENDP ; std::move<STVector3 &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAUTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU2@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAUTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU2@00@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Ucopy<TriangleIndices *>, COMDAT
; _this$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_copy@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z ; std::_Uninitialized_copy<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >
	add	esp, 16					; 00000010H

; 1824 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAUTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU2@00@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Ucopy<TriangleIndices *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@UTriangleIndices@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UTriangleIndices@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Al$ = 8						; size = 4
??$?0V?$allocator@UTriangleIndices@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UTriangleIndices@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > ><std::allocator<TriangleIndices>,void>, COMDAT
; _this$ = ecx

; 455  : 		{	// construct allocator from _Al

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 453  : 		: _Mypair(_One_then_variadic_args_t(),

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$forward@V?$allocator@UTriangleIndices@@@std@@@std@@YA$$QAV?$allocator@UTriangleIndices@@@0@AAV10@@Z ; std::forward<std::allocator<TriangleIndices> >
	add	esp, 4
	push	eax
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@UTriangleIndices@@@std@@$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UTriangleIndices@@@1@@Z ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><std::allocator<TriangleIndices> >

; 456  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Alloc_proxy

; 457  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0V?$allocator@UTriangleIndices@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UTriangleIndices@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > ><std::allocator<TriangleIndices>,void>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z
_TEXT	SEGMENT
tv206 = -56						; size = 4
__Newsize$ = -52					; size = 4
__Constructed_last$ = -48				; size = 4
__Oldsize$ = -44					; size = 4
__Newcapacity$ = -40					; size = 4
__Al$ = -36						; size = 4
__Constructed_first$ = -32				; size = 4
__Whereoff$ = -28					; size = 4
__Newvec$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_reallocate<TriangleIndices>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 945  : 		_Alty& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 946  : 		const size_type _Oldsize = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size
	mov	DWORD PTR __Oldsize$[ebp], eax

; 947  : 
; 948  : 		if (_Oldsize == max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 949  : 			{
; 950  : 			_Xlength();

	call	?_Xlength@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xlength
$LN2@Emplace_re:

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

	mov	edx, DWORD PTR __Oldsize$[ebp]
	add	edx, 1
	mov	DWORD PTR __Newsize$[ebp], edx

; 954  : 		const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEII@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 955  : 
; 956  : 		const pointer _Newvec = _Al.allocate(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@UTriangleIndices@@@std@@QAEPAUTriangleIndices@@I@Z ; std::allocator<TriangleIndices>::allocate
	mov	DWORD PTR __Newvec$[ebp], eax

; 957  : 		const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	edx, DWORD PTR __Whereoff$[ebp], 12
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	DWORD PTR __Constructed_last$[ebp], ecx

; 958  : 		pointer _Constructed_first = _Constructed_last;

	mov	edx, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 959  : 
; 960  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	imul	eax, DWORD PTR __Whereoff$[ebp], 12
	add	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	call	??$_Unfancy@UTriangleIndices@@@std@@YAPAUTriangleIndices@@PAU1@@Z ; std::_Unfancy<TriangleIndices>
	add	esp, 4
	mov	DWORD PTR tv206[ebp], eax
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::forward<TriangleIndices>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR tv206[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	??$construct@UTriangleIndices@@U1@@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAXAAV?$allocator@UTriangleIndices@@@1@QAUTriangleIndices@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::construct<TriangleIndices,TriangleIndices>
	add	esp, 12					; 0000000cH

; 962  : 		_Constructed_first = _Newvec + _Whereoff;

	imul	ecx, DWORD PTR __Whereoff$[ebp], 12
	add	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], ecx

; 963  : 
; 964  : 		if (_Whereptr == this->_Mylast())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	edx, DWORD PTR __Whereptr$[ebp]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept

; 967  : 			}
; 968  : 		else

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);

	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU3@00@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove

; 971  : 			_Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

	imul	ecx, DWORD PTR __Whereoff$[ebp], 12
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU3@00@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z$0:

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_first$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@0@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Destroy

; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);

	mov	edx, DWORD PTR __Newcapacity$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@UTriangleIndices@@@std@@QAEXQAUTriangleIndices@@I@Z ; std::allocator<TriangleIndices>::deallocate

; 977  : 		_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 978  : 		_CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z$1
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z$1:

; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newvec$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXQAUTriangleIndices@@II@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

	imul	esi, DWORD PTR __Whereoff$[ebp], 12
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	add	esi, DWORD PTR [eax]
	mov	eax, esi
$LN6@Emplace_re:

; 982  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_reallocate<TriangleIndices>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@UTriangleIndices@@U1@@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAXAAV?$allocator@UTriangleIndices@@@1@QAUTriangleIndices@@$$QAU3@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@UTriangleIndices@@U1@@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAXAAV?$allocator@UTriangleIndices@@@1@QAUTriangleIndices@@$$QAU3@@Z PROC ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::construct<TriangleIndices,TriangleIndices>, COMDAT

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	12					; 0000000cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::forward<TriangleIndices>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@UTriangleIndices@@U1@@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAXAAV?$allocator@UTriangleIndices@@@1@QAUTriangleIndices@@$$QAU3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::construct<TriangleIndices,TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@UTriangleIndices@@@std@@YAPAUTriangleIndices@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@UTriangleIndices@@@std@@YAPAUTriangleIndices@@PAU1@@Z PROC ; std::_Unfancy<TriangleIndices>, COMDAT

; 345  : 	{	// do nothing for plain pointers

	push	ebp
	mov	ebp, esp

; 346  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 347  : 	}

	pop	ebp
	ret	0
??$_Unfancy@UTriangleIndices@@@std@@YAPAUTriangleIndices@@PAU1@@Z ENDP ; std::_Unfancy<TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEX$$QAUTriangleIndices@@@Z
_TEXT	SEGMENT
__Result$ = -12						; size = 4
tv142 = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEX$$QAUTriangleIndices@@@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_back_with_unused_capacity<TriangleIndices>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 901  : 			// pre: _Has_unused_capacity()
; 902  : 		_Alty_traits::construct(this->_Getal(), _Unfancy(this->_Mylast()), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::forward<TriangleIndices>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Unfancy@UTriangleIndices@@@std@@YAPAUTriangleIndices@@PAU1@@Z ; std::_Unfancy<TriangleIndices>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	call	??$construct@UTriangleIndices@@U1@@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAXAAV?$allocator@UTriangleIndices@@@1@QAUTriangleIndices@@$$QAU3@@Z ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::construct<TriangleIndices,TriangleIndices>
	add	esp, 12					; 0000000cH

; 903  : 		_Orphan_range(this->_Mylast(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Orphan_range

; 904  : 		_Ty& _Result = *this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 905  : 		++this->_Mylast();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	DWORD PTR tv142[ebp], eax
	mov	edx, DWORD PTR tv142[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx], eax

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEX$$QAUTriangleIndices@@@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_back_with_unused_capacity<TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z PROC ; std::forward<TriangleIndices>, COMDAT

; 1573 : 	{	// forward an lvalue as either an lvalue or an rvalue

	push	ebp
	mov	ebp, esp

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1575 : 	}

	pop	ebp
	ret	0
??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ENDP ; std::forward<TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::emplace_back<TriangleIndices>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 917  : 		if (_Has_unused_capacity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Has_unused_capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABE_NXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Has_unused_capacity
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@emplace_ba

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	push	ecx
	call	??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::forward<TriangleIndices>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEX$$QAUTriangleIndices@@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_back_with_unused_capacity<TriangleIndices>
	jmp	SHORT $LN1@emplace_ba
$LN2@emplace_ba:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	push	edx
	call	??$forward@UTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::forward<TriangleIndices>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEPAUTriangleIndices@@QAU2@$$QAU2@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Emplace_reallocate<TriangleIndices>
	mov	DWORD PTR __Result$[ebp], eax
$LN1@emplace_ba:

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??$emplace_back@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::emplace_back<TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAUTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z PROC ; std::move<TriangleIndices &>, COMDAT

; 1588 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1590 : 	}

	pop	ebp
	ret	0
??$move@AAUTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ENDP ; std::move<TriangleIndices &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
$T2 = -48						; size = 28
_this$ = -20						; size = 4
_id$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_filename$ = 8						; size = 4
?Save@MySphere@@AAEXPAD@Z PROC				; MySphere::Save
; _this$ = ecx

; 250  :  {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Save@MySphere@@AAEXPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 251  :    // save the result sphere
; 252  :     for(int id=0; id < (int)m_TriangleMeshes.size(); id++)

	mov	DWORD PTR _id$3[ebp], 0
	jmp	SHORT $LN4@Save
$LN2@Save:
	mov	eax, DWORD PTR _id$3[ebp]
	add	eax, 1
	mov	DWORD PTR _id$3[ebp], eax
$LN4@Save:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
	cmp	DWORD PTR _id$3[ebp], eax
	jge	SHORT $LN1@Save

; 253  :         m_TriangleMeshes[id]->Write(filename);

	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _id$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEAAPAVSTTriangleMesh@@I@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Write@STTriangleMesh@@QAE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; STTriangleMesh::Write
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	jmp	SHORT $LN2@Save
$LN1@Save:

; 254  :  }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Save@MySphere@@AAEXPAD@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?Save@MySphere@@AAEXPAD@Z:
	mov	eax, OFFSET __ehfuncinfo$?Save@MySphere@@AAEXPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Save@MySphere@@AAEXPAD@Z ENDP				; MySphere::Save
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
tv77 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_this$ = -8						; size = 4
_id$3 = -4						; size = 4
?ClearMesh@MySphere@@AAEXXZ PROC			; MySphere::ClearMesh
; _this$ = ecx

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 283  :     // remove the mesh
; 284  :     for(int id=0; id < (int)m_TriangleMeshes.size(); id++)

	mov	DWORD PTR _id$3[ebp], 0
	jmp	SHORT $LN4@ClearMesh
$LN2@ClearMesh:
	mov	eax, DWORD PTR _id$3[ebp]
	add	eax, 1
	mov	DWORD PTR _id$3[ebp], eax
$LN4@ClearMesh:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
	cmp	DWORD PTR _id$3[ebp], eax
	jge	SHORT $LN3@ClearMesh

; 285  :         delete m_TriangleMeshes[id];

	mov	ecx, DWORD PTR _id$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEAAPAVSTTriangleMesh@@I@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN7@ClearMesh
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GSTTriangleMesh@@QAEPAXI@Z
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN8@ClearMesh
$LN7@ClearMesh:
	mov	DWORD PTR tv77[ebp], 0
$LN8@ClearMesh:
	jmp	SHORT $LN2@ClearMesh
$LN3@ClearMesh:

; 286  : 
; 287  :     if(m_TriangleMeshes.size())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
	test	eax, eax
	je	SHORT $LN1@ClearMesh

; 288  :         m_TriangleMeshes.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::clear
$LN1@ClearMesh:

; 289  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ClearMesh@MySphere@@AAEXXZ ENDP			; MySphere::ClearMesh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_T$ = -16						; size = 12
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_c$ = 20						; size = 4
?MakeTIndices@MySphere@@AAE?AUTriangleIndices@@HHH@Z PROC ; MySphere::MakeTIndices
; _this$ = ecx

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 47   :     TriangleIndices T;
; 48   :     T.i1 = a;

	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _T$[ebp], eax

; 49   :     T.i2 = b;

	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _T$[ebp+4], ecx

; 50   :     T.i3 = c;

	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _T$[ebp+8], edx

; 51   :     return(T);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _T$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _T$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _T$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 52   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?MakeTIndices@MySphere@@AAE?AUTriangleIndices@@HHH@Z ENDP ; MySphere::MakeTIndices
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
tv174 = -52						; size = 8
_this$ = -44						; size = 4
tv224 = -40						; size = 4
tv222 = -36						; size = 4
tv220 = -32						; size = 4
_fraction$ = -28					; size = 4
_old$ = -24						; size = 4
_zsquare$ = -20						; size = 4
_ysquare$ = -16						; size = 4
_xsquare$ = -12						; size = 4
_pos$ = -8						; size = 4
_ratio$ = -4						; size = 4
_pointIndex$ = 8					; size = 4
_vertices$ = 12						; size = 4
?Offset@MySphere@@AAEHHPAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@Z PROC ; MySphere::Offset
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	float pos = (1.0 + sqrtf(5.0)) / 2.0;

	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	QWORD PTR tv174[ebp]
	movsd	xmm0, QWORD PTR tv174[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _pos$[ebp], xmm0

; 61   : 	float old = sqrtf(1 + (pos * pos));

	movss	xmm0, DWORD PTR _pos$[ebp]
	mulss	xmm0, DWORD PTR _pos$[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _old$[ebp]

; 62   : 	float xsquare = vertices->at(pointIndex).x * vertices->at(pointIndex).x;

	mov	eax, DWORD PTR _pointIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	mov	esi, eax
	mov	ecx, DWORD PTR _pointIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [esi]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _xsquare$[ebp], xmm0

; 63   : 	float ysquare = vertices->at(pointIndex).y * vertices->at(pointIndex).y;

	mov	edx, DWORD PTR _pointIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	mov	esi, eax
	mov	eax, DWORD PTR _pointIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [esi+4]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _ysquare$[ebp], xmm0

; 64   : 	float zsquare = vertices->at(pointIndex).z * vertices->at(pointIndex).z;

	mov	ecx, DWORD PTR _pointIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	mov	esi, eax
	mov	edx, DWORD PTR _pointIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [esi+8]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _zsquare$[ebp], xmm0

; 65   : 	float fraction = sqrtf(xsquare + ysquare + zsquare);

	movss	xmm0, DWORD PTR _xsquare$[ebp]
	addss	xmm0, DWORD PTR _ysquare$[ebp]
	addss	xmm0, DWORD PTR _zsquare$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _fraction$[ebp]

; 66   : 	float ratio = (old / fraction);

	movss	xmm0, DWORD PTR _old$[ebp]
	divss	xmm0, DWORD PTR _fraction$[ebp]
	movss	DWORD PTR _ratio$[ebp], xmm0

; 67   : 
; 68   : 	vertices->at(pointIndex).x = vertices->at(pointIndex).x * (ratio);

	mov	eax, DWORD PTR _pointIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _ratio$[ebp]
	mov	ecx, DWORD PTR _pointIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vertices$[ebp]
	movss	DWORD PTR tv220[ebp], xmm0
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR tv220[ebp]
	movss	DWORD PTR [eax], xmm0

; 69   : 	vertices->at(pointIndex).y = vertices->at(pointIndex).y * (ratio);

	mov	edx, DWORD PTR _pointIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _ratio$[ebp]
	mov	eax, DWORD PTR _pointIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vertices$[ebp]
	movss	DWORD PTR tv222[ebp], xmm0
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR tv222[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 70   : 	vertices->at(pointIndex).z = vertices->at(pointIndex).z * (ratio);

	mov	ecx, DWORD PTR _pointIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _ratio$[ebp]
	mov	edx, DWORD PTR _pointIndex$[ebp]
	push	edx
	mov	ecx, DWORD PTR _vertices$[ebp]
	movss	DWORD PTR tv224[ebp], xmm0
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR tv224[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 71   : 
; 72   : 	return m_globalCount + 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]
	add	eax, 1

; 73   : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?Offset@MySphere@@AAEHHPAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@Z ENDP ; MySphere::Offset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_midPointIndices$ = 16					; size = 4
_vertices$ = 20						; size = 4
?MidPoint@MySphere@@AAEHHHPAV?$multimap@JHU?$less@J@std@@V?$allocator@U?$pair@$$CBJH@std@@@2@@std@@PAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@3@@Z PROC ; MySphere::MidPoint
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 
; 81   :         int index = 0;

	mov	DWORD PTR _index$[ebp], 0

; 82   : 
; 83   :         return(index);

	mov	eax, DWORD PTR _index$[ebp]

; 84   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?MidPoint@MySphere@@AAEHHHPAV?$multimap@JHU?$less@J@std@@V?$allocator@U?$pair@$$CBJH@std@@@2@@std@@PAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@3@@Z ENDP ; MySphere::MidPoint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -48						; size = 4
_x$2 = -44						; size = 4
_y$3 = -40						; size = 4
_z$4 = -36						; size = 4
_holderOne$5 = -32					; size = 4
_holderTwo$6 = -28					; size = 4
_holderThree$7 = -24					; size = 4
_j$8 = -20						; size = 4
_i$9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_tmesh$ = 8						; size = 4
_face$ = 12						; size = 16
_vertices$ = 28						; size = 16
_nvert$ = 44						; size = 4
?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z PROC ; MySphere::GenerateMesh
; _this$ = ecx

; 91   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 92   : 
; 93   : 	for (int j = 0; j < vertices.size(); j++)

	mov	DWORD PTR _j$8[ebp], 0
	jmp	SHORT $LN4@GenerateMe
$LN2@GenerateMe:
	mov	eax, DWORD PTR _j$8[ebp]
	add	eax, 1
	mov	DWORD PTR _j$8[ebp], eax
$LN4@GenerateMe:
	lea	ecx, DWORD PTR _vertices$[ebp]
	call	?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::size
	cmp	DWORD PTR _j$8[ebp], eax
	jae	$LN3@GenerateMe

; 94   : 	{
; 95   : 		float x = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _x$2[ebp], xmm0

; 96   : 		float y = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _y$3[ebp], xmm0

; 97   : 		float z = 0;

	xorps	xmm0, xmm0
	movss	DWORD PTR _z$4[ebp], xmm0

; 98   : 
; 99   : 		x = vertices.at(j).x;

	mov	ecx, DWORD PTR _j$8[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _x$2[ebp], xmm0

; 100  : 		y = vertices.at(j).y;

	mov	edx, DWORD PTR _j$8[ebp]
	push	edx
	lea	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _y$3[ebp], xmm0

; 101  : 		z = vertices.at(j).z;

	mov	eax, DWORD PTR _j$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _vertices$[ebp]
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _z$4[ebp], xmm0

; 102  : 
; 103  : 		tmesh->AddVertex(x, y, z);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _z$4[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$3[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmesh$[ebp]
	call	?AddVertex@STTriangleMesh@@QAEIMMMMM@Z	; STTriangleMesh::AddVertex

; 104  : 	}

	jmp	$LN2@GenerateMe
$LN3@GenerateMe:

; 105  : 	//std::cout << "Got here\n";
; 106  : 	//Adds the faces to STTrianglesMesh
; 107  : 	for (int i = 0; i < face.size(); i++)

	mov	DWORD PTR _i$9[ebp], 0
	jmp	SHORT $LN7@GenerateMe
$LN5@GenerateMe:
	mov	ecx, DWORD PTR _i$9[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$9[ebp], ecx
$LN7@GenerateMe:
	lea	ecx, DWORD PTR _face$[ebp]
	call	?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size
	cmp	DWORD PTR _i$9[ebp], eax
	jae	$LN6@GenerateMe

; 108  : 	{
; 109  : 		//std::cout << "i: " << i << "\n";
; 110  : 		int holderOne = 0;

	mov	DWORD PTR _holderOne$5[ebp], 0

; 111  : 		int holderTwo = 0;

	mov	DWORD PTR _holderTwo$6[ebp], 0

; 112  : 		int holderThree = 0;

	mov	DWORD PTR _holderThree$7[ebp], 0

; 113  : 
; 114  : 		//Gets the position of the faces in the right order.
; 115  : 		holderOne = face.at(i).i1;

	mov	edx, DWORD PTR _i$9[ebp]
	push	edx
	lea	ecx, DWORD PTR _face$[ebp]
	call	?at@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEAAUTriangleIndices@@I@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::at
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _holderOne$5[ebp], eax

; 116  : 		holderTwo = face.at(i).i2;

	mov	ecx, DWORD PTR _i$9[ebp]
	push	ecx
	lea	ecx, DWORD PTR _face$[ebp]
	call	?at@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEAAUTriangleIndices@@I@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::at
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _holderTwo$6[ebp], edx

; 117  : 		holderThree = face.at(i).i3;

	mov	eax, DWORD PTR _i$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _face$[ebp]
	call	?at@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEAAUTriangleIndices@@I@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::at
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _holderThree$7[ebp], ecx

; 118  : 
; 119  : 		tmesh->AddFace(holderOne, holderTwo, holderThree);

	mov	edx, DWORD PTR _holderThree$7[ebp]
	push	edx
	mov	eax, DWORD PTR _holderTwo$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _holderOne$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tmesh$[ebp]
	call	?AddFace@STTriangleMesh@@QAEIIII@Z	; STTriangleMesh::AddFace

; 120  : 
; 121  : 		if (i == 128)

	cmp	DWORD PTR _i$9[ebp], 128		; 00000080H
	jne	SHORT $LN8@GenerateMe

; 122  : 		{
; 123  : 			std::cout << holderOne << " " << holderTwo << " " << holderThree;

	mov	edx, DWORD PTR _holderThree$7[ebp]
	push	edx
	push	OFFSET $SG40873
	mov	eax, DWORD PTR _holderTwo$6[ebp]
	push	eax
	push	OFFSET $SG40874
	mov	ecx, DWORD PTR _holderOne$5[ebp]
	push	ecx
	mov	ecx, OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
$LN8@GenerateMe:

; 124  : 		}
; 125  : 	}

	jmp	$LN5@GenerateMe
$LN6@GenerateMe:

; 126  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _face$[ebp]
	call	??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::~vector<TriangleIndices,std::allocator<TriangleIndices> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _vertices$[ebp]
	call	??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::vector<STVector3,std::allocator<STVector3> >::~vector<STVector3,std::allocator<STVector3> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z$0:
	lea	ecx, DWORD PTR _vertices$[ebp]
	jmp	??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::vector<STVector3,std::allocator<STVector3> >::~vector<STVector3,std::allocator<STVector3> >
__unwindfunclet$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z$1:
	lea	ecx, DWORD PTR _face$[ebp]
	jmp	??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::~vector<TriangleIndices,std::allocator<TriangleIndices> >
__ehhandler$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z:
	mov	eax, OFFSET __ehfuncinfo$?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z ENDP ; MySphere::GenerateMesh
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_level$ = 8						; size = 4
_facesIn$ = 12						; size = 4
_facesOut$ = 16						; size = 4
_vertices$ = 20						; size = 4
?SubDivideTriangles@MySphere@@AAEXHPAV?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@0PAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@3@@Z PROC ; MySphere::SubDivideTriangles
; _this$ = ecx

; 131  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 132  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SubDivideTriangles@MySphere@@AAEXHPAV?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@0PAV?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@3@@Z ENDP ; MySphere::SubDivideTriangles
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 12
$T2 = -24						; size = 12
_this$ = -12						; size = 4
_j$3 = -8						; size = 4
_i$4 = -4						; size = 4
?InitFaces@MySphere@@AAEXXZ PROC			; MySphere::InitFaces
; _this$ = ecx

; 142  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 	/* Saving these so we know how to add faces.
; 144  : 	//m_faces is now a vector with 20 triangles.
; 145  : 
; 146  : 	//Triangle Fan Top = 0, 1, 2, 3, 4
; 147  : 	m_faces.push_back(MakeTIndices(5, 4, 9));
; 148  : 	m_faces.push_back(MakeTIndices(5, 9, 1));
; 149  : 	m_faces.push_back(MakeTIndices(5, 1, 0));
; 150  : 	m_faces.push_back(MakeTIndices(5, 0, 11));
; 151  : 	m_faces.push_back(MakeTIndices(5, 11, 4));
; 152  : 
; 153  : 	//Triangle Fan Bottom = 5, 6, 7, 8, 9
; 154  : 	m_faces.push_back(MakeTIndices(6, 3, 8));
; 155  : 	m_faces.push_back(MakeTIndices(6, 8, 7));
; 156  : 	m_faces.push_back(MakeTIndices(6, 7, 10));
; 157  : 	m_faces.push_back(MakeTIndices(6, 10, 2));
; 158  : 	m_faces.push_back(MakeTIndices(6, 2, 3));
; 159  : 
; 160  : 	//Triangle Strip = 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
; 161  : 	m_faces.push_back(MakeTIndices(4, 3, 9));
; 162  : 	m_faces.push_back(MakeTIndices(9, 3, 8));
; 163  : 	m_faces.push_back(MakeTIndices(9, 8, 1));
; 164  : 	m_faces.push_back(MakeTIndices(1, 8, 7));
; 165  : 	m_faces.push_back(MakeTIndices(1, 7, 0));
; 166  : 	m_faces.push_back(MakeTIndices(10, 7, 0));
; 167  : 	m_faces.push_back(MakeTIndices(11, 10, 0));
; 168  : 	m_faces.push_back(MakeTIndices(2, 10, 11));
; 169  : 	m_faces.push_back(MakeTIndices(4, 2, 11));
; 170  : 	m_faces.push_back(MakeTIndices(3, 2, 4));
; 171  : 
; 172  : 	//20 faces total.
; 173  : 	*/
; 174  : 
; 175  : 
; 176  : 	//Formulas to add faces to the plane.
; 177  : 	for (int i = 0; i < 128; i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@InitFaces
$LN2@InitFaces:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@InitFaces:
	cmp	DWORD PTR _i$4[ebp], 128		; 00000080H
	jge	$LN1@InitFaces

; 178  : 	{
; 179  : 		for (int j = 0; j < 128; j++)

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN7@InitFaces
$LN5@InitFaces:
	mov	ecx, DWORD PTR _j$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN7@InitFaces:
	cmp	DWORD PTR _j$3[ebp], 128		; 00000080H
	jge	$LN6@InitFaces

; 180  : 		{
; 181  : 			m_faces.push_back(MakeTIndices((129 * i) + j, (129 * i) + j + 1, (129 * (i+1)) + j + 1));

	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	imul	eax, edx, 129
	mov	ecx, DWORD PTR _j$3[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	imul	eax, DWORD PTR _i$4[ebp], 129
	mov	ecx, DWORD PTR _j$3[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	imul	eax, DWORD PTR _i$4[ebp], 129
	add	eax, DWORD PTR _j$3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeTIndices@MySphere@@AAE?AUTriangleIndices@@HHH@Z ; MySphere::MakeTIndices
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?push_back@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::push_back

; 182  : 			m_faces.push_back(MakeTIndices((129 * i) + j, (129 * (i + 1)) + j + 1, (129 * (i + 1)) + j));

	mov	edx, DWORD PTR _i$4[ebp]
	add	edx, 1
	imul	eax, edx, 129
	add	eax, DWORD PTR _j$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$4[ebp]
	add	ecx, 1
	imul	edx, ecx, 129
	mov	eax, DWORD PTR _j$3[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	imul	edx, DWORD PTR _i$4[ebp], 129
	add	edx, DWORD PTR _j$3[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeTIndices@MySphere@@AAE?AUTriangleIndices@@HHH@Z ; MySphere::MakeTIndices
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?push_back@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::push_back

; 183  : 		}

	jmp	$LN5@InitFaces
$LN6@InitFaces:

; 184  : 	}

	jmp	$LN2@InitFaces
$LN1@InitFaces:

; 185  : 
; 186  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitFaces@MySphere@@AAEXXZ ENDP			; MySphere::InitFaces
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
$T1 = -36						; size = 12
tv129 = -24						; size = 8
_pos$ = -16						; size = 4
_this$ = -12						; size = 4
_i$2 = -8						; size = 4
_j$3 = -4						; size = 4
?InitVertices@MySphere@@AAEXXZ PROC			; MySphere::InitVertices
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 192  :     m_vertices.clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ ; std::vector<STVector3,std::allocator<STVector3> >::clear

; 193  : 
; 194  :     float pos = (1.0 + sqrtf(5.0))/2.0;

	push	ecx
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	fstp	QWORD PTR tv129[ebp]
	movsd	xmm0, QWORD PTR tv129[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, QWORD PTR __real@4000000000000000
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _pos$[ebp], xmm0

; 195  : 
; 196  : 	for (int i = 0; i < 129; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@InitVertic
$LN2@InitVertic:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@InitVertic:
	cmp	DWORD PTR _i$2[ebp], 129		; 00000081H
	jge	SHORT $LN3@InitVertic

; 197  : 	{
; 198  : 		for (int j = 0; j < 129; j++)

	mov	DWORD PTR _j$3[ebp], 0
	jmp	SHORT $LN7@InitVertic
$LN5@InitVertic:
	mov	ecx, DWORD PTR _j$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN7@InitVertic:
	cmp	DWORD PTR _j$3[ebp], 129		; 00000081H
	jge	SHORT $LN6@InitVertic

; 199  : 		{
; 200  : 			m_vertices.push_back(STVector3(i * 0.2, 0, j * 0.2)); //Was i * 0.2, 0, j * 0.2

	cvtsi2sd xmm0, DWORD PTR _j$3[ebp]
	mulsd	xmm0, QWORD PTR __real@3fc999999999999a
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	cvtsi2sd xmm0, DWORD PTR _i$2[ebp]
	mulsd	xmm0, QWORD PTR __real@3fc999999999999a
	cvtsd2ss xmm0, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0STVector3@@QAE@MMM@Z			; STVector3::STVector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?push_back@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ; std::vector<STVector3,std::allocator<STVector3> >::push_back

; 201  : 		}

	jmp	SHORT $LN5@InitVertic
$LN6@InitVertic:

; 202  : 	}

	jmp	SHORT $LN2@InitVertic
$LN3@InitVertic:

; 203  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitVertices@MySphere@@AAEXXZ ENDP			; MySphere::InitVertices
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEXPAPAVSTTriangleMesh@@0@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Orphan_range
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@CAXXZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

	pop	ebp
	ret	0
?_Xlength@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@CAXXZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXXZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEXQAPAVSTTriangleMesh@@I@Z ; std::allocator<STTriangleMesh *>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXXZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXQAPAVSTTriangleMesh@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXQAPAVSTTriangleMesh@@II@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEXQAPAVSTTriangleMesh@@I@Z ; std::allocator<STTriangleMesh *>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	eax, DWORD PTR __Newvec$[ebp]
	lea	esi, DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

	mov	ecx, DWORD PTR __Newcapacity$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	esi, DWORD PTR [edx+ecx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1907 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXQAPAVSTTriangleMesh@@II@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAE_NI@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1873 : 		this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1874 : 		this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1875 : 		this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
	mov	DWORD PTR [eax], 0

; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

	cmp	DWORD PTR __Newcapacity$[ebp], 0
	jne	SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

	xor	al, al
	jmp	SHORT $LN4@Buy
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::max_size
	cmp	DWORD PTR __Newcapacity$[ebp], eax
	jbe	SHORT $LN3@Buy

; 1883 : 			{
; 1884 : 			_Xlength();

	call	?_Xlength@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@CAXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Xlength
$LN3@Buy:

; 1885 : 			}
; 1886 : 
; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEPAPAVSTTriangleMesh@@I@Z ; std::allocator<STTriangleMesh *>::allocate
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	DWORD PTR [eax], esi

; 1888 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR __Newcapacity$[ebp]
	lea	esi, DWORD PTR [edx+eax*4]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1890 : 
; 1891 : 		return (true);

	mov	al, 1
$LN4@Buy:

; 1892 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAE_NI@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
_this$ = -8						; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEII@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABEII@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAXPAPAVSTTriangleMesh@@0AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ; std::_Destroy_range<std::allocator<STTriangleMesh *> >
	add	esp, 12					; 0000000cH

; 1850 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00U?$integral_constant@_N$00@2@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ; std::_Uninitialized_move<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >
	add	esp, 16					; 00000010H

; 1834 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV3@00@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAPAVSTTriangleMesh@@PAPAV1@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@YAPAPAVSTTriangleMesh@@QAPAV1@0PAPAV1@AAV?$allocator@PAVSTTriangleMesh@@@0@@Z ; std::_Uninitialized_move<STTriangleMesh * *,STTriangleMesh * *,std::allocator<STTriangleMesh *> >
	add	esp, 16					; 00000010H

; 1829 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV3@00@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??A?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEAAPAVSTTriangleMesh@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEAAPAVSTTriangleMesh@@I@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::operator[], COMDAT
; _this$ = ecx

; 1731 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 1732 :  #if _ITERATOR_DEBUG_LEVEL != 0
; 1733 : 		_STL_VERIFY(_Pos < size(), "vector subscript out of range");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_0GH@FKAHJGEE@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	1733					; 000006c5H
	push	OFFSET ??_C@_1MO@OJBMIJHH@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1LO@PDFJBEGL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	edx, edx
	jne	SHORT $LN4@operator

; 1734 :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 1735 : 
; 1736 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]

; 1737 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEAAPAVSTTriangleMesh@@I@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABE_NXZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1727 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@ABE_NXZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx

; 1716 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAIABV?$allocator@PAVSTTriangleMesh@@@2@@Z ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	eax, ecx

; 1705 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::clear, COMDAT
; _this$ = ecx

; 1589 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1590 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Orphan_all

; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXPAPAVSTTriangleMesh@@0@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Destroy

; 1592 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1593 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXXZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::clear
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::push_back, COMDAT
; _this$ = ecx

; 931  : 		{	// insert element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 932  : 		emplace_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@ABQAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::emplace_back<STTriangleMesh * const &>

; 933  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::~vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Tidy

; 895  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::~_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::~vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SA?AV?$allocator@PAVSTTriangleMesh@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@PAVSTTriangleMesh@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@$$QAV?$allocator@PAVSTTriangleMesh@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > ><std::allocator<STTriangleMesh *>,void>
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 735  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QBEIXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAE_NI@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@vector

; 736  : 			{	// nonzero, fill it
; 737  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAPAVSTTriangleMesh@@@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEPAPAVSTTriangleMesh@@PAPAV2@00@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Ucopy<STTriangleMesh * *>
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z$0:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@AAEXXZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::_Tidy

; 741  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 742  : 			_CATCH_END

	mov	eax, $LN9@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN1@vector
$LN9@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN1@vector:

; 743  : 			}
; 744  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::~_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >
__ehhandler$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ PROC ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >

; 652  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ENDP ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<STTriangleMesh *> >::_Vector_val<std::_Simple_types<STTriangleMesh *> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 391  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 393  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<STTriangleMesh *> >::_Vector_val<std::_Simple_types<STTriangleMesh *> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	add	eax, 12					; 0000000cH

; 602  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	add	eax, 12					; 0000000cH

; 597  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	add	eax, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	add	eax, 8

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	add	eax, 4

; 582  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABQAPAVSTTriangleMesh@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	add	eax, 4

; 577  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAPAVSTTriangleMesh@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second

; 561  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_second

; 556  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first

; 551  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$allocator@PAVSTTriangleMesh@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Get_first

; 546  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0PAVSTTriangleMesh@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVSTTriangleMesh@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STTriangleMesh *>

; 511  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 514  : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 515  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$allocator@PAVSTTriangleMesh@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0PAVSTTriangleMesh@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@PAVSTTriangleMesh@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STTriangleMesh *>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<STTriangleMesh *> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 506  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::~_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Free_proxy

; 462  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::~_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@PAVSTTriangleMesh@@@std@@V?$_Vector_val@U?$_Simple_types@PAVSTTriangleMesh@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1>::_Compressed_pair<std::allocator<STTriangleMesh *>,std::_Vector_val<std::_Simple_types<STTriangleMesh *> >,1><>

; 447  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Alloc_proxy

; 448  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >::_Vector_alloc<std::_Vec_base_types<STTriangleMesh *,std::allocator<STTriangleMesh *> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SA?AV?$allocator@PAVSTTriangleMesh@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SA?AV?$allocator@PAVSTTriangleMesh@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 897  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SA?AV?$allocator@PAVSTTriangleMesh@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAIABV?$allocator@PAVSTTriangleMesh@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAIABV?$allocator@PAVSTTriangleMesh@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 1073741823				; 3fffffffH

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@SAIABV?$allocator@PAVSTTriangleMesh@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STTriangleMesh *> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEPAPAVSTTriangleMesh@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEPAPAVSTTriangleMesh@@I@Z PROC ; std::allocator<STTriangleMesh *>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$03@std@@YAII@Z	; std::_Get_size_of_n<4>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEPAPAVSTTriangleMesh@@I@Z ENDP ; std::allocator<STTriangleMesh *>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEXQAPAVSTTriangleMesh@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEXQAPAVSTTriangleMesh@@I@Z PROC ; std::allocator<STTriangleMesh *>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@PAVSTTriangleMesh@@@std@@QAEXQAPAVSTTriangleMesh@@I@Z ENDP ; std::allocator<STTriangleMesh *>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@PAVSTTriangleMesh@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@PAVSTTriangleMesh@@@std@@QAE@XZ PROC	; std::allocator<STTriangleMesh *>::allocator<STTriangleMesh *>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@PAVSTTriangleMesh@@@std@@QAE@XZ ENDP	; std::allocator<STTriangleMesh *>::allocator<STTriangleMesh *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEXPAUTriangleIndices@@0@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Orphan_range
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xrange@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xrange, COMDAT

; 1930 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp

; 1931 : 		_Xout_of_range("invalid vector<T> subscript");

	push	OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xrange:

; 1932 : 		}

	pop	ebp
	ret	0
?_Xrange@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

	pop	ebp
	ret	0
?_Xlength@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXXZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@0@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@UTriangleIndices@@@std@@QAEXQAUTriangleIndices@@I@Z ; std::allocator<TriangleIndices>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXXZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXQAUTriangleIndices@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXQAUTriangleIndices@@II@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@0@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@UTriangleIndices@@@std@@QAEXQAUTriangleIndices@@I@Z ; std::allocator<TriangleIndices>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

	imul	esi, DWORD PTR __Newsize$[ebp], 12
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

	imul	esi, DWORD PTR __Newcapacity$[ebp], 12
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1907 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXQAUTriangleIndices@@II@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAE_NI@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1873 : 		this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1874 : 		this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1875 : 		this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
	mov	DWORD PTR [eax], 0

; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

	cmp	DWORD PTR __Newcapacity$[ebp], 0
	jne	SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

	xor	al, al
	jmp	SHORT $LN4@Buy
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::max_size
	cmp	DWORD PTR __Newcapacity$[ebp], eax
	jbe	SHORT $LN3@Buy

; 1883 : 			{
; 1884 : 			_Xlength();

	call	?_Xlength@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xlength
$LN3@Buy:

; 1885 : 			}
; 1886 : 
; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$allocator@UTriangleIndices@@@std@@QAEPAUTriangleIndices@@I@Z ; std::allocator<TriangleIndices>::allocate
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	DWORD PTR [eax], esi

; 1888 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	imul	esi, DWORD PTR __Newcapacity$[ebp], 12
	add	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1890 : 
; 1891 : 		return (true);

	mov	al, 1
$LN4@Buy:

; 1892 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAE_NI@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
_this$ = -8						; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEII@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABEII@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@0@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@UTriangleIndices@@@std@@@std@@YAXPAUTriangleIndices@@0AAV?$allocator@UTriangleIndices@@@0@@Z ; std::_Destroy_range<std::allocator<TriangleIndices> >
	add	esp, 12					; 0000000cH

; 1850 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@0@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00U?$integral_constant@_N$00@2@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z ; std::_Uninitialized_move<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >
	add	esp, 16					; 00000010H

; 1834 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXPAUTriangleIndices@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU3@00@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUTriangleIndices@@PAU1@V?$allocator@UTriangleIndices@@@std@@@std@@YAPAUTriangleIndices@@QAU1@0PAU1@AAV?$allocator@UTriangleIndices@@@0@@Z ; std::_Uninitialized_move<TriangleIndices *,TriangleIndices *,std::allocator<TriangleIndices> >
	add	esp, 16					; 00000010H

; 1829 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU3@00@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?at@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEAAUTriangleIndices@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
?at@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEAAUTriangleIndices@@I@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::at, COMDAT
; _this$ = ecx

; 1749 : 		{	// subscript mutable sequence with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1750 : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@at

; 1751 : 			{
; 1752 : 			_Xrange();

	call	?_Xrange@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@CAXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Xrange
$LN2@at:

; 1753 : 			}
; 1754 : 
; 1755 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	imul	ecx, DWORD PTR __Pos$[ebp], 12
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx
$LN3@at:

; 1756 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?at@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEAAUTriangleIndices@@I@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::at
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABE_NXZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1727 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@ABE_NXZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx

; 1716 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAIABV?$allocator@UTriangleIndices@@@2@@Z ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx

; 1705 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 		emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAUTriangleIndices@@@std@@YA$$QAUTriangleIndices@@AAU1@@Z ; std::move<TriangleIndices &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@UTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::emplace_back<TriangleIndices>

; 938  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAEX$$QAUTriangleIndices@@@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::~vector<TriangleIndices,std::allocator<TriangleIndices> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Tidy

; 895  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::~_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::~vector<TriangleIndices,std::allocator<TriangleIndices> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SA?AV?$allocator@UTriangleIndices@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@UTriangleIndices@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UTriangleIndices@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > ><std::allocator<TriangleIndices>,void>
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 735  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAE_NI@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@vector

; 736  : 			{	// nonzero, fill it
; 737  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUTriangleIndices@@@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEPAUTriangleIndices@@PAU2@00@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Ucopy<TriangleIndices *>
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z$0:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@AAEXXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::_Tidy

; 741  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 742  : 			_CATCH_END

	mov	eax, $LN9@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN1@vector
$LN9@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN1@vector:

; 743  : 			}
; 744  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::~_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >
__ehhandler$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ PROC ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >

; 652  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ENDP ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<TriangleIndices> >::_Vector_val<std::_Simple_types<TriangleIndices> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 391  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 393  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<TriangleIndices> >::_Vector_val<std::_Simple_types<TriangleIndices> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	add	eax, 12					; 0000000cH

; 602  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	add	eax, 12					; 0000000cH

; 597  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	add	eax, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	add	eax, 8

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	add	eax, 4

; 582  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABQAUTriangleIndices@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	add	eax, 4

; 577  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAUTriangleIndices@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second

; 561  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_second

; 556  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first

; 551  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$allocator@UTriangleIndices@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Get_first

; 546  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0UTriangleIndices@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UTriangleIndices@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><TriangleIndices>

; 511  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 514  : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 515  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$allocator@UTriangleIndices@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0UTriangleIndices@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@UTriangleIndices@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><TriangleIndices>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<TriangleIndices> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 506  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::~_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Free_proxy

; 462  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::~_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@UTriangleIndices@@@std@@V?$_Vector_val@U?$_Simple_types@UTriangleIndices@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1>::_Compressed_pair<std::allocator<TriangleIndices>,std::_Vector_val<std::_Simple_types<TriangleIndices> >,1><>

; 447  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Alloc_proxy

; 448  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >::_Vector_alloc<std::_Vec_base_types<TriangleIndices,std::allocator<TriangleIndices> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SA?AV?$allocator@UTriangleIndices@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SA?AV?$allocator@UTriangleIndices@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 897  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SA?AV?$allocator@UTriangleIndices@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAIABV?$allocator@UTriangleIndices@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAIABV?$allocator@UTriangleIndices@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 357913941				; 15555555H

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@UTriangleIndices@@@std@@@std@@SAIABV?$allocator@UTriangleIndices@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<TriangleIndices> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@UTriangleIndices@@@std@@QAEPAUTriangleIndices@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@UTriangleIndices@@@std@@QAEPAUTriangleIndices@@I@Z PROC ; std::allocator<TriangleIndices>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0M@@std@@YAII@Z	; std::_Get_size_of_n<12>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@UTriangleIndices@@@std@@QAEPAUTriangleIndices@@I@Z ENDP ; std::allocator<TriangleIndices>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UTriangleIndices@@@std@@QAEXQAUTriangleIndices@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UTriangleIndices@@@std@@QAEXQAUTriangleIndices@@I@Z PROC ; std::allocator<TriangleIndices>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 12
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@UTriangleIndices@@@std@@QAEXQAUTriangleIndices@@I@Z ENDP ; std::allocator<TriangleIndices>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@UTriangleIndices@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@UTriangleIndices@@@std@@QAE@XZ PROC	; std::allocator<TriangleIndices>::allocator<TriangleIndices>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@UTriangleIndices@@@std@@QAE@XZ ENDP	; std::allocator<TriangleIndices>::allocator<TriangleIndices>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1936 : 		{	// orphan iterators within specified (inclusive) range

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1937 : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1938 : 
; 1939 : 		const_iterator ** _Pnext = reinterpret_cast<const_iterator **>(this->_Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getpfirst
	mov	DWORD PTR __Pnext$[ebp], eax

; 1940 : 
; 1941 : 		if (_Pnext)

	cmp	DWORD PTR __Pnext$[ebp], 0
	je	SHORT $LN4@Orphan_ran
$LN2@Orphan_ran:

; 1942 : 			{
; 1943 : 			while (*_Pnext)

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Orphan_ran

; 1944 : 				{
; 1945 : 				if ((*_Pnext)->_Ptr < _First || _Last < (*_Pnext)->_Ptr)

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN7@Orphan_ran
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	jae	SHORT $LN5@Orphan_ran
$LN7@Orphan_ran:

; 1946 : 					{	// skip the iterator
; 1947 : 					_Pnext = reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	DWORD PTR __Pnext$[ebp], eax

; 1948 : 					}
; 1949 : 				else

	jmp	SHORT $LN6@Orphan_ran
$LN5@Orphan_ran:

; 1950 : 					{	// orphan the iterator
; 1951 : 					(*_Pnext)->_Clrcont();

	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	; std::_Iterator_base12::_Clrcont

; 1952 : 					*_Pnext = *reinterpret_cast<const_iterator **>((*_Pnext)->_Getpnext());

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ; std::_Iterator_base12::_Getpnext
	mov	ecx, DWORD PTR __Pnext$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN6@Orphan_ran:

; 1953 : 					}
; 1954 : 				}

	jmp	SHORT $LN2@Orphan_ran
$LN4@Orphan_ran:

; 1955 : 			}
; 1956 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z$0:
	lea	ecx, DWORD PTR __Lock$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__ehhandler$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEXPAUSTVector3@@0@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Orphan_range
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xrange@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xrange@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Xrange, COMDAT

; 1930 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp

; 1931 : 		_Xout_of_range("invalid vector<T> subscript");

	push	OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xrange:

; 1932 : 		}

	pop	ebp
	ret	0
?_Xrange@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Xrange
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Xlength@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Xlength, COMDAT

; 1925 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 1926 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlength:

; 1927 : 		}

	pop	ebp
	ret	0
?_Xlength@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1911 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Orphan_all

; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Destroy

; 1916 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@USTVector3@@@std@@QAEXQAUSTVector3@@I@Z ; std::allocator<STVector3>::deallocate

; 1917 : 
; 1918 : 			this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1919 : 			this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1920 : 			this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
	mov	DWORD PTR [eax], 0
$LN1@Tidy:

; 1921 : 			}
; 1922 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXQAUSTVector3@@II@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXQAUSTVector3@@II@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1896 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Orphan_all

; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 1899 : 			{	// destroy and deallocate old array
; 1900 : 			_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Destroy

; 1901 : 			this->_Getal().deallocate(this->_Myfirst(), capacity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::capacity
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$allocator@USTVector3@@@std@@QAEXQAUSTVector3@@I@Z ; std::allocator<STVector3>::deallocate
$LN2@Change_arr:

; 1902 : 			}
; 1903 : 
; 1904 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

	imul	esi, DWORD PTR __Newsize$[ebp], 12
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	DWORD PTR [eax], esi

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

	imul	esi, DWORD PTR __Newcapacity$[ebp], 12
	add	esi, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1907 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXQAUSTVector3@@II@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAE_NI@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1873 : 		this->_Myfirst() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	DWORD PTR [eax], 0

; 1874 : 		this->_Mylast() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	DWORD PTR [eax], 0

; 1875 : 		this->_Myend() = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
	mov	DWORD PTR [eax], 0

; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

	cmp	DWORD PTR __Newcapacity$[ebp], 0
	jne	SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

	xor	al, al
	jmp	SHORT $LN4@Buy
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::max_size
	cmp	DWORD PTR __Newcapacity$[ebp], eax
	jbe	SHORT $LN3@Buy

; 1883 : 			{
; 1884 : 			_Xlength();

	call	?_Xlength@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Xlength
$LN3@Buy:

; 1885 : 			}
; 1886 : 
; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$allocator@USTVector3@@@std@@QAEPAUSTVector3@@I@Z ; std::allocator<STVector3>::allocate
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	DWORD PTR [eax], esi

; 1888 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	imul	esi, DWORD PTR __Newcapacity$[ebp], 12
	add	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
	mov	DWORD PTR [eax], esi

; 1890 : 
; 1891 : 		return (true);

	mov	al, 1
$LN4@Buy:

; 1892 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAE_NI@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -12					; size = 4
_this$ = -8						; size = 4
__Oldcapacity$ = -4					; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEII@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1854 : 		const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::max_size
	mov	ecx, DWORD PTR __Oldcapacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	DWORD PTR __Oldcapacity$[ebp], eax
	jbe	SHORT $LN2@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	edx, DWORD PTR __Oldcapacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], edx

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1869 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABEII@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Destroy, COMDAT
; _this$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Destroy_range@V?$allocator@USTVector3@@@std@@@std@@YAXPAUSTVector3@@0AAV?$allocator@USTVector3@@@0@@Z ; std::_Destroy_range<std::allocator<STVector3> >
	add	esp, 12					; 0000000cH

; 1850 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Umove_if_noexcept1@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00U?$integral_constant@_N$0A@@2@@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept1

; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00U?$integral_constant@_N$0A@@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00U?$integral_constant@_N$0A@@2@@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1837 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1838 : 		_Uninitialized_copy(_First, _Last, _Dest, this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_copy@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z ; std::_Uninitialized_copy<STVector3 *,STVector3 *,std::allocator<STVector3> >
	add	esp, 16					; 00000010H

; 1839 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@00U?$integral_constant@_N$0A@@2@@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU3@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU3@00@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Umove, COMDAT
; _this$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Uninitialized_move@PAUSTVector3@@PAU1@V?$allocator@USTVector3@@@std@@@std@@YAPAUSTVector3@@QAU1@0PAU1@AAV?$allocator@USTVector3@@@0@@Z ; std::_Uninitialized_move<STVector3 *,STVector3 *,std::allocator<STVector3> >
	add	esp, 16					; 00000010H

; 1829 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU3@00@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Umove
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Pos$ = 8						; size = 4
?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::at, COMDAT
; _this$ = ecx

; 1749 : 		{	// subscript mutable sequence with checking

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1750 : 		if (size() <= _Pos)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::size
	cmp	eax, DWORD PTR __Pos$[ebp]
	ja	SHORT $LN2@at

; 1751 : 			{
; 1752 : 			_Xrange();

	call	?_Xrange@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@CAXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Xrange
$LN2@at:

; 1753 : 			}
; 1754 : 
; 1755 : 		return (this->_Myfirst()[_Pos]);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	imul	ecx, DWORD PTR __Pos$[ebp], 12
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx
$LN3@at:

; 1756 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::at
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
tv77 = -8						; size = 4
_this$ = -4						; size = 4
?_Has_unused_capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABE_NXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1725 : 		{	// micro-optimization for capacity() != size()

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	ecx, DWORD PTR [esi]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Has_unused
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@Has_unused
$LN3@Has_unused:
	mov	DWORD PTR tv77[ebp], 0
$LN4@Has_unused:
	mov	al, BYTE PTR tv77[ebp]

; 1727 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Has_unused_capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@ABE_NXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::capacity, COMDAT
; _this$ = ecx

; 1714 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx

; 1716 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::max_size, COMDAT
; _this$ = ecx

; 1708 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAIABV?$allocator@USTVector3@@@2@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::size, COMDAT
; _this$ = ecx

; 1703 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR [esi]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 12					; 0000000cH
	idiv	ecx

; 1705 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::clear, COMDAT
; _this$ = ecx

; 1589 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1590 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Orphan_all

; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXPAUSTVector3@@0@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Destroy

; 1592 : 		this->_Mylast() = this->_Myfirst();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx

; 1593 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?clear@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEXXZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::clear
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 		emplace_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAUSTVector3@@@std@@YA$$QAUSTVector3@@AAU1@@Z ; std::move<STVector3 &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$emplace_back@USTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ; std::vector<STVector3,std::allocator<STVector3> >::emplace_back<STVector3>

; 938  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEX$$QAUSTVector3@@@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::~vector<STVector3,std::allocator<STVector3> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 894  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Tidy

; 895  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::~_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::~vector<STVector3,std::allocator<STVector3> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
tv69 = -28						; size = 4
_this$ = -24						; size = 4
$T2 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SA?AV?$allocator@USTVector3@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<STVector3> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@USTVector3@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@$$QAV?$allocator@USTVector3@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > ><std::allocator<STVector3>,void>
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 735  : 		if (_Buy(_Right.size()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QBEIXZ ; std::vector<STVector3,std::allocator<STVector3> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAE_NI@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Buy
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@vector

; 736  : 			{	// nonzero, fill it
; 737  : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAUSTVector3@@@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEPAUSTVector3@@PAU2@00@Z ; std::vector<STVector3,std::allocator<STVector3> >::_Ucopy<STVector3 *>
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
	mov	edx, DWORD PTR tv69[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN5@vector
__catch$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z$0:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@AAEXXZ ; std::vector<STVector3,std::allocator<STVector3> >::_Tidy

; 741  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 742  : 			_CATCH_END

	mov	eax, $LN9@vector
	ret	0
$LN5@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN1@vector
$LN9@vector:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN1@vector:

; 743  : 			}
; 744  : 		}

	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::~_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >
__ehhandler$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ PROC ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >, COMDAT
; _this$ = ecx

; 651  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >

; 652  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ENDP ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$allocator@USTVector3@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$allocator@USTVector3@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$allocator@USTVector3@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$allocator@USTVector3@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$allocator@USTVector3@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<STVector3> >::_Vector_val<std::_Simple_types<STVector3> >, COMDAT
; _this$ = ecx

; 392  : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 389  : 		: _Myfirst(),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 390  : 		_Mylast(),

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 391  : 		_Myend()

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0

; 393  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<STVector3> >::_Vector_val<std::_Simple_types<STVector3> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend, COMDAT
; _this$ = ecx

; 600  : 		{	// return const reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 601  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	add	eax, 12					; 0000000cH

; 602  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend, COMDAT
; _this$ = ecx

; 595  : 		{	// return reference to _Myend

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 596  : 		return (_Get_data()._Myend);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	add	eax, 12					; 0000000cH

; 597  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast, COMDAT
; _this$ = ecx

; 590  : 		{	// return const reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	add	eax, 8

; 592  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast, COMDAT
; _this$ = ecx

; 585  : 		{	// return reference to _Mylast

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return (_Get_data()._Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	add	eax, 8

; 587  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst, COMDAT
; _this$ = ecx

; 580  : 		{	// return const reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 581  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	add	eax, 4

; 582  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABQAUSTVector3@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst, COMDAT
; _this$ = ecx

; 575  : 		{	// return reference to _Myfirst

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 576  : 		return (_Get_data()._Myfirst);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	add	eax, 4

; 577  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAUSTVector3@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data, COMDAT
; _this$ = ecx

; 559  : 		{	// return const reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 560  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second

; 561  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data, COMDAT
; _this$ = ecx

; 554  : 		{	// return reference to _Vector_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 555  : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_second

; 556  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$allocator@USTVector3@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$allocator@USTVector3@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal, COMDAT
; _this$ = ecx

; 549  : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 550  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QBEABV?$allocator@USTVector3@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first

; 551  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$allocator@USTVector3@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal, COMDAT
; _this$ = ecx

; 544  : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Get_first

; 546  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 534  : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 535  : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 536  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy, COMDAT
; _this$ = ecx

; 523  : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 524  : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data

; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getpfirst, COMDAT
; _this$ = ecx

; 518  : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 519  : 		return (_Get_data()._Getpfirst());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	mov	ecx, eax
	call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ; std::_Container_base12::_Getpfirst

; 520  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 509  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0USTVector3@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USTVector3@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STVector3>

; 511  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Orphan_all

; 512  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 513  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 514  : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 515  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 501  : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 502  : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$allocator@USTVector3@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0USTVector3@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@USTVector3@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><STVector3>

; 503  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 504  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 505  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Get_data
	push	eax
	call	??$addressof@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<STVector3> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 506  : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::~_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >, COMDAT
; _this$ = ecx

; 460  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 461  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Free_proxy

; 462  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::~_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >, COMDAT
; _this$ = ecx

; 446  : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@USTVector3@@@std@@V?$_Vector_val@U?$_Simple_types@USTVector3@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1>::_Compressed_pair<std::allocator<STVector3>,std::_Vector_val<std::_Simple_types<STVector3> >,1><>

; 447  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Alloc_proxy

; 448  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >::_Vector_alloc<std::_Vec_base_types<STVector3,std::allocator<STVector3> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SA?AV?$allocator@USTVector3@@@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SA?AV?$allocator@USTVector3@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<STVector3> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 897  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SA?AV?$allocator@USTVector3@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STVector3> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAIABV?$allocator@USTVector3@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAIABV?$allocator@USTVector3@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<STVector3> >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	mov	eax, 357913941				; 15555555H

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@USTVector3@@@std@@@std@@SAIABV?$allocator@USTVector3@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<STVector3> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@USTVector3@@@std@@QAEPAUSTVector3@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@USTVector3@@@std@@QAEPAUSTVector3@@I@Z PROC ; std::allocator<STVector3>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0M@@std@@YAII@Z	; std::_Get_size_of_n<12>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@USTVector3@@@std@@QAEPAUSTVector3@@I@Z ENDP ; std::allocator<STVector3>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@USTVector3@@@std@@QAEXQAUSTVector3@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@USTVector3@@@std@@QAEXQAUSTVector3@@I@Z PROC ; std::allocator<STVector3>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 12
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@USTVector3@@@std@@QAEXQAUSTVector3@@I@Z ENDP ; std::allocator<STVector3>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@USTVector3@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@USTVector3@@@std@@QAE@XZ PROC		; std::allocator<STVector3>::allocator<STVector3>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@USTVector3@@@std@@QAE@XZ ENDP		; std::allocator<STVector3>::allocator<STVector3>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FileName@MySphere@@QAEPADXZ PROC			; MySphere::FileName
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :     return(m_pFileName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 39   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FileName@MySphere@@QAEPADXZ ENDP			; MySphere::FileName
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?GetTriangleMesh@MySphere@@QAEPAVSTTriangleMesh@@H@Z PROC ; MySphere::GetTriangleMesh
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 273  :     return(m_TriangleMeshes[id]);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEAAPAVSTTriangleMesh@@I@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::operator[]
	mov	eax, DWORD PTR [eax]

; 274  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTriangleMesh@MySphere@@QAEPAVSTTriangleMesh@@H@Z ENDP ; MySphere::GetTriangleMesh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTriangleMesh@MySphere@@QAE?AV?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@XZ PROC ; MySphere::GetTriangleMesh
; _this$ = ecx

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 263  :     return(m_TriangleMeshes);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@ABV01@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 264  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetTriangleMesh@MySphere@@QAE?AV?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@XZ ENDP ; MySphere::GetTriangleMesh
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
$T2 = -64						; size = 4
tv190 = -60						; size = 4
$T3 = -56						; size = 4
$T4 = -52						; size = 4
_temp$5 = -48						; size = 4
_yArray$ = -44						; size = 4
_dog$ = -40						; size = 4
tv142 = -36						; size = 4
$T6 = -32						; size = 4
_arrayMan$ = -28					; size = 4
_j$7 = -24						; size = 4
_i$8 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_levels$ = 8						; size = 4
?Create@MySphere@@QAEXH@Z PROC				; MySphere::Create
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@MySphere@@QAEXH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 52					; 00000034H
	mov	DWORD PTR _this$[ebp], ecx

; 210  :     m_globalCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 211  : 
; 212  :     InitVertices();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitVertices@MySphere@@AAEXXZ		; MySphere::InitVertices

; 213  : 	InitFaces();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitFaces@MySphere@@AAEXXZ		; MySphere::InitFaces

; 214  : 	std::cout << "Number of Faces: " << m_faces.size() << '\n'; 

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QBEIXZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::size
	push	eax
	push	OFFSET $SG41036
	push	OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8
	mov	ecx, eax
	call	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
	push	eax
	call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ; std::operator<<<std::char_traits<char> >
	add	esp, 8

; 215  : 
; 216  : 	//Creating our DiamondSquare Array
; 217  : 	DiamondSquare arrayMan = DiamondSquare();

	lea	ecx, DWORD PTR _arrayMan$[ebp]
	call	??0DiamondSquare@@QAE@XZ		; DiamondSquare::DiamondSquare
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 218  : 	arrayMan.buildArray();

	lea	ecx, DWORD PTR _arrayMan$[ebp]
	call	?buildArray@DiamondSquare@@QAEXXZ	; DiamondSquare::buildArray

; 219  : 	float ** yArray = arrayMan.getArray();

	lea	ecx, DWORD PTR _arrayMan$[ebp]
	call	?getArray@DiamondSquare@@QAEPAPAMXZ	; DiamondSquare::getArray
	mov	DWORD PTR _yArray$[ebp], eax

; 220  : 
; 221  : 	//Changing the Y values of the vertices with the DiamondSquare Array
; 222  : 	for (int i = 0; i < 129; i++)

	mov	DWORD PTR _i$8[ebp], 0
	jmp	SHORT $LN4@Create
$LN2@Create:
	mov	ecx, DWORD PTR _i$8[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$8[ebp], ecx
$LN4@Create:
	cmp	DWORD PTR _i$8[ebp], 129		; 00000081H
	jge	SHORT $LN3@Create

; 223  : 	{
; 224  : 		for (int j = 0; j < 129; j++)

	mov	DWORD PTR _j$7[ebp], 0
	jmp	SHORT $LN7@Create
$LN5@Create:
	mov	edx, DWORD PTR _j$7[ebp]
	add	edx, 1
	mov	DWORD PTR _j$7[ebp], edx
$LN7@Create:
	cmp	DWORD PTR _j$7[ebp], 129		; 00000081H
	jge	SHORT $LN6@Create

; 225  : 		{
; 226  : 			float temp = yArray[i][j];

	mov	eax, DWORD PTR _i$8[ebp]
	mov	ecx, DWORD PTR _yArray$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _j$7[ebp]
	movss	xmm0, DWORD PTR [edx+eax*4]
	movss	DWORD PTR _temp$5[ebp], xmm0

; 227  : 
; 228  : 			m_vertices.at((129 * i) + j).y = temp;

	imul	ecx, DWORD PTR _i$8[ebp], 129
	add	ecx, DWORD PTR _j$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?at@?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAEAAUSTVector3@@I@Z ; std::vector<STVector3,std::allocator<STVector3> >::at
	movss	xmm0, DWORD PTR _temp$5[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 229  : 		}

	jmp	SHORT $LN5@Create
$LN6@Create:

; 230  : 	}

	jmp	SHORT $LN2@Create
$LN3@Create:

; 231  : 
; 232  : 
; 233  : 	STTriangleMesh* dog = new STTriangleMesh();

	push	172					; 000000acH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN9@Create
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0STTriangleMesh@@QAE@XZ		; STTriangleMesh::STTriangleMesh
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN10@Create
$LN9@Create:
	mov	DWORD PTR tv142[ebp], 0
$LN10@Create:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR _dog$[ebp], eax

; 234  : 	GenerateMesh(dog, m_faces, m_vertices, 0);

	push	0
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@ABV01@@Z ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >
	mov	DWORD PTR tv190[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	sub	esp, 16					; 00000010H
	mov	ecx, esp
	mov	DWORD PTR $T2[ebp], esp
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@ABV01@@Z ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >
	mov	ecx, DWORD PTR _dog$[ebp]
	push	ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GenerateMesh@MySphere@@AAEXPAVSTTriangleMesh@@V?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@V?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@4@H@Z ; MySphere::GenerateMesh

; 235  : 
; 236  : 	m_TriangleMeshes.push_back(dog);

	lea	edx, DWORD PTR _dog$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?push_back@?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAEXABQAVSTTriangleMesh@@@Z ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::push_back

; 237  : 	
; 238  : 
; 239  :     // save the file
; 240  :     Save(m_pFileName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Save@MySphere@@AAEXPAD@Z		; MySphere::Save

; 241  : 
; 242  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _arrayMan$[ebp]
	call	??1DiamondSquare@@QAE@XZ		; DiamondSquare::~DiamondSquare
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Create@MySphere@@QAEXH@Z$0:
	lea	ecx, DWORD PTR _arrayMan$[ebp]
	jmp	??1DiamondSquare@@QAE@XZ		; DiamondSquare::~DiamondSquare
__unwindfunclet$?Create@MySphere@@QAEXH@Z$1:
	push	172					; 000000acH
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Create@MySphere@@QAEXH@Z$2:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::vector<STVector3,std::allocator<STVector3> >::~vector<STVector3,std::allocator<STVector3> >
__ehhandler$?Create@MySphere@@QAEXH@Z:
	mov	eax, OFFSET __ehfuncinfo$?Create@MySphere@@QAEXH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@MySphere@@QAEXH@Z ENDP				; MySphere::Create
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1MySphere@@QAE@XZ PROC				; MySphere::~MySphere
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1MySphere@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 32   :     ClearMesh();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearMesh@MySphere@@AAEXXZ		; MySphere::ClearMesh

; 33   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::~vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::~vector<TriangleIndices,std::allocator<TriangleIndices> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::vector<STVector3,std::allocator<STVector3> >::~vector<STVector3,std::allocator<STVector3> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1MySphere@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1MySphere@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1MySphere@@QAE@XZ ENDP				; MySphere::~MySphere
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MySphere@@QAE@XZ PROC				; MySphere::MySphere
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$vector@USTVector3@@V?$allocator@USTVector3@@@std@@@std@@QAE@XZ ; std::vector<STVector3,std::allocator<STVector3> >::vector<STVector3,std::allocator<STVector3> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$vector@UTriangleIndices@@V?$allocator@UTriangleIndices@@@std@@@std@@QAE@XZ ; std::vector<TriangleIndices,std::allocator<TriangleIndices> >::vector<TriangleIndices,std::allocator<TriangleIndices> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$vector@PAVSTTriangleMesh@@V?$allocator@PAVSTTriangleMesh@@@std@@@std@@QAE@XZ ; std::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >::vector<STTriangleMesh *,std::allocator<STTriangleMesh *> >

; 18   :     : m_globalCount (0),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0

; 19   :       m_levels      (1)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 1

; 21   :     // set the output fileneame
; 22   :     m_pFileName = "../../data/meshes/mysphere.obj";

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], OFFSET $SG40793

; 23   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0MySphere@@QAE@XZ ENDP				; MySphere::MySphere
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSTTriangleMesh@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSTTriangleMesh@@QAEPAXI@Z PROC			; STTriangleMesh::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1STTriangleMesh@@QAE@XZ		; STTriangleMesh::~STTriangleMesh
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	172					; 000000acH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSTTriangleMesh@@QAEPAXI@Z ENDP			; STTriangleMesh::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
_TEXT	SEGMENT
__Ok$ = -112						; size = 8
tv311 = -104						; size = 8
tv128 = -96						; size = 8
__Pad$2 = -88						; size = 8
$T3 = -80						; size = 4
$T4 = -76						; size = 4
$T5 = -72						; size = 4
tv279 = -68						; size = 4
tv278 = -64						; size = 4
$T6 = -60						; size = 4
$T7 = -56						; size = 4
tv276 = -52						; size = 4
tv275 = -48						; size = 4
$T8 = -44						; size = 4
$T9 = -40						; size = 4
tv274 = -36						; size = 4
tv273 = -32						; size = 4
tv65 = -28						; size = 4
__State$ = -24						; size = 4
tv277 = -18						; size = 1
tv272 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Ch$ = 12						; size = 1
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 836  : 	{	// insert a char into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 96					; 00000060H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp

; 837  : 	typedef char _Elem;
; 838  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 839  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 840  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 841  : 
; 842  : 	if (_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN8@operator

; 843  : 		{	// state okay, insert
; 844  : 		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv311[ebp], eax
	mov	DWORD PTR tv311[ebp+4], edx
	cmp	DWORD PTR tv311[ebp+4], 0
	jg	SHORT $LN15@operator
	jl	SHORT $LN22@operator
	cmp	DWORD PTR tv311[ebp], 1
	ja	SHORT $LN15@operator
$LN22@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR tv128[ebp], xmm0
	jmp	SHORT $LN16@operator
$LN15@operator:
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	sub	eax, 1
	sbb	edx, 0
	mov	DWORD PTR tv128[ebp], eax
	mov	DWORD PTR tv128[ebp+4], edx
$LN16@operator:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR __Pad$2[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp+4]
	mov	DWORD PTR __Pad$2[ebp+4], ecx

; 845  : 
; 846  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 847  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	and	ecx, 448				; 000001c0H
	cmp	ecx, 64					; 00000040H
	je	$LN10@operator

; 848  : 			for (; _State == ios_base::goodbit && 0 < _Pad;

	jmp	SHORT $LN4@operator
$LN2@operator:

; 849  : 				--_Pad)	// pad on left

	mov	edx, DWORD PTR __Pad$2[ebp]
	sub	edx, 1
	mov	eax, DWORD PTR __Pad$2[ebp+4]
	sbb	eax, 0
	mov	DWORD PTR __Pad$2[ebp], edx
	mov	DWORD PTR __Pad$2[ebp+4], eax
$LN4@operator:

; 848  : 			for (; _State == ios_base::goodbit && 0 < _Pad;

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN10@operator
	cmp	DWORD PTR __Pad$2[ebp+4], 0
	jl	SHORT $LN10@operator
	jg	SHORT $LN23@operator
	cmp	DWORD PTR __Pad$2[ebp], 0
	jbe	SHORT $LN10@operator
$LN23@operator:

; 850  : 				if (_Traits::eq_int_type(_Traits::eof(),

	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv272[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv273[ebp], eax
	movzx	eax, BYTE PTR tv272[ebp]
	push	eax
	mov	ecx, DWORD PTR tv273[ebp]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR tv274[ebp], eax
	mov	ecx, DWORD PTR tv274[ebp]
	mov	DWORD PTR $T9[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T8[ebp], eax
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@operator

; 851  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 852  : 					_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx
$LN11@operator:

; 853  : 
; 854  : 		if (_State == ios_base::goodbit

	jmp	$LN2@operator
$LN10@operator:

; 855  : 			&& _Traits::eq_int_type(_Traits::eof(),

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN12@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv275[ebp], eax
	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv275[ebp]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR tv276[ebp], eax
	mov	ecx, DWORD PTR tv276[ebp]
	mov	DWORD PTR $T7[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T6[ebp], eax
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@operator

; 856  : 				_Ostr.rdbuf()->sputc(_Ch)))
; 857  : 			_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx
$LN12@operator:

; 858  : 
; 859  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

	jmp	SHORT $LN7@operator
$LN5@operator:

; 860  : 			--_Pad)	// pad on right

	mov	eax, DWORD PTR __Pad$2[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$2[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$2[ebp], eax
	mov	DWORD PTR __Pad$2[ebp+4], ecx
$LN7@operator:

; 858  : 
; 859  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN6@operator
	cmp	DWORD PTR __Pad$2[ebp+4], 0
	jl	SHORT $LN6@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR __Pad$2[ebp], 0
	jbe	SHORT $LN6@operator
$LN24@operator:

; 861  : 			if (_Traits::eq_int_type(_Traits::eof(),

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv277[ebp], al
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv278[ebp], eax
	movzx	eax, BYTE PTR tv277[ebp]
	push	eax
	mov	ecx, DWORD PTR tv278[ebp]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR tv279[ebp], eax
	mov	ecx, DWORD PTR tv279[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T4[ebp], eax
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@operator

; 862  : 				_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 863  : 				_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx
$LN13@operator:

; 864  : 		_CATCH_IO_(_Ostr)

	jmp	$LN5@operator
$LN6@operator:
	jmp	SHORT $LN17@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$0:
	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
	mov	eax, $LN21@operator
	ret	0
$LN17@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN8@operator
$LN21@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN8@operator:

; 865  : 		}
; 866  : 
; 867  : 	_Ostr.width(0);

	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?width@ios_base@std@@QAE_J_J@Z		; std::ios_base::width

; 868  : 	_Ostr.setstate(_State);

	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 869  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T3[ebp]

; 870  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z:
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
__Ok$ = -124						; size = 8
tv287 = -116						; size = 8
tv338 = -108						; size = 8
tv326 = -100						; size = 8
tv135 = -92						; size = 8
__Count$ = -84						; size = 8
__Pad$ = -76						; size = 8
$T2 = -68						; size = 4
$T3 = -64						; size = 4
$T4 = -60						; size = 4
tv290 = -56						; size = 4
tv289 = -52						; size = 4
tv286 = -48						; size = 4
$T5 = -44						; size = 4
$T6 = -40						; size = 4
tv285 = -36						; size = 4
tv284 = -32						; size = 4
tv137 = -28						; size = 4
__State$ = -24						; size = 4
tv288 = -18						; size = 1
tv283 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 790  : 	{	// insert NTBS into char stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp

; 791  : 	typedef char _Elem;
; 792  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 793  : 	ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 794  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIQBD@Z	; std::char_traits<char>::length
	add	esp, 4
	xor	ecx, ecx
	mov	DWORD PTR __Count$[ebp], eax
	mov	DWORD PTR __Count$[ebp+4], ecx

; 795  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv326[ebp], eax
	mov	DWORD PTR tv326[ebp+4], edx
	cmp	DWORD PTR tv326[ebp+4], 0
	jl	SHORT $LN17@operator
	jg	SHORT $LN24@operator
	cmp	DWORD PTR tv326[ebp], 0
	jbe	SHORT $LN17@operator
$LN24@operator:
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	mov	DWORD PTR tv338[ebp], eax
	mov	DWORD PTR tv338[ebp+4], edx
	mov	eax, DWORD PTR tv338[ebp+4]
	cmp	eax, DWORD PTR __Count$[ebp+4]
	jl	SHORT $LN17@operator
	jg	SHORT $LN25@operator
	mov	ecx, DWORD PTR tv338[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jbe	SHORT $LN17@operator
$LN25@operator:
	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?width@ios_base@std@@QBE_JXZ		; std::ios_base::width
	sub	eax, DWORD PTR __Count$[ebp]
	sbb	edx, DWORD PTR __Count$[ebp+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	DWORD PTR tv135[ebp+4], edx
	jmp	SHORT $LN18@operator
$LN17@operator:
	xorps	xmm0, xmm0
	movlpd	QWORD PTR tv135[ebp], xmm0
$LN18@operator:
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	edx, DWORD PTR tv135[ebp+4]
	mov	DWORD PTR __Pad$[ebp+4], edx

; 796  : 		? 0 : _Ostr.width() - _Count;
; 797  : 	const typename _Myos::sentry _Ok(_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 798  : 
; 799  : 	if (!_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN8@operator

; 800  : 		_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx

; 801  : 	else

	jmp	$LN9@operator
$LN8@operator:

; 802  : 		{	// state okay, insert
; 803  : 		_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 1

; 804  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	and	eax, 448				; 000001c0H
	cmp	eax, 64					; 00000040H
	je	$LN11@operator

; 805  : 			for (; 0 < _Pad; --_Pad)	// pad on left

	jmp	SHORT $LN4@operator
$LN2@operator:
	mov	ecx, DWORD PTR __Pad$[ebp]
	sub	ecx, 1
	mov	edx, DWORD PTR __Pad$[ebp+4]
	sbb	edx, 0
	mov	DWORD PTR __Pad$[ebp], ecx
	mov	DWORD PTR __Pad$[ebp+4], edx
$LN4@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	SHORT $LN11@operator
	jg	SHORT $LN26@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	SHORT $LN11@operator
$LN26@operator:

; 806  : 				if (_Traits::eq_int_type(_Traits::eof(),

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv283[ebp], al
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv284[ebp], eax
	movzx	eax, BYTE PTR tv283[ebp]
	push	eax
	mov	ecx, DWORD PTR tv284[ebp]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR tv285[ebp], eax
	mov	ecx, DWORD PTR tv285[ebp]
	mov	DWORD PTR $T6[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T5[ebp], eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN12@operator

; 807  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 808  : 					{	// insertion failed, quit
; 809  : 					_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx

; 810  : 					break;

	jmp	SHORT $LN11@operator
$LN12@operator:

; 811  : 					}
; 812  : 
; 813  : 		if (_State == ios_base::goodbit

	jmp	$LN2@operator
$LN11@operator:

; 814  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

	cmp	DWORD PTR __State$[ebp], 0
	jne	SHORT $LN13@operator
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv286[ebp], eax
	mov	eax, DWORD PTR __Count$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Val$[ebp]
	push	edx
	mov	ecx, DWORD PTR tv286[ebp]
	call	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
	mov	DWORD PTR tv287[ebp], eax
	mov	DWORD PTR tv287[ebp+4], edx
	mov	eax, DWORD PTR tv287[ebp]
	cmp	eax, DWORD PTR __Count$[ebp]
	jne	SHORT $LN27@operator
	mov	ecx, DWORD PTR tv287[ebp+4]
	cmp	ecx, DWORD PTR __Count$[ebp+4]
	je	SHORT $LN13@operator
$LN27@operator:

; 815  : 			_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx
$LN13@operator:

; 816  : 
; 817  : 		if (_State == ios_base::goodbit)

	cmp	DWORD PTR __State$[ebp], 0
	jne	$LN14@operator

; 818  : 			for (; 0 < _Pad; --_Pad)	// pad on right

	jmp	SHORT $LN7@operator
$LN5@operator:
	mov	eax, DWORD PTR __Pad$[ebp]
	sub	eax, 1
	mov	ecx, DWORD PTR __Pad$[ebp+4]
	sbb	ecx, 0
	mov	DWORD PTR __Pad$[ebp], eax
	mov	DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
	cmp	DWORD PTR __Pad$[ebp+4], 0
	jl	SHORT $LN14@operator
	jg	SHORT $LN28@operator
	cmp	DWORD PTR __Pad$[ebp], 0
	jbe	SHORT $LN14@operator
$LN28@operator:

; 819  : 				if (_Traits::eq_int_type(_Traits::eof(),

	mov	edx, DWORD PTR __Ostr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv288[ebp], al
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv289[ebp], eax
	movzx	eax, BYTE PTR tv288[ebp]
	push	eax
	mov	ecx, DWORD PTR tv289[ebp]
	call	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
	mov	DWORD PTR tv290[ebp], eax
	mov	ecx, DWORD PTR tv290[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	call	?eof@?$char_traits@D@std@@SAHXZ		; std::char_traits<char>::eof
	mov	DWORD PTR $T3[ebp], eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ; std::char_traits<char>::eq_int_type
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@operator

; 820  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 821  : 					{	// insertion failed, quit
; 822  : 					_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx

; 823  : 					break;

	jmp	SHORT $LN14@operator
$LN15@operator:

; 824  : 					}

	jmp	$LN5@operator
$LN14@operator:

; 825  : 		_Ostr.width(0);

	push	0
	push	0
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?width@ios_base@std@@QAE_J_J@Z		; std::ios_base::width
	jmp	SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 826  : 		_CATCH_IO_(_Ostr)

	push	1
	push	4
	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Ostr$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
	mov	eax, $LN23@operator
	ret	0
$LN19@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN9@operator
$LN23@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 827  : 		}
; 828  : 
; 829  : 	_Ostr.setstate(_State);

	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ostr$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Ostr$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 830  : 	return (_Ostr);

	mov	eax, DWORD PTR __Ostr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T2[ebp]

; 831  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
	mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
__Ok$2 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 586  : 		{	// flush output stream

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 587  : 		if (_Myios::rdbuf() != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	test	eax, eax
	je	SHORT $LN2@flush

; 588  : 			{	// buffer exists, flush it
; 589  : 			const sentry _Ok(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$2[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 590  : 
; 591  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

	lea	ecx, DWORD PTR __Ok$2[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@flush
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	ecx, eax
	call	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
	cmp	eax, -1
	jne	SHORT $LN3@flush

; 592  : 				_Myios::setstate(ios_base::badbit);	// sync failed

	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN3@flush:

; 593  : 			}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Ok$2[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
$LN2@flush:

; 594  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 595  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:
	lea	ecx, DWORD PTR __Ok$2[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
	mov	eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
_TEXT	SEGMENT
$T2 = -84						; size = 8
$T3 = -76						; size = 8
$T4 = -68						; size = 8
__Ok$ = -60						; size = 8
$T5 = -52						; size = 4
tv197 = -48						; size = 4
__Nput_fac$6 = -44					; size = 4
tv196 = -40						; size = 4
tv192 = -36						; size = 4
tv65 = -32						; size = 4
__State$ = -28						; size = 4
_this$ = -24						; size = 4
tv195 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 321  : 		{	// insert an unsigned int

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 68					; 00000044H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 322  : 		ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 323  : 		const sentry _Ok(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 324  : 
; 325  : 		if (_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@operator

; 326  : 			{	// state okay, use facet to insert
; 327  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv192[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR tv192[ebp]
	push	ecx
	call	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
	add	esp, 4
	mov	DWORD PTR __Nput_fac$6[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 328  : 
; 329  : 			_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 330  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 331  : 				_Myios::fill(), (unsigned long)_Val).failed())

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv195[ebp], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv196[ebp], eax
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv195[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR tv196[ebp]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Nput_fac$6[ebp]
	call	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
	mov	DWORD PTR tv197[ebp], eax
	mov	ecx, DWORD PTR tv197[ebp]
	call	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@operator

; 332  : 				_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx
$LN4@operator:
	jmp	SHORT $LN6@operator
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$0:

; 333  : 			_CATCH_IO_END

	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
	mov	eax, $LN11@operator
	ret	0
$LN6@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN2@operator
$LN11@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN2@operator:

; 334  : 			}
; 335  : 
; 336  : 		_Myios::setstate(_State);

	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 337  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T5[ebp]

; 338  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z$3:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z:
	mov	eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@I@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
$T2 = -96						; size = 8
$T3 = -88						; size = 8
$T4 = -80						; size = 8
__Ok$ = -72						; size = 8
$T5 = -64						; size = 4
tv212 = -60						; size = 4
__Nput_fac$6 = -56					; size = 4
tv211 = -52						; size = 4
__Tmp$7 = -48						; size = 4
tv207 = -44						; size = 4
tv65 = -40						; size = 4
tv134 = -36						; size = 4
__Bfl$8 = -32						; size = 4
__State$ = -28						; size = 4
_this$ = -24						; size = 4
tv210 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 296  : 		{	// insert an int

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		ios_base::iostate _State = ios_base::goodbit;

	mov	DWORD PTR __State$[ebp], 0

; 298  : 		const sentry _Ok(*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 299  : 
; 300  : 		if (_Ok)

	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
	movzx	ecx, al
	test	ecx, ecx
	je	$LN2@operator

; 301  : 			{	// state okay, use facet to insert
; 302  : 			const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?getloc@ios_base@std@@QBE?AVlocale@2@XZ	; std::ios_base::getloc
	mov	DWORD PTR tv65[ebp], eax
	mov	eax, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv207[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR tv207[ebp]
	push	ecx
	call	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
	add	esp, 4
	mov	DWORD PTR __Nput_fac$6[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1locale@std@@QAE@XZ			; std::locale::~locale

; 303  : 			ios_base::fmtflags _Bfl =
; 304  : 				this->flags() & ios_base::basefield;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	and	eax, 3584				; 00000e00H
	mov	DWORD PTR __Bfl$8[ebp], eax

; 305  : 			long _Tmp = (_Bfl == ios_base::oct
; 306  : 				|| _Bfl == ios_base::hex)

	cmp	DWORD PTR __Bfl$8[ebp], 1024		; 00000400H
	je	SHORT $LN6@operator
	cmp	DWORD PTR __Bfl$8[ebp], 2048		; 00000800H
	je	SHORT $LN6@operator
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR tv134[ebp], ecx
	jmp	SHORT $LN7@operator
$LN6@operator:
	mov	edx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR tv134[ebp], edx
$LN7@operator:
	mov	eax, DWORD PTR tv134[ebp]
	mov	DWORD PTR __Tmp$7[ebp], eax

; 307  : 				? (long)(unsigned int)_Val : (long)_Val;
; 308  : 
; 309  : 			_TRY_IO_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 310  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 311  : 				_Myios::fill(), _Tmp).failed())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ; std::basic_ios<char,std::char_traits<char> >::fill
	mov	BYTE PTR tv210[ebp], al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv211[ebp], eax
	mov	eax, DWORD PTR __Tmp$7[ebp]
	push	eax
	movzx	ecx, BYTE PTR tv210[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR tv211[ebp]
	push	edx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Nput_fac$6[ebp]
	call	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
	mov	DWORD PTR tv212[ebp], eax
	mov	ecx, DWORD PTR tv212[ebp]
	call	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@operator

; 312  : 				_State |= ios_base::badbit;

	mov	edx, DWORD PTR __State$[ebp]
	or	edx, 4
	mov	DWORD PTR __State$[ebp], edx
$LN4@operator:
	jmp	SHORT $LN8@operator
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$0:

; 313  : 			_CATCH_IO_END

	push	1
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
	mov	eax, $LN13@operator
	ret	0
$LN8@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN2@operator
$LN13@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
$LN2@operator:

; 314  : 			}
; 315  : 
; 316  : 		_Myios::setstate(_State);

	push	0
	mov	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 317  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR __Ok$[ebp]
	call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
	mov	eax, DWORD PTR $T5[ebp]

; 318  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$2:
	lea	ecx, DWORD PTR __Ok$[ebp]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z$3:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1locale@std@@QAE@XZ			; std::locale::~locale
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:
	mov	eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
tv152 = -36						; size = 4
tv151 = -32						; size = 4
tv150 = -28						; size = 4
_this$ = -24						; size = 4
tv149 = -17						; size = 1
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 176  : 		{	// perform any wrapup

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 178  : 		if (this->good() && this->flags() & ios_base::unitbuf)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?good@ios_base@std@@QBE_NXZ		; std::ios_base::good
	mov	BYTE PTR tv149[ebp], al
	movzx	eax, BYTE PTR tv149[ebp]
	test	eax, eax
	je	SHORT $LN3@Osfx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?flags@ios_base@std@@QBEHXZ		; std::ios_base::flags
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR tv150[ebp]
	and	eax, 2
	je	SHORT $LN3@Osfx

; 179  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	call	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
	mov	DWORD PTR tv151[ebp], eax
	mov	ecx, DWORD PTR tv151[ebp]
	call	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
	mov	DWORD PTR tv152[ebp], eax
	cmp	DWORD PTR tv152[ebp], -1
	jne	SHORT $LN3@Osfx

; 180  : 				_Myios::setstate(ios_base::badbit);

	push	0
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+4]
	mov	ecx, edx
	call	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN3@Osfx:
	jmp	SHORT $LN6@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:

; 181  : 		_CATCH_ALL
; 182  : 		_CATCH_END

	mov	eax, $LN9@Osfx
	ret	0
$LN6@Osfx:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN1@Osfx
$LN9@Osfx:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN1@Osfx:

; 183  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT
; _this$ = ecx

; 107  : 		{	// return fill character

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 		return (_Fillch);

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+64]

; 109  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT
; _this$ = ecx

; 86   : 		{	// return stream buffer pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 87   : 		return (_Mystrbuf);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]

; 88   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT
; _this$ = ecx

; 74   : 		{	// return tie pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		return (_Tiestr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 54   : 		{	// merge _State into state, possibly reraise exception

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		clear(rdstate() | _State, _Reraise);

	movzx	eax, BYTE PTR __Reraise$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?rdstate@ios_base@std@@QBEHXZ		; std::ios_base::rdstate
	or	eax, DWORD PTR __State$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear

; 56   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv73 = -4						; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT
; _this$ = ecx

; 42   : 		{	// set state, possibly reraise exception

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 43   : 		ios_base::clear(_Mystrbuf == nullptr ? (_State | ios_base::badbit) : _State, _Reraise);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN3@clear
	mov	ecx, DWORD PTR __State$[ebp]
	or	ecx, 4
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@clear
$LN3@clear:
	mov	edx, DWORD PTR __State$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN4@clear:
	movzx	eax, BYTE PTR __Reraise$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@ios_base@std@@QAEXH_N@Z		; std::ios_base::clear

; 44   : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT
; _this$ = ecx

; 444  : 		{	// get locale

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 445  : 		return (*_Ploc);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0locale@std@@QAE@ABV01@@Z		; std::locale::locale
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 446  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?getloc@ios_base@std@@QBE?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?width@ios_base@std@@QAE_J_J@Z
_TEXT	SEGMENT
__Oldwidth$ = -12					; size = 8
_this$ = -4						; size = 4
__Newwidth$ = 8						; size = 8
?width@ios_base@std@@QAE_J_J@Z PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 437  : 		{	// set width to argument

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 438  : 		const streamsize _Oldwidth = _Wide;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR __Oldwidth$[ebp], ecx
	mov	edx, DWORD PTR [eax+36]
	mov	DWORD PTR __Oldwidth$[ebp+4], edx

; 439  : 		_Wide = _Newwidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newwidth$[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR __Newwidth$[ebp+4]
	mov	DWORD PTR [eax+36], edx

; 440  : 		return (_Oldwidth);

	mov	eax, DWORD PTR __Oldwidth$[ebp]
	mov	edx, DWORD PTR __Oldwidth$[ebp+4]

; 441  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?width@ios_base@std@@QAE_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?width@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?width@ios_base@std@@QBE_JXZ PROC			; std::ios_base::width, COMDAT
; _this$ = ecx

; 432  : 		{	// return width

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 433  : 		return (_Wide);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [ecx+36]

; 434  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?width@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QBE_JXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?precision@ios_base@std@@QBE_JXZ PROC			; std::ios_base::precision, COMDAT
; _this$ = ecx

; 420  : 		{	// return precision

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 		return (_Prec);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR [ecx+28]

; 422  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?precision@ios_base@std@@QBE_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?flags@ios_base@std@@QBEHXZ PROC			; std::ios_base::flags, COMDAT
; _this$ = ecx

; 389  : 		{	// return format flags

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 390  : 		return (_Fmtfl);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 391  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?flags@ios_base@std@@QBEHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?good@ios_base@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?good@ios_base@std@@QBE_NXZ PROC			; std::ios_base::good, COMDAT
; _this$ = ecx

; 351  : 		{	// test if no state bits are set

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 352  : 		return (rdstate() == ios_base::goodbit);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?rdstate@ios_base@std@@QBEHXZ		; std::ios_base::rdstate
	test	eax, eax
	jne	SHORT $LN3@good
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@good
$LN3@good:
	mov	DWORD PTR tv67[ebp], 0
$LN4@good:
	mov	al, BYTE PTR tv67[ebp]

; 353  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?good@ios_base@std@@QBE_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?rdstate@ios_base@std@@QBEHXZ PROC			; std::ios_base::rdstate, COMDAT
; _this$ = ecx

; 329  : 		{	// return stream state

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 330  : 		return (_Mystate);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 331  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?rdstate@ios_base@std@@QBEHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -40						; size = 20
$T2 = -20						; size = 8
_this$ = -12						; size = 4
__Msg$3 = -8						; size = 4
__Filtered$ = -4					; size = 4
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 287  : 		{	// set state, possibly reraise exception

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 288  : 		_State &= _Statmask;

	mov	eax, DWORD PTR __State$[ebp]
	and	eax, 23					; 00000017H
	mov	DWORD PTR __State$[ebp], eax

; 289  : 		_Mystate = _State;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __State$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 290  : 		const auto _Filtered = _State & _Except;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __State$[ebp]
	and	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR __Filtered$[ebp], ecx

; 291  : 		if (_Filtered)

	je	SHORT $LN8@clear

; 292  : 			{
; 293  : 			if (_Reraise)

	movzx	edx, BYTE PTR __Reraise$[ebp]
	test	edx, edx
	je	SHORT $LN3@clear

; 294  : 				{
; 295  : 				_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN3@clear:

; 296  : 				}
; 297  : 
; 298  : 			const char * _Msg;
; 299  : 			if (_Filtered & ios_base::badbit)

	mov	eax, DWORD PTR __Filtered$[ebp]
	and	eax, 4
	je	SHORT $LN4@clear

; 300  : 				{
; 301  : 				_Msg = "ios_base::badbit set";

	mov	DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
	jmp	SHORT $LN5@clear
$LN4@clear:

; 302  : 				}
; 303  : 			else if (_Filtered & ios_base::failbit)

	mov	ecx, DWORD PTR __Filtered$[ebp]
	and	ecx, 2
	je	SHORT $LN6@clear

; 304  : 				{
; 305  : 				_Msg = "ios_base::failbit set";

	mov	DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@

; 306  : 				}
; 307  : 			else

	jmp	SHORT $LN5@clear
$LN6@clear:

; 308  : 				{
; 309  : 				_Msg = "ios_base::eofbit set";

	mov	DWORD PTR __Msg$3[ebp], OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
$LN5@clear:

; 310  : 				}
; 311  : 
; 312  : 			_THROW(failure(_Msg));

	push	1
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR __Msg$3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
	push	OFFSET __TI5?AVfailure@ios_base@std@@
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN8@clear:

; 313  : 			}
; 314  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1failure@ios_base@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0system_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7failure@ios_base@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1system_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 238  : 			{	// construct with message

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 			: system_error(_Errcode, _Message)

	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errcode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0system_error@std@@QAE@Verror_code@1@PBD@Z ; std::system_error::system_error

; 238  : 			{	// construct with message

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7failure@ios_base@std@@6B@

; 239  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ
_TEXT	SEGMENT
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ PROC ; std::_Immortalize<std::_Iostream_error_category>, COMDAT

; 607  : 	{	// return a reference to an object that will live forever

	push	ebp
	mov	ebp, esp

; 608  : 	static_assert(sizeof(void *) == sizeof(once_flag), "TRANSITION, VSO#406237");
; 609  : 	static_assert(alignof(void *) == alignof(once_flag), "TRANSITION, VSO#406237");
; 610  : 	static void * _Flag = nullptr;
; 611  : 	static aligned_union_t<1, _Ty> _Storage;
; 612  : 	if (_Execute_once(reinterpret_cast<once_flag&>(_Flag), _Immortalize_impl<_Ty>, &_Storage) == 0)

	push	OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
	push	OFFSET ??$_Immortalize_impl@V_Iostream_error_category@std@@@std@@YGHPAX0PAPAX@Z ; std::_Immortalize_impl<std::_Iostream_error_category>
	push	OFFSET ?_Flag@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4PAXA ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Flag
	call	?_Execute_once@std@@YAHAAUonce_flag@1@P6GHPAX1PAPAX@Z1@Z ; std::_Execute_once
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@Immortaliz

; 613  : 		{	// _Execute_once should never fail if the callback never fails
; 614  : 		_STD terminate();

	call	_terminate
$LN2@Immortaliz:

; 615  : 		}
; 616  : 
; 617  : 	return (reinterpret_cast<_Ty&>(_Storage));

	mov	eax, OFFSET ?_Storage@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@1@XZ@4T?$_Align_type@H$07@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Storage
$LN3@Immortaliz:

; 618  : 	}

	pop	ebp
	ret	0
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ENDP ; std::_Immortalize<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 516  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 517  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 518  : 			{
; 519  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@message

; 520  : 			}
; 521  : 		else

	jmp	SHORT $LN1@message
$LN2@message:

; 522  : 			{
; 523  : 			return (_Generic_error_category::message(_Errcode));

	mov	ecx, DWORD PTR __Errcode$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@message:

; 524  : 			}
; 525  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 511  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 512  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 513  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 505  : 	_Iostream_error_category() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 506  : 		{	// default constructor
; 507  : 		_Addr = _Iostream_addr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 5

; 508  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 495  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 496  : 		return (_Syserror_map(_Errcode));

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 497  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 490  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 491  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic@

; 492  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 484  : 	_Generic_error_category() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 485  : 		{	// default constructor
; 486  : 		_Addr = _Generic_addr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 3

; 487  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1system_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_System_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7system_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0system_error@std@@QAE@Verror_code@1@PBD@Z
_TEXT	SEGMENT
$T2 = -44						; size = 28
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0system_error@std@@QAE@Verror_code@1@PBD@Z PROC	; std::system_error::system_error, COMDAT
; _this$ = ecx

; 440  : 		{	// construct from error code and message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 439  : 		: _Mybase(_Errcode, _Message)

	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Errcode$[ebp+4]
	push	edx
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 440  : 		{	// construct from error code and message string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7system_error@std@@6B@

; 441  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0system_error@std@@QAE@Verror_code@1@PBD@Z:
	mov	eax, OFFSET __ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0system_error@std@@QAE@Verror_code@1@PBD@Z ENDP	; std::system_error::system_error
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0runtime_error@std@@QAE@ABV01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7_System_error@std@@6B@
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_System_error@std@@UAE@XZ PROC			; std::_System_error::~_System_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error@std@@UAE@XZ ENDP			; std::_System_error::~_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -56						; size = 28
$T3 = -28						; size = 4
tv137 = -24						; size = 4
tv135 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 415  : 		{	// construct from error code and message string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 44					; 0000002cH
	mov	DWORD PTR _this$[ebp], ecx

; 413  : 		: runtime_error(_Makestr(_Errcode, _Message)),

	sub	esp, 28					; 0000001cH
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR __Errcode$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Errcode$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
	add	esp, 40					; 00000028H
	mov	DWORD PTR tv135[ebp], eax
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR tv137[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR tv137[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 415  : 		{	// construct from error code and message string

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error@std@@6B@

; 414  : 		_Mycode(_Errcode)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Errcode$[ebp]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR __Errcode$[ebp+4]
	mov	DWORD PTR [ecx+16], eax

; 416  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 28
tv84 = -24						; size = 4
tv79 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 8
__Message$ = 20						; size = 28
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 401  : 		{	// compose error message

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR $T3[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 402  : 		if (!_Message.empty())

	lea	ecx, DWORD PTR __Message$[ebp]
	call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Makestr

; 403  : 			{
; 404  : 			_Message.append(": ");

	push	OFFSET ??_C@_02LMMGGCAJ@?3?5@
	lea	ecx, DWORD PTR __Message$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Makestr:

; 405  : 			}
; 406  : 
; 407  : 		_Message.append(_Errcode.message());

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Errcode$[ebp]
	call	?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
	mov	DWORD PTR tv79[ebp], eax
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR tv84[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR tv84[ebp]
	push	eax
	lea	ecx, DWORD PTR __Message$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 408  : 		return (_Message);

	lea	ecx, DWORD PTR __Message$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T3[ebp]
	or	edx, 1
	mov	DWORD PTR $T3[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Message$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 409  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0:
	lea	ecx, DWORD PTR __Message$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??8std@@YA_NABVerror_condition@0@0@Z
_TEXT	SEGMENT
tv78 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??8std@@YA_NABVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 285  : 	{	// test errors for equality

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 286  : 	return (_Left.category() == _Right.category()

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 287  : 		&& _Left.value() == _Right.value());
; 288  : 	}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??8std@@YA_NABVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 246  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 248  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 241  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 243  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 208  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 206  : 		: _Myval(_Val),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 207  : 		_Mycat(&_Cat)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 209  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -12						; size = 4
tv67 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT
; _this$ = ecx

; 181  : 		{	// get name of error code

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 182  : 		return (category().message(value()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv67[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv67[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 183  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?message@error_code@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 174  : 		{	// get category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 176  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 169  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 171  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_code@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_code@std@@QAE@HABVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT
; _this$ = ecx

; 136  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 134  : 		: _Myval(_Val),

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 135  : 		_Mycat(&_Cat)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [edx+4], eax

; 137  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_code@std@@QAE@HABVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 94   : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		return (_Addr == _Right._Addr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv67[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv67[ebp]

; 96   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 338  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 339  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 340  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 333  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 334  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	push	eax
	call	??8std@@YA_NABVerror_condition@0@0@Z	; std::operator==
	add	esp, 8

; 335  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 328  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 329  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 330  : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 80   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 81   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 74   : 	/* constexpr */ error_category() noexcept	// TRANSITION

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 		{	// default constructor
; 76   : 		_Addr = reinterpret_cast<uintptr_t>(this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 77   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?iostream_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?iostream_category@std@@YAABVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 627  : 	{	// get iostream_category

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?iostream_category@std@@YAABVerror_category@1@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp

; 628  : 	return (_Immortalize<_Iostream_error_category>());

	call	??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>

; 629  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?iostream_category@std@@YAABVerror_category@1@XZ:
	mov	eax, OFFSET __ehfuncinfo$?iostream_category@std@@YAABVerror_category@1@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?iostream_category@std@@YAABVerror_category@1@XZ ENDP	; std::iostream_category
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errno$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 355  : 	{	// make an error_code

	push	ebp
	mov	ebp, esp

; 356  : 	return (error_code((int)_Errno, iostream_category()));

	call	?iostream_category@std@@YAABVerror_category@1@XZ ; std::iostream_category
	push	eax
	mov	eax, DWORD PTR __Errno$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_code@std@@QAE@HABVerror_category@1@@Z ; std::error_code::error_code
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 357  : 	}

	pop	ebp
	ret	0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -52						; size = 12
$T3 = -40						; size = 4
__Lock$4 = -36						; size = 4
__Id$5 = -32						; size = 4
__Psave_guard$6 = -28					; size = 4
__Pf$7 = -24						; size = 4
__Pfmod$8 = -20						; size = 4
__Psave$9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 505  : 	{	// get facet reference from locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H

; 506  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

	push	0
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 507  : 		const locale::facet *_Psave =
; 508  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

	mov	eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
	mov	DWORD PTR __Psave$9[ebp], eax

; 509  : 
; 510  : 		const size_t _Id = _Facet::id;

	mov	ecx, OFFSET ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
	call	??Bid@locale@std@@QAEIXZ		; std::locale::id::operator unsigned int
	mov	DWORD PTR __Id$5[ebp], eax

; 511  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

	mov	ecx, DWORD PTR __Id$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Loc$[ebp]
	call	?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ; std::locale::_Getfacet
	mov	DWORD PTR __Pf$7[ebp], eax

; 512  : 
; 513  : 		if (_Pf == nullptr)

	cmp	DWORD PTR __Pf$7[ebp], 0
	jne	$LN2@use_facet

; 514  : 			{
; 515  : 			if (_Psave != nullptr)

	cmp	DWORD PTR __Psave$9[ebp], 0
	je	SHORT $LN3@use_facet

; 516  : 				{
; 517  : 				_Pf = _Psave;	// lazy facet already allocated

	mov	edx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pf$7[ebp], edx
	jmp	SHORT $LN2@use_facet
$LN3@use_facet:

; 518  : 				}
; 519  : 			else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1))

	mov	eax, DWORD PTR __Loc$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Psave$9[ebp]
	push	ecx
	call	?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::ctype<char>::_Getcat
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN5@use_facet

; 520  : 				{
; 521  :  #if _HAS_EXCEPTIONS
; 522  : 				_THROW(bad_cast{});	// lazy disallowed

	lea	ecx, DWORD PTR $T2[ebp]
	call	??0bad_cast@std@@QAE@XZ			; std::bad_cast::bad_cast
	push	OFFSET __TI2?AVbad_cast@std@@
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	__CxxThrowException@8

; 523  :  #else /* _HAS_EXCEPTIONS */
; 524  : 				abort();	// lazy disallowed
; 525  :  #endif /* _HAS_EXCEPTIONS */
; 526  : 				}
; 527  : 			else

	jmp	SHORT $LN2@use_facet
$LN5@use_facet:

; 528  : 				{	// queue up lazy facet for destruction
; 529  : 				auto _Pfmod = const_cast<locale::facet *>(_Psave);

	mov	eax, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pfmod$8[ebp], eax

; 530  : 				unique_ptr<_Facet_base> _Psave_guard(static_cast<_Facet_base *>(_Pfmod));

	mov	ecx, DWORD PTR __Pfmod$8[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	??$?0U?$default_delete@V_Facet_base@std@@@std@@$0A@@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@PAV_Facet_base@1@@Z ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> ><std::default_delete<std::_Facet_base>,0>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 531  : 
; 532  :  #if defined(_M_CEE)
; 533  : 				_Facet_Register_m(_Pfmod);
; 534  :  #else /* defined(_M_CEE) */
; 535  : 				_Facet_Register(_Pfmod);

	mov	edx, DWORD PTR __Pfmod$8[ebp]
	push	edx
	call	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register
	add	esp, 4

; 536  :  #endif /* defined(_M_CEE) */
; 537  : 
; 538  : 				_Pfmod->_Incref();

	mov	eax, DWORD PTR __Pfmod$8[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR __Pfmod$8[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax

; 539  : 				_Facetptr<_Facet>::_Psave = _Psave;

	mov	ecx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, ecx ; std::_Facetptr<std::ctype<char> >::_Psave

; 540  : 				_Pf = _Psave;

	mov	edx, DWORD PTR __Psave$9[ebp]
	mov	DWORD PTR __Pf$7[ebp], edx

; 541  : 
; 542  : 				(void) _Psave_guard.release();

	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	?release@?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAEPAV_Facet_base@2@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::release

; 543  : 				}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	call	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
$LN2@use_facet:

; 544  : 			}
; 545  : 
; 546  : 		return (static_cast<const _Facet&>(*_Pf));	// should be dynamic_cast

	mov	eax, DWORD PTR __Pf$7[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Lock$4[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	eax, DWORD PTR $T3[ebp]
$LN7@use_facet:

; 547  : 	_END_LOCK()
; 548  : 	}	// end of use_facet body

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
	lea	ecx, DWORD PTR __Lock$4[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
	lea	ecx, DWORD PTR __Psave_guard$6[ebp]
	jmp	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Odtp
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$ctype@D@std@@MAE@XZ		; std::ctype<char>::~ctype<char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 4
	jne	SHORT $LN3@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	add	esp, 4
	jmp	SHORT $LN2@scalar
$LN3@scalar:
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?__global_delete@@YAXPAXI@Z		; __global_delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2713 : 		{	// narrow elements in [_First, _Last) to chars

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2714 : 		_Adl_verify_range(_First, _Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
	add	esp, 8

; 2715 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2716 : 		return (_Last);

	mov	eax, DWORD PTR __Last$[ebp]

; 2717 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2707 : 		{	// narrow char

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2708 : 		return (_Ch);

	mov	al, BYTE PTR __Ch$[ebp]

; 2709 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2700 : 		{	// widen chars in [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2701 : 		_Adl_verify_range(_First, _Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
	add	esp, 8

; 2702 : 		_CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

	mov	edx, DWORD PTR __Last$[ebp]
	sub	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2703 : 		return (_Last);

	mov	eax, DWORD PTR __Last$[ebp]

; 2704 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2694 : 		{	// widen char

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2695 : 		return (_Byte);

	mov	al, BYTE PTR __Byte$[ebp]

; 2696 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2683 : 		{	// convert [_First, _Last) in place to upper case

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2684 : 		_Adl_verify_range((const _Elem *)_First, _Last);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
	add	esp, 8

; 2685 : 		for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@do_toupper
$LN2@do_toupper:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 1
	mov	DWORD PTR __First$[ebp], eax
$LN4@do_toupper:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@do_toupper

; 2686 : 			{
; 2687 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	__Toupper
	add	esp, 8
	mov	edx, DWORD PTR __First$[ebp]
	mov	BYTE PTR [edx], al

; 2688 : 			}

	jmp	SHORT $LN2@do_toupper
$LN3@do_toupper:

; 2689 : 
; 2690 : 		return ((const _Elem *)_First);

	mov	eax, DWORD PTR __First$[ebp]

; 2691 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2677 : 		{	// convert element to upper case

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2678 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	call	__Toupper
	add	esp, 8

; 2679 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2666 : 		{	// convert [_First, _Last) in place to lower case

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2667 : 		_Adl_verify_range((const _Elem *)_First, _Last);

	mov	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ; std::_Adl_verify_range<char const *,char const *>
	add	esp, 8

; 2668 : 		for (; _First != _Last; ++_First)

	jmp	SHORT $LN4@do_tolower
$LN2@do_tolower:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 1
	mov	DWORD PTR __First$[ebp], eax
$LN4@do_tolower:
	mov	ecx, DWORD PTR __First$[ebp]
	cmp	ecx, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@do_tolower

; 2669 : 			{
; 2670 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	__Tolower
	add	esp, 8
	mov	edx, DWORD PTR __First$[ebp]
	mov	BYTE PTR [edx], al

; 2671 : 			}

	jmp	SHORT $LN2@do_tolower
$LN3@do_tolower:

; 2672 : 
; 2673 : 		return ((const _Elem *)_First);

	mov	eax, DWORD PTR __First$[ebp]

; 2674 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2660 : 		{	// convert element to lower case

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2661 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	call	__Tolower
	add	esp, 8

; 2662 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IAEXXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?_Tidy@?$ctype@D@std@@IAEXXZ PROC			; std::ctype<char>::_Tidy, COMDAT
; _this$ = ecx

; 2650 : 		{	// free any allocated storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2651 : 		if (0 < _Ctype._Delfl)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jle	SHORT $LN2@Tidy

; 2652 : 			_CSTD free((void *)_Ctype._Table);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_free
	add	esp, 4
	jmp	SHORT $LN3@Tidy
$LN2@Tidy:

; 2653 : 		else if (_Ctype._Delfl < 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jge	SHORT $LN3@Tidy

; 2654 : 			delete[] _Ctype._Table;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN3@Tidy:

; 2655 : 
; 2656 : 		_CSTD free(_Ctype._LocaleName);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_free
	add	esp, 4

; 2657 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$ctype@D@std@@IAEXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = -20						; size = 16
_this$ = -4						; size = 4
__Lobj$ = 8						; size = 4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z PROC		; std::ctype<char>::_Init, COMDAT
; _this$ = ecx

; 2645 : 		{	// initialize from _Lobj

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2646 : 		_Ctype = _Lobj._Getctype();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Lobj$[ebp]
	call	?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 2647 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ENDP		; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2640 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$ctype@D@std@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$ctype@D@std@@6B@

; 2641 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$ctype@D@std@@IAEXXZ		; std::ctype<char>::_Tidy

; 2642 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ctype_base@std@@UAE@XZ		; std::ctype_base::~ctype_base
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ctype@D@std@@MAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$ctype@D@std@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -88						; size = 52
$T3 = -36						; size = 4
tv94 = -32						; size = 4
tv131 = -28						; size = 4
tv88 = -24						; size = 4
$T4 = -20						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2618 : 		{	// return locale category mask and construct standard facet

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR $T5[ebp], 0

; 2619 : 		if (_Ppf != nullptr && *_Ppf == nullptr)

	cmp	DWORD PTR __Ppf$[ebp], 0
	je	$LN2@Getcat
	mov	eax, DWORD PTR __Ppf$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN2@Getcat

; 2620 : 			*_Ppf = new ctype<_Elem>(

	push	24					; 00000018H
	call	??2_Crt_new_delete@std@@SAPAXI@Z	; std::_Crt_new_delete::operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN4@Getcat
	push	0
	mov	ecx, DWORD PTR __Ploc$[ebp]
	call	?c_str@locale@std@@QBEPBDXZ		; std::locale::c_str
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0_Locinfo@std@@QAE@PBD@Z		; std::_Locinfo::_Locinfo
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv94[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR $T5[ebp]
	or	edx, 1
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR tv94[ebp]
	push	eax
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z	; std::ctype<char>::ctype<char>
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN5@Getcat
$LN4@Getcat:
	mov	DWORD PTR tv88[ebp], 0
$LN5@Getcat:
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR __Ppf$[ebp]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	and	ecx, 1
	je	SHORT $LN2@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 2621 : 				_Locinfo(_Ploc->c_str()));
; 2622 : 		return (_X_CTYPE);

	mov	eax, 2

; 2623 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	pop	ecx
	ret	0
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
	mov	eax, DWORD PTR $T5[ebp]
	and	eax, 1
	je	$LN8@Getcat
	and	DWORD PTR $T5[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1_Locinfo@std@@QAE@XZ			; std::_Locinfo::~_Locinfo
$LN8@Getcat:
	ret	0
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::ctype<char>::_Getcat
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Lobj$ = 8						; size = 4
__Refs$ = 12						; size = 4
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z PROC		; std::ctype<char>::ctype<char>, COMDAT
; _this$ = ecx

; 2612 : 		{	// construct from current locale

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2611 : 		: ctype_base(_Refs)

	mov	eax, DWORD PTR __Refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ctype_base@std@@QAE@I@Z		; std::ctype_base::ctype_base
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2612 : 		{	// construct from current locale

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7?$ctype@D@std@@6B@

; 2613 : 		_Init(_Lobj);

	mov	edx, DWORD PTR __Lobj$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z ; std::ctype<char>::_Init

; 2614 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1ctype_base@std@@UAE@XZ		; std::ctype_base::~ctype_base
__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z ENDP		; std::ctype<char>::ctype<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z PROC		; std::ctype<char>::widen, COMDAT
; _this$ = ecx

; 2571 : 		{	// widen chars in [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2572 : 		return (do_widen(_First, _Last, _Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 2573 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?widen@?$ctype@D@std@@QBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1ctype_base@std@@UAE@XZ		; std::ctype_base::~ctype_base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 4
	jne	SHORT $LN3@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	add	esp, 4
	jmp	SHORT $LN2@scalar
$LN3@scalar:
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?__global_delete@@YAXPAXI@Z		; __global_delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2217 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ctype_base@std@@6B@

; 2218 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
	mov	esp, ebp
	pop	ebp
	ret	0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0ctype_base@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Refs$ = 8						; size = 4
??0ctype_base@std@@QAE@I@Z PROC				; std::ctype_base::ctype_base, COMDAT
; _this$ = ecx

; 2213 : 		{	// default constructor

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2212 : 		: locale::facet(_Refs)

	mov	eax, DWORD PTR __Refs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0facet@locale@std@@IAE@I@Z		; std::locale::facet::facet

; 2213 : 		{	// default constructor

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7ctype_base@std@@6B@

; 2214 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0ctype_base@std@@QAE@I@Z ENDP				; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z PROC	; std::_Adl_verify_range<char const *,char const *>, COMDAT

; 615  : 	{	// check that [_First, _Last) forms an iterator range

	push	ebp
	mov	ebp, esp
	push	ecx

; 616  : 	_Adl_verify_range1(_First, _Last, bool_constant<_Range_verifiable_v<_Iter, _Sentinel>>{});

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Adl_verify_range1@PBDPBD@std@@YAXABQBD0U?$integral_constant@_N$00@0@@Z ; std::_Adl_verify_range1<char const *,char const *>
	add	esp, 12					; 0000000cH

; 617  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Adl_verify_range@PBDPBD@std@@YAXABQBD0@Z ENDP	; std::_Adl_verify_range<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
$T1 = -8						; size = 4
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 23   : 	{	// return smaller of _Left and _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 24   : 	return (_Right < _Left ? _Right : _Left);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@Min_value
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@Min_value
$LN3@Min_value:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@Min_value:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 25   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
_TEXT	SEGMENT
tv83 = -20						; size = 4
__Ptr0$1 = -16						; size = 4
__Facptr$ = -12						; size = 4
tv71 = -8						; size = 4
_this$ = -4						; size = 4
__Id$ = 8						; size = 4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z PROC		; std::locale::_Getfacet, COMDAT
; _this$ = ecx

; 435  : 		{	// look up a facet in locale object

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Id$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jae	SHORT $LN6@Getfacet
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR __Id$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN7@Getfacet
$LN6@Getfacet:
	mov	DWORD PTR tv71[ebp], 0
$LN7@Getfacet:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR __Facptr$[ebp], edx

; 437  : 			? _Ptr->_Facetvec[_Id] : nullptr;	// null if id off end
; 438  : 		if (_Facptr != nullptr || !_Ptr->_Xparent)

	cmp	DWORD PTR __Facptr$[ebp], 0
	jne	SHORT $LN4@Getfacet
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movzx	edx, BYTE PTR [ecx+20]
	test	edx, edx
	jne	SHORT $LN2@Getfacet
$LN4@Getfacet:

; 439  : 			return (_Facptr);	// found facet or not transparent

	mov	eax, DWORD PTR __Facptr$[ebp]
	jmp	SHORT $LN1@Getfacet

; 440  : 		else

	jmp	SHORT $LN1@Getfacet
$LN2@Getfacet:

; 441  : 			{	// look in current locale
; 442  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

	call	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale
	mov	DWORD PTR __Ptr0$1[ebp], eax

; 443  : 			return (_Id < _Ptr0->_Facetcount

	mov	eax, DWORD PTR __Ptr0$1[ebp]
	mov	ecx, DWORD PTR __Id$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN8@Getfacet
	mov	edx, DWORD PTR __Ptr0$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR __Id$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN9@Getfacet
$LN8@Getfacet:
	mov	DWORD PTR tv83[ebp], 0
$LN9@Getfacet:
	mov	eax, DWORD PTR tv83[ebp]
$LN1@Getfacet:

; 444  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 445  : 				: nullptr);	// no entry in current locale
; 446  : 			}
; 447  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z ENDP		; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?c_str@locale@std@@QBEPBDXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?c_str@locale@std@@QBEPBDXZ PROC			; std::locale::c_str, COMDAT
; _this$ = ecx

; 430  : 		{	// return locale name as NTBS

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 431  : 		return (_Ptr == nullptr ? "" : _Ptr->_Name.c_str());

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@c_str
	mov	DWORD PTR tv70[ebp], OFFSET ??_C@_00CNPNBAHC@@
	jmp	SHORT $LN4@c_str
$LN3@c_str:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 24					; 00000018H
	call	?c_str@?$_Yarn@D@std@@QBEPBDXZ		; std::_Yarn<char>::c_str
	mov	DWORD PTR tv70[ebp], eax
$LN4@c_str:
	mov	eax, DWORD PTR tv70[ebp]

; 432  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@locale@std@@QBEPBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
tv84 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 408  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1locale@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 		if (_Ptr != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@locale

; 410  : 			delete _Ptr->_Decref();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@locale
	push	1
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN3@locale
$LN4@locale:
	mov	DWORD PTR tv84[ebp], 0
$LN3@locale:

; 411  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1locale@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1locale@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0locale@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0locale@std@@QAE@ABV01@@Z PROC			; std::locale::locale, COMDAT
; _this$ = ecx

; 303  : 		{	// construct by copying

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0locale@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		: _Ptr(_Right._Ptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 304  : 		_Ptr->_Incref();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [eax+4]
	call	edx

; 305  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0locale@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0locale@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0locale@std@@QAE@ABV01@@Z ENDP			; std::locale::locale
; Function compile flags: /Odtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1facet@locale@std@@MAE@XZ		; std::locale::facet::~facet
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 4
	jne	SHORT $LN3@scalar
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??3_Crt_new_delete@std@@SAXPAX@Z	; std::_Crt_new_delete::operator delete
	add	esp, 4
	jmp	SHORT $LN2@scalar
$LN3@scalar:
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?__global_delete@@YAXPAXI@Z		; __global_delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 176  : 			{	// ensure that derived classes can be destroyed properly

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@

; 177  : 			}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Facet_base@std@@UAE@XZ		; std::_Facet_base::~_Facet_base
	mov	esp, ebp
	pop	ebp
	ret	0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0facet@locale@std@@IAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Initrefs$ = 8						; size = 4
??0facet@locale@std@@IAE@I@Z PROC			; std::locale::facet::facet, COMDAT
; _this$ = ecx

; 172  : 			{	// construct with initial reference count

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Facet_base@std@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7facet@locale@std@@6B@

; 171  : 			: _Myrefs(static_cast<_Atomic_integral_t>(_Initrefs))	// non-atomic initialization

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __Initrefs$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 173  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0facet@locale@std@@IAE@I@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 157  : 			{	// decrement use count

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 158  : 			if (_MT_DECR(_Myrefs) == 0)

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	or	ecx, -1
	lock	 xadd	 DWORD PTR [eax], ecx
	dec	ecx
	jne	SHORT $LN2@Decref

; 159  : 				{
; 160  : 				return (this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@Decref
$LN2@Decref:

; 161  : 				}
; 162  : 
; 163  : 			return (nullptr);

	xor	eax, eax
$LN1@Decref:

; 164  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 152  : 			{	// increment use count

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 			_MT_INCR(_Myrefs);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	lock	 inc	 DWORD PTR [eax]

; 154  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??Bid@locale@std@@QAEIXZ
_TEXT	SEGMENT
__Lock$1 = -8						; size = 4
_this$ = -4						; size = 4
??Bid@locale@std@@QAEIXZ PROC				; std::locale::id::operator unsigned int, COMDAT
; _this$ = ecx

; 115  : 			{	// get stamp, with lazy allocation

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 			if (_Id == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@operator

; 117  : 				{	// still zero, allocate stamp
; 118  : 				_BEGIN_LOCK(_LOCK_LOCALE)

	push	0
	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 119  : 					if (_Id == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN3@operator

; 120  : 						{
; 121  : 						_Id = static_cast<size_t>(++_Id_cnt);

	mov	edx, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
	add	edx, 1
	mov	DWORD PTR ?_Id_cnt@id@locale@std@@0HA, edx ; std::locale::id::_Id_cnt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
	mov	DWORD PTR [eax], ecx
$LN3@operator:

; 122  : 						}
; 123  : 				_END_LOCK()

	lea	ecx, DWORD PTR __Lock$1[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN2@operator:

; 124  : 				}
; 125  : 			return (_Id);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]

; 126  : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??Bid@locale@std@@QAEIXZ ENDP				; std::locale::id::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 111  : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 110  : 			: _Id(_Val)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 112  : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??3_Crt_new_delete@std@@SAXPAX@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??3_Crt_new_delete@std@@SAXPAX@Z PROC			; std::_Crt_new_delete::operator delete, COMDAT

; 79   : 		{	// replace operator delete

	push	ebp
	mov	ebp, esp

; 80   : 		_CSTD free(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 81   : 		}

	pop	ebp
	ret	0
??3_Crt_new_delete@std@@SAXPAX@Z ENDP			; std::_Crt_new_delete::operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??2_Crt_new_delete@std@@SAPAXIABUnothrow_t@1@@Z
_TEXT	SEGMENT
tv71 = -4						; size = 4
__Size$ = 8						; size = 4
___formal$ = 12						; size = 4
??2_Crt_new_delete@std@@SAPAXIABUnothrow_t@1@@Z PROC	; std::_Crt_new_delete::operator new, COMDAT

; 74   : 		{	// replace nothrow operator new

	push	ebp
	mov	ebp, esp
	push	ecx

; 75   : 		return (_malloc_dbg(_Size > 0 ? _Size : 1, _CRT_BLOCK, __FILE__, __LINE__));

	cmp	DWORD PTR __Size$[ebp], 0
	jbe	SHORT $LN3@operator
	mov	eax, DWORD PTR __Size$[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv71[ebp], 1
$LN4@operator:
	push	75					; 0000004bH
	push	OFFSET ??_C@_0GI@LKBGDILM@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	call	__malloc_dbg
	add	esp, 16					; 00000010H

; 76   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??2_Crt_new_delete@std@@SAPAXIABUnothrow_t@1@@Z ENDP	; std::_Crt_new_delete::operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale
;	COMDAT ??2_Crt_new_delete@std@@SAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -4						; size = 4
__Size$ = 8						; size = 4
??2_Crt_new_delete@std@@SAPAXI@Z PROC			; std::_Crt_new_delete::operator new, COMDAT

; 66   : 		{	// replace operator new

	push	ebp
	mov	ebp, esp
	push	ecx

; 67   : 		void * _Ptr = operator new(_Size, nothrow);

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	call	??2_Crt_new_delete@std@@SAPAXIABUnothrow_t@1@@Z ; std::_Crt_new_delete::operator new
	add	esp, 8
	mov	DWORD PTR __Ptr$[ebp], eax

; 68   : 		if (!_Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN2@operator

; 69   : 			_Xbad_alloc();

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN2@operator:

; 70   : 		return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN3@operator:

; 71   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??2_Crt_new_delete@std@@SAPAXI@Z ENDP			; std::_Crt_new_delete::operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Facet_base@std@@UAE@XZ		; std::_Facet_base::~_Facet_base
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Facet_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Facet_base@std@@QAE@XZ PROC				; std::_Facet_base::_Facet_base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Facet_base@std@@QAE@XZ ENDP				; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 26   : 		{	// ensure that derived classes can be destroyed properly

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Facet_base@std@@6B@

; 27   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@_W@std@@AAEXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4169 : 		if (_Myptr != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	__free_dbg
	add	esp, 8
$LN2@Tidy:

; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);
; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 4179 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Yarn@_W@std@@AAEXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Yarn@_W@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4143 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Yarn@_W@std@@AAEXXZ		; std::_Yarn<wchar_t>::_Tidy

; 4144 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Yarn@_W@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$_Yarn@_W@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 4087 : 		{	// default construct

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx

; 4088 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Tidy@?$_Yarn@D@std@@AAEXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT
; _this$ = ecx

; 4168 : 		{	// discard any string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4169 : 		if (_Myptr != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 4170 : 
; 4171 :  #ifdef _DEBUG
; 4172 : 			_free_dbg(_Myptr, _CRT_BLOCK);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	__free_dbg
	add	esp, 8
$LN2@Tidy:

; 4173 : 
; 4174 :  #else /* _DEBUG */
; 4175 : 			_CSTD free(_Myptr);
; 4176 :  #endif /* _DEBUG */
; 4177 : 
; 4178 : 		_Myptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 4179 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$_Yarn@D@std@@AAEXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QBEPBDXZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?c_str@?$_Yarn@D@std@@QBEPBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT
; _this$ = ecx

; 4152 : 		{	// return NTBS

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 4153 : 		return (_Myptr != nullptr ? _Myptr : &_Nul);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@c_str
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN4@c_str
$LN3@c_str:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@c_str:
	mov	eax, DWORD PTR tv68[ebp]

; 4154 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$_Yarn@D@std@@QBEPBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 4142 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Yarn@D@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4143 : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$_Yarn@D@std@@AAEXXZ		; std::_Yarn<char>::_Tidy

; 4144 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Yarn@D@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$_Yarn@D@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT
; _this$ = ecx

; 4087 : 		{	// default construct

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4086 : 		: _Myptr(nullptr), _Nul(0)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0

; 4088 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Gettrue@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Gettrue@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT
; _this$ = ecx

; 171  : 		{	// return true name (no C source)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 		return ("true");

	mov	eax, OFFSET ??_C@_04LOAJBDKD@true@

; 173  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Gettrue@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getfalse@_Locinfo@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getfalse@_Locinfo@std@@QBEPBDXZ PROC			; std::_Locinfo::_Getfalse, COMDAT
; _this$ = ecx

; 166  : 		{	// return false name (no C source)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 167  : 		return ("false");

	mov	eax, OFFSET ??_C@_05LAPONLG@false@

; 168  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getfalse@_Locinfo@std@@QBEPBDXZ ENDP			; std::_Locinfo::_Getfalse
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT
; _this$ = ecx

; 126  : 		{	// return localeconv stuff

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 127  : 		return (localeconv());

	call	_localeconv

; 128  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getlconv@_Locinfo@std@@QBEPBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ
_TEXT	SEGMENT
$T1 = -92						; size = 44
$T2 = -48						; size = 44
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT
; _this$ = ecx

; 121  : 		{	// return codecvt stuff

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		return (::_Getcvt());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__Getcvt
	add	esp, 4
	mov	ecx, 11					; 0000000bH
	mov	esi, eax
	lea	edi, DWORD PTR $T2[ebp]
	rep movsd
	mov	ecx, 11					; 0000000bH
	lea	esi, DWORD PTR $T2[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 123  : 		}

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getcvt@_Locinfo@std@@QBE?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = -36						; size = 16
$T2 = -20						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT
; _this$ = ecx

; 116  : 		{	// return ctype stuff

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 117  : 		return (::_Getctype());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__Getctype
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR $T2[ebp+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T2[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR $T2[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 118  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1_Locinfo@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		_Locinfo_dtor(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor
	add	esp, 4

; 96   : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -28						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 76   : 		{	// construct from NTBS

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0_Locinfo@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 73   : 		: _Lock(_LOCK_LOCALE)

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 76   : 		{	// construct from NTBS

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::_Yarn<wchar_t>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::_Yarn<wchar_t>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::_Yarn<char>
	mov	BYTE PTR __$EHRec$[ebp+8], 6

; 77   : 		if (_Pch == nullptr)

	cmp	DWORD PTR __Pch$[ebp], 0
	jne	SHORT $LN2@Locinfo

; 78   : 			_THROW(runtime_error("bad locale name"));

	push	OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
$LN2@Locinfo:

; 79   : 		_Locinfo_ctor(this, _Pch);

	mov	ecx, DWORD PTR __Pch$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
	add	esp, 8

; 80   : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
$LN3@Locinfo:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$_Yarn@_W@std@@QAE@XZ		; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$_Yarn@D@std@@QAE@XZ		; std::_Yarn<char>::~_Yarn<char>
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
	mov	eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_cast@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 131  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 130  :         : exception("bad cast", 1)

	push	1
	push	OFFSET ??_C@_08EPJLHIJG@bad?5cast@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception

; 131  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_cast@std@@6B@

; 132  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\libst-2018\include\stvector3.inl
;	COMDAT ??0STVector3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_inX$ = 8						; size = 4
_inY$ = 12						; size = 4
_inZ$ = 16						; size = 4
??0STVector3@@QAE@MMM@Z PROC				; STVector3::STVector3, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 23   :     x = inX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _inX$[ebp]
	movss	DWORD PTR [eax], xmm0

; 24   :     y = inY;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _inY$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 25   :     z = inZ;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _inZ$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 26   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0STVector3@@QAE@MMM@Z ENDP				; STVector3::STVector3
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\libst-2018\include\stvector3.inl
;	COMDAT ??0STVector3@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??0STVector3@@QAE@ABU0@@Z PROC				; STVector3::STVector3, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   :     x = v.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 38   :     y = v.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 39   :     z = v.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 40   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0STVector3@@QAE@ABU0@@Z ENDP				; STVector3::STVector3
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	esp, ebp
	pop	ebp
	ret	0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 170  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		: _Mybase(_Message)

	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBD@Z		; std::exception::exception

; 170  : 		{	// construct from message string

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@

; 171  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 165  : 		{	// construct from message string

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 		: _Mybase(_Message.c_str())

	mov	ecx, DWORD PTR __Message$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBD@Z		; std::exception::exception

; 165  : 		{	// construct from message string

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@

; 166  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 4003 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp

; 4004 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 4005 : 		}

	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
__Ptr$1 = -20						; size = 4
__Al$2 = -16						; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T3 = -1						; size = 1
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3984 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 3985 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 3986 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3987 : 		if (_My_data._Large_string_engaged())

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Tidy_deall

; 3988 : 			{
; 3989 : 			const pointer _Ptr = _My_data._Bx._Ptr;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Ptr$1[ebp], edx

; 3990 : 			auto& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR __Al$2[ebp], eax

; 3991 : 			_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$2[ebp]
	push	ecx
	call	??$destroy@PAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Ptr$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$2[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 3993 : 			}
; 3994 : 
; 3995 : 		_My_data._Mysize = 0;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 3997 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3998 : 		// write can alias this
; 3999 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T3[ebp], 0
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR __My_data$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 4000 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3974 : 		{	// initialize basic_string data members

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3975 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3976 : 		_My_data._Mysize = 0;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [ecx+24], 15			; 0000000fH

; 3978 : 		// the _Traits::assign is last so the codegen doesn't think the char
; 3979 : 		// write can alias this
; 3980 : 		_Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR __My_data$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 3981 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T1 = -1						; size = 1
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 3968 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 3969 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 3971 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z
_TEXT	SEGMENT
$T1 = -24						; size = 4
__My_data$ = -20					; size = 4
__Masked$ = -16						; size = 4
_this$ = -12						; size = 4
__Old$ = -8						; size = 4
__Max$ = -4						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3866 : 		{	// determines the next array size to allocate

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 3867 : 		const size_type _Max = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 3868 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Requested$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Masked$[ebp], eax

; 3870 : 		if (_Masked > _Max)

	mov	ecx, DWORD PTR __Masked$[ebp]
	cmp	ecx, DWORD PTR __Max$[ebp]
	jbe	SHORT $LN2@Calculate_

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR __Old$[ebp], eax

; 3876 : 		if (_Old > _Max - _Old / 2)

	mov	ecx, DWORD PTR __Old$[ebp]
	shr	ecx, 1
	mov	edx, DWORD PTR __Max$[ebp]
	sub	edx, ecx
	cmp	DWORD PTR __Old$[ebp], edx
	jbe	SHORT $LN3@Calculate_

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

	mov	eax, DWORD PTR __Old$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Old$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	edx, DWORD PTR __Masked$[ebp]
	push	edx
	call	??$_Max_value@I@std@@YAABIABI0@Z	; std::_Max_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
$LN1@Calculate_:

; 3882 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT
; _this$ = ecx

; 3370 : 		{	// test if sequence is empty

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3371 : 		return (size() == 0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	test	eax, eax
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv67[ebp], 0
$LN4@empty:
	mov	al, BYTE PTR tv67[ebp]

; 3372 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
__Old_size$ = -8					; size = 4
_this$ = -4						; size = 4
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 3318 : 		{	// determine new length, padding with _Ch elements as needed

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3319 : 		const size_type _Old_size = size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	mov	DWORD PTR __Old_size$[ebp], eax

; 3320 : 		if (_Newsize <= _Old_size)

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Old_size$[ebp]
	ja	SHORT $LN2@resize

; 3321 : 			{
; 3322 : 			_Eos(_Newsize);

	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 3323 : 			}
; 3324 : 		else

	jmp	SHORT $LN1@resize
$LN2@resize:

; 3325 : 			{
; 3326 : 			append(_Newsize - _Old_size, _Ch);

	movzx	edx, BYTE PTR __Ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	sub	eax, DWORD PTR __Old_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN1@resize:

; 3327 : 			}
; 3328 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -24						; size = 4
$T2 = -20						; size = 4
__Storage_max$ = -16					; size = 4
__Alloc_max$ = -12					; size = 4
$T3 = -8						; size = 4
_this$ = -4						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3306 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 3307 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
	mov	DWORD PTR __Alloc_max$[ebp], eax

; 3308 : 		const size_type _Storage_max = // can always store small string
; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));

	mov	DWORD PTR $T3[ebp], 16			; 00000010H
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Alloc_max$[ebp]
	push	ecx
	call	??$_Max_value@I@std@@YAABIABI0@Z	; std::_Max_value<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Storage_max$[ebp], edx

; 3310 : 		return (_Min_value(

	mov	eax, DWORD PTR __Storage_max$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 3311 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3312 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 : 			));
; 3314 : 
; 3315 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 3301 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3302 : 		return (this->_Get_data()._Mysize);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	eax, DWORD PTR [eax+20]

; 3303 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 3279 : 		{	// return pointer to null-terminated immutable array

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3280 : 		return (this->_Get_data()._Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	ecx, eax
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3281 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ:
	mov	eax, OFFSET __ehfuncinfo$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3210 : 		{	// subscript immutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3211 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 3212 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 3213 : 		_STL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	3213					; 00000c8dH
	push	OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	3213					; 00000c8dH
	push	OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
	push	OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	ecx, ecx
	jne	SHORT $LN4@operator

; 3214 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 3215 : 		return (_My_data._Myptr()[_Off]);

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]

; 3216 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__My_data$ = -4						; size = 4
__Off$ = 8						; size = 4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT
; _this$ = ecx

; 3201 : 		{	// subscript mutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 3202 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 3203 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 3204 : 		_STL_VERIFY(_Off <= _My_data._Mysize, "string subscript out of range");

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN7@operator
	jmp	SHORT $LN2@operator
$LN7@operator:
	push	OFFSET ??_C@_0BO@LFGPDMIB@string?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	3204					; 00000c84H
	push	OFFSET ??_C@_0GI@OLBHAGPC@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	push	0
	push	3204					; 00000c84H
	push	OFFSET ??_C@_1NA@CLPMMMDB@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1LO@NPPEKPAI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAb?$AAa?$AAs?$AAi?$AAc?$AA_?$AAs?$AAt?$AAr?$AAi@
	push	OFFSET ??_C@_1EA@OADAPGGK@?$AA?$CC?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN7@operator
$LN2@operator:
	xor	ecx, ecx
	jne	SHORT $LN4@operator

; 3205 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 3206 : 		return (_My_data._Myptr()[_Off]);

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]

; 3207 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__Old_ptr$1 = -24					; size = 4
_this$ = -20						; size = 4
__Insert_at$2 = -16					; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
$T3 = -1						; size = 1
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 2786 : 		{	// insert _Count * _Ch at _Off

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 2787 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 2788 : 		_My_data._Check_offset(_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 2789 : 		const size_type _Old_size = _My_data._Mysize;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR __Old_size$[ebp], edx

; 2790 : 		if (_Count <= _My_data._Myres - _Old_size)

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Old_size$[ebp]
	cmp	DWORD PTR __Count$[ebp], ecx
	ja	SHORT $LN2@insert

; 2791 : 			{
; 2792 : 			_My_data._Mysize = _Old_size + _Count;

	mov	edx, DWORD PTR __Old_size$[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+20], edx

; 2793 : 			_Elem * const _Old_ptr = _My_data._Myptr();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$1[ebp], eax

; 2794 : 			_Elem * const _Insert_at = _Old_ptr + _Off;

	mov	ecx, DWORD PTR __Old_ptr$1[ebp]
	add	ecx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Insert_at$2[ebp], ecx

; 2795 : 			_Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

	mov	edx, DWORD PTR __Old_size$[ebp]
	sub	edx, DWORD PTR __Off$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR __Insert_at$2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Insert_at$2[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 2796 : 			_Traits::assign(_Insert_at, _Count, _Ch); // fill hole

	movzx	edx, BYTE PTR __Ch$[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Insert_at$2[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
	add	esp, 12					; 0000000cH

; 2797 : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@insert
$LN2@insert:

; 2798 : 			}
; 2799 : 
; 2800 : 		return (_Reallocate_grow_by(_Count,

	xor	edx, edx
	mov	BYTE PTR $T3[ebp], dl
	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Off$[ebp]
	push	edx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_grow_by@V<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_6607a66f2a10a1261ff9db96cba1015b>@@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_6607a66f2a10a1261ff9db96cba1015b>,unsigned int,unsigned int,char>
$LN1@insert:

; 2801 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2802 : 				const size_type _Off, const size_type _Count, const _Elem _Ch) {
; 2803 : 			_Traits::copy(_New_ptr, _Old_ptr, _Off);
; 2804 : 			_Traits::assign(_New_ptr + _Off, _Count, _Ch);
; 2805 : 			_Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);
; 2806 : 			}, _Off, _Count, _Ch));
; 2807 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Old_ptr$1 = -16					; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2680 : 		{	// assign _Count * _Ch

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2681 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 2682 : 		if (_Count <= _My_data._Myres)

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN2@assign

; 2683 : 			{
; 2684 : 			_Elem * const _Old_ptr = _My_data._Myptr();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$1[ebp], eax

; 2685 : 			_My_data._Mysize = _Count;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2686 : 			_Traits::assign(_Old_ptr, _Count, _Ch);

	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Count$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
	add	esp, 12					; 0000000cH

; 2687 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T3[ebp], 0
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2688 : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 2689 : 			}
; 2690 : 
; 2691 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem _Ch) {

	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	movzx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_for@V<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c6753c90be971fc9cc00b4f35f237a75>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_c6753c90be971fc9cc00b4f35f237a75>,char>
$LN1@assign:

; 2692 : 			_Traits::assign(_New_ptr, _Count, _Ch);
; 2693 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2694 : 			}, _Ch));
; 2695 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2675 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIQBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@I@std@@YAII@Z		; std::_Convert_size<unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2677 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -16					; size = 4
_this$ = -12						; size = 4
__My_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2657 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2658 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 2659 : 		if (_Count <= _My_data._Myres)

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN2@assign

; 2660 : 			{
; 2661 : 			_Elem * const _Old_ptr = _My_data._Myptr();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$1[ebp], eax

; 2662 : 			_My_data._Mysize = _Count;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2663 : 			_Traits::move(_Old_ptr, _Ptr, _Count);

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	call	?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 2664 : 			_Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T3[ebp], 0
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	add	edx, DWORD PTR __Count$[ebp]
	push	edx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2665 : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 2666 : 			}
; 2667 : 
; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 2669 : 			_Traits::copy(_New_ptr, _Ptr, _Count);
; 2670 : 			_Traits::assign(_New_ptr[_Count], _Elem());
; 2671 : 			}, _Ptr));
; 2672 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Old_ptr$1 = -20					; size = 4
_this$ = -16						; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2596 : 		{	// append _Count * _Ch

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2597 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 2598 : 		const size_type _Old_size = _My_data._Mysize;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 2599 : 		if (_Count <= _My_data._Myres - _Old_size)

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	DWORD PTR __Count$[ebp], eax
	ja	SHORT $LN2@append

; 2600 : 			{
; 2601 : 			_My_data._Mysize = _Old_size + _Count;

	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 2602 : 			_Elem * const _Old_ptr = _My_data._Myptr();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$1[ebp], eax

; 2603 : 			_Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?assign@?$char_traits@D@std@@SAPADQADID@Z ; std::char_traits<char>::assign
	add	esp, 12					; 0000000cH

; 2604 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T3[ebp], 0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __Old_ptr$1[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2605 : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@append
$LN2@append:

; 2606 : 			}
; 2607 : 
; 2608 : 		return (_Reallocate_grow_by(_Count,

	xor	edx, edx
	mov	BYTE PTR $T2[ebp], dl
	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_grow_by@V<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_c1b8c41cb4019640539cfd828748c4d4>@@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_c1b8c41cb4019640539cfd828748c4d4>,unsigned int,char>
$LN1@append:

; 2609 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2610 : 				const size_type _Count, const _Elem _Ch) {
; 2611 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2612 : 			_Traits::assign(_New_ptr + _Old_size, _Count, _Ch);
; 2613 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2614 : 			}, _Count, _Ch));
; 2615 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2591 : 		{	// append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2592 : 		return (append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIQBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@I@std@@YAII@Z		; std::_Convert_size<unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2593 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -20					; size = 4
_this$ = -16						; size = 4
__Old_size$ = -12					; size = 4
__My_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2569 : 		{	// append [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 2570 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 2571 : 		const size_type _Old_size = _My_data._Mysize;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 2572 : 		if (_Count <= _My_data._Myres - _Old_size)

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	DWORD PTR __Count$[ebp], eax
	ja	SHORT $LN2@append

; 2573 : 			{
; 2574 : 			_My_data._Mysize = _Old_size + _Count;

	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 2575 : 			_Elem * const _Old_ptr = _My_data._Myptr();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$1[ebp], eax

; 2576 : 			_Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$1[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?move@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 2577 : 			_Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T3[ebp], 0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __Old_ptr$1[ebp]
	push	ecx
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2578 : 			return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@append
$LN2@append:

; 2579 : 			}
; 2580 : 
; 2581 : 		return (_Reallocate_grow_by(_Count,

	xor	edx, edx
	mov	BYTE PTR $T2[ebp], dl
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 2582 : 			[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size,
; 2583 : 				const _Elem * const _Ptr, const size_type _Count) {
; 2584 : 			_Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 2585 : 			_Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 2586 : 			_Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 2587 : 			}, _Ptr, _Count));
; 2588 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right_data$ = -4					; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2537 : 		{	// append _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2538 : 		auto& _Right_data = _Right._Get_data();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __Right_data$[ebp], eax

; 2539 : 		return (append(_Right_data._Myptr(), _Right_data._Mysize));

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 2540 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2459 : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2460 : 		_Tidy_deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2461 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
$T1 = -40						; size = 4
$T2 = -36						; size = 4
__New_capacity$ = -32					; size = 4
__New_array$ = -28					; size = 4
__Right_ptr$ = -24					; size = 4
__Al$ = -20						; size = 4
__Right_data$ = -16					; size = 4
_this$ = -12						; size = 4
__Right_size$ = -8					; size = 4
__My_data$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2394 : 		{	// assign by copying data stored in _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __My_data$[ebp], eax

; 2398 : 		auto& _Right_data = _Right._Get_data();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __Right_data$[ebp], eax

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Right_size$[ebp], ecx

; 2400 : 		const _Elem * const _Right_ptr = _Right_data._Myptr();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Right_ptr$[ebp], eax

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

	cmp	DWORD PTR __Right_size$[ebp], 16	; 00000010H
	jae	SHORT $LN2@Construct_

; 2402 : 			{	// stay small, don't allocate
; 2403 : 			_Traits::copy(_My_data._Bx._Buf, _Right_ptr, this->_BUF_SIZE);

	push	16					; 00000010H
	mov	edx, DWORD PTR __Right_ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2404 : 			_My_data._Mysize = _Right_size;

	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR __Right_size$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2406 : 			return;

	jmp	$LN1@Construct_
$LN2@Construct_:

; 2407 : 			}
; 2408 : 
; 2409 : 		auto& _Al = this->_Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR __Right_size$[ebp]
	or	ecx, 15					; 0000000fH
	mov	DWORD PTR $T1[ebp], ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$_Min_value@I@std@@YAABIABI0@Z	; std::_Min_value<unsigned int>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __New_capacity$[ebp], ecx

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

	mov	edx, DWORD PTR __New_capacity$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate
	mov	DWORD PTR __New_array$[ebp], eax

; 2412 : 		_Alty_traits::construct(_Al, _STD addressof(_My_data._Bx._Ptr), _New_array);

	lea	eax, DWORD PTR __New_array$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@PADABQAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@QAPADABQAD@Z ; std::_Default_allocator_traits<std::allocator<char> >::construct<char *,char * const &>
	add	esp, 12					; 0000000cH

; 2413 : 		_Traits::copy(_Unfancy(_New_array), _Right_ptr, _Right_size + 1);

	mov	eax, DWORD PTR __Right_size$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Right_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_array$[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 2414 : 		_My_data._Mysize = _Right_size;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Right_size$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 2415 : 		_My_data._Myres = _New_capacity;

	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN1@Construct_:

; 2416 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__My_data_mem$ = -28					; size = 4
__Right_data_mem$ = -24					; size = 4
__Right_data$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2344 : 		{	// assign by stealing _Right's buffer, memcpy optimization

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 2345 : 			// pre: this != &_Right
; 2346 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2347 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2348 : 		auto& _Right_data = _Right._Get_data();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	DWORD PTR __Right_data$[ebp], eax

; 2349 : 
; 2350 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2351 : 		if (_Right_data._Large_string_engaged())

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Assign_rv_

; 2352 : 			{	// take ownership of _Right's iterators along with its buffer
; 2353 : 			this->_Swap_all(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all

; 2354 : 			}
; 2355 : 		else

	jmp	SHORT $LN3@Assign_rv_
$LN2@Assign_rv_:

; 2356 : 			{
; 2357 : 			_Right._Orphan_all();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
$LN3@Assign_rv_:

; 2358 : 			}
; 2359 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2360 : 
; 2361 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2362 : 			+ _Memcpy_move_offset;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	push	eax
	call	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __My_data_mem$[ebp], eax

; 2363 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2364 : 			+ _Memcpy_move_offset;

	mov	edx, DWORD PTR __Right_data$[ebp]
	push	edx
	call	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __Right_data_mem$[ebp], eax

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	push	24					; 00000018H
	mov	eax, DWORD PTR __Right_data_mem$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data_mem$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2366 : 		_Right._Tidy_init();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2367 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents, COMDAT
; _this$ = ecx

; 2321 : 		{	// assign either as an rvalue or as an lvalue copy, allocators always equal optimization

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2322 : 			// pre: this != &_Right
; 2323 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2324 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2325 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	movzx	ecx, BYTE PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2326 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2315 : 		{	// assign by moving _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2316 : 		*this = _STD move(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 2317 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 2318 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@$$QAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2301 : 		{	// assign by moving _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2302 : 		if (this != _STD addressof(_Right))

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	add	esp, 4
	cmp	DWORD PTR _this$[ebp], eax
	je	SHORT $LN2@operator

; 2303 : 			{	// different, assign it
; 2304 : 			_Tidy_deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 2305 : 			this->_Move_alloc(_Right._Getal());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc

; 2306 : 			// tag dispatch to remove unnecessary exception handling codegen in the
; 2307 : 			// equal allocators case
; 2308 : 			_Assign_rv_contents(_STD move(_Right), bool_constant<_Always_equal_after_move<_Alty>>{});

	xor	ecx, ecx
	mov	BYTE PTR $T2[ebp], cl
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents
$LN2@operator:

; 2309 : 			}
; 2310 : 
; 2311 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 2312 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2268 : 		{	// construct by moving _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2267 : 		: _Mybase(_STD move(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	call	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>

; 2269 : 		_Assign_rv_contents_with_alloc_always_equal(_STD move(_Right), _Use_memcpy_move{});

	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	edx, DWORD PTR __Right$[ebp]
	push	edx
	call	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal

; 2270 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2201 : 		{	// construct from _Count * _Ch

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2200 : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2202 : 		_Tidy_init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2203 : 		assign(_Count, _Ch);

	movzx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2204 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2183 : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2182 : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2184 : 		_Tidy_init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2185 : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2186 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2142 : 		{	// construct empty string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2141 : 		: _Mybase()

	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >

; 2143 : 		_Tidy_init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2144 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2130 : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 2129 : 		: _Mybase(_Alty_traits::select_on_container_copy_construction(_Right._Getal()))

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char>,void>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2131 : 		_Construct_lv_contents(_Right);

	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_lv_contents

; 2132 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 306  : 		{	// return const reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 308  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 301  : 		{	// return reference to second

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 302  : 		return (_Myval2);

	mov	eax, DWORD PTR _this$[ebp]

; 303  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 296  : 		{	// return const reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 298  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 291  : 		{	// return reference to first

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 292  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 293  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2047 : 		{	// return const reference to _String_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2048 : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 2049 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 2042 : 		{	// return reference to _String_val

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2043 : 		return (_Mypair._Get_second());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 2044 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2037 : 		{	// return const reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2038 : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 2039 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 2032 : 		{	// return reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2033 : 		return (_Mypair._Get_first());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 2034 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all, COMDAT
; _this$ = ecx

; 2027 : 		{	// swap all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2028 : 		_Get_data()._Swap_all(_Right._Get_data());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	ecx, eax
	call	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_all

; 2029 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 2022 : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2023 : 		_Get_data()._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	mov	ecx, eax
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 2024 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy, COMDAT
; _this$ = ecx

; 2011 : 		{	// return reference to _Myproxy

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2012 : 		return (_Get_data()._Myproxy);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data

; 2013 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 1997 : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1998 : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1999 : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all

; 2000 : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$destroy@U_Container_proxy@std@@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
	add	esp, 8

; 2001 : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR __Proxy_allocator$[ebp]
	push	eax
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@$0A@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy>,0>
	add	esp, 8

; 2002 : 		_Myproxy() = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
	mov	DWORD PTR [eax], 0

; 2003 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -16						; size = 8
_this$ = -8						; size = 4
__Proxy_allocator$ = -1					; size = 1
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 1989 : 		{	// construct proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 1990 : 		_Alproxy _Proxy_allocator(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>

; 1991 : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));

	push	1
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
	mov	DWORD PTR [eax], esi

; 1992 : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR __Proxy_allocator$[ebp]
	push	ecx
	call	??$construct@U_Container_proxy@std@@U12@@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@QAU_Container_proxy@1@$$QAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
	add	esp, 12					; 0000000cH

; 1993 : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
	push	eax
	call	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myproxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myproxy
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [edx], esi

; 1994 : 		}

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Reload$ = -2						; size = 1
tv72 = -1						; size = 1
__Al$ = 8						; size = 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 1971 : 		{	// replace old allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1972 : 		const bool _Reload = _Alty_traits::propagate_on_container_move_assignment::value
; 1973 : 			&& _Getal() != _Al;

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@Move_alloc
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	call	??$?9DD@std@@YA_NABV?$allocator@D@0@0@Z	; std::operator!=<char,char>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Move_alloc
	mov	BYTE PTR tv72[ebp], 1
	jmp	SHORT $LN6@Move_alloc
$LN5@Move_alloc:
	mov	BYTE PTR tv72[ebp], 0
$LN6@Move_alloc:
	mov	al, BYTE PTR tv72[ebp]
	mov	BYTE PTR __Reload$[ebp], al

; 1974 : 
; 1975 : 		if (_Reload)

	movzx	ecx, BYTE PTR __Reload$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@Move_alloc

; 1976 : 			{
; 1977 : 			_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
$LN2@Move_alloc:

; 1978 : 			}
; 1979 : 
; 1980 : 		_Pocma(_Getal(), _Al);

	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$allocator@D@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
	push	eax
	call	??$_Pocma@V?$allocator@D@std@@@std@@YAXAAV?$allocator@D@0@0@Z ; std::_Pocma<std::allocator<char> >
	add	esp, 8

; 1981 : 
; 1982 : 		if (_Reload)

	movzx	eax, BYTE PTR __Reload$[ebp]
	test	eax, eax
	je	SHORT $LN1@Move_alloc

; 1983 : 			{
; 1984 : 			_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
$LN1@Move_alloc:

; 1985 : 			}
; 1986 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXAAV?$allocator@D@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1948 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1949 : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 1950 : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T2 = -13						; size = 1
__$EHRec$ = -12						; size = 12
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1934 : 		{	// default construct allocator

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1933 : 		: _Mypair(_Zero_then_variadic_args_t())

	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1935 : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 1936 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1861 : 			{	// user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1862 : 			}

	mov	esp, ebp
	pop	ebp
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1856 : 		_Bxty()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1857 : 			{	// user-provided, for fancy pointers
; 1858 : 			}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 1845 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp

; 1846 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 1847 : 		}

	pop	ebp
	ret	0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Off$ = 8						; size = 4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 1829 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1830 : 		if (_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN3@Check_offs

; 1831 : 			{
; 1832 : 			_Xran();

	call	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN3@Check_offs:

; 1833 : 			}
; 1834 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEXI@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1824 : 		{	// returns whether the large string mode (allocated memory) is engaged

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Large_stri
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Large_stri
$LN3@Large_stri:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Large_stri:
	mov	al, BYTE PTR tv66[ebp]

; 1826 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1813 : 		{	// determine current pointer to buffer for immutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1814 : 		const value_type * _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 1815 : 		if (_Large_string_engaged())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 1821 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -8						; size = 4
_this$ = -4						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1802 : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1803 : 		value_type * _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 1804 : 		if (_Large_string_engaged())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Myptr

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

	mov	eax, DWORD PTR __Result$[ebp]

; 1810 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1786 : 		{	// initialize values

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 1783 : 		: _Bx(),

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 1784 : 		_Mysize(0),

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1785 : 		_Myres(0)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 1787 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 896  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp

; 897  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 898  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 891  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

	or	eax, -1

; 893  : 		}

	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 996  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$00@std@@YAII@Z	; std::_Get_size_of_n<1>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
	add	esp, 4

; 998  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 990  : 		{	// deallocate object at _Ptr

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z	; std::_Deallocate<8,0>
	add	esp, 8

; 993  : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 979  : 	constexpr allocator() noexcept

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Convert_size@I@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@I@std@@YAII@Z PROC			; std::_Convert_size<unsigned int>, COMDAT

; 1203 : 	{	// convert size_t to size_t, unchanged

	push	ebp
	mov	ebp, esp

; 1204 : 	return (_Len);

	mov	eax, DWORD PTR __Len$[ebp]

; 1205 : 	}

	pop	ebp
	ret	0
??$_Convert_size@I@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Min_back_shift$ = -16					; size = 4
__Ptr_container$ = -12					; size = 4
__Back_shift$ = -8					; size = 4
__Ptr_user$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 114  : 	{	// adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 115  : 	_Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

	mov	edx, 4
	imul	eax, edx, -1
	mov	ecx, DWORD PTR __Ptr_user$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR __Ptr_container$[ebp], edx
$LN4@Adjust_man:

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN7@Adjust_man
	jmp	SHORT $LN2@Adjust_man
$LN7@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	122					; 0000007aH
	push	OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	push	0
	push	122					; 0000007aH
	push	OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	ecx, ecx
	jne	SHORT $LN7@Adjust_man
$LN2@Adjust_man:
	xor	edx, edx
	jne	SHORT $LN4@Adjust_man

; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN13@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN13@Adjust_man
	jmp	SHORT $LN8@Adjust_man
$LN13@Adjust_man:
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_0GJ@FFDBCFBF@c?3?2program?5files?5?$CIx86?$CJ?2microsof@
	push	2
	call	__CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	push	0
	push	132					; 00000084H
	push	OFFSET ??_C@_1NC@PIOGAKBO@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	__invalid_parameter
	add	esp, 20					; 00000014H
	xor	eax, eax
	jne	SHORT $LN13@Adjust_man
$LN8@Adjust_man:
	xor	ecx, ecx
	jne	SHORT $LN10@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx], eax

; 134  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 51   : 		{

	push	ebp
	mov	ebp, esp

; 52   : 		return (::operator new(_Bytes));

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 53   : 		}

	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 37   : 	{	// gets the size of _Count copies of a type with size 1

	push	ebp
	mov	ebp, esp

; 38   : 	return (_Count);

	mov	eax, DWORD PTR __Count$[ebp]

; 39   : 	}

	pop	ebp
	ret	0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 616  : 		{	// return maximum value

	push	ebp
	mov	ebp, esp

; 617  : 		return (INT_MAX);

	mov	eax, 2147483647				; 7fffffffH

; 618  : 		}

	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	; std::_Iterator_base12::_Getpnext, COMDAT
; _this$ = ecx

; 186  : 		{	// get address of remaining iterator chain

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 187  : 		return (&_Mynextiter);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4

; 188  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ ENDP	; std::_Iterator_base12::_Getpnext
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Clrcont@_Iterator_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		; std::_Iterator_base12::_Clrcont, COMDAT
; _this$ = ecx

; 176  : 		{	// disown owning container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		_Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 178  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Clrcont@_Iterator_base12@std@@QAEXXZ ENDP		; std::_Iterator_base12::_Clrcont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Lock$ = -24						; size = 4
__Temp$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 229  : 	{	// swap all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 230  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 231  : 	_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 232  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 233  : 
; 234  : 	_Container_proxy *_Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 235  : 	_Myproxy = _Right._Myproxy;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx

; 236  : 	_Right._Myproxy = _Temp;

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [edx], eax

; 237  : 
; 238  : 	if (_Myproxy != nullptr)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Swap_all

; 239  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@Swap_all:

; 240  : 	if (_Right._Myproxy != nullptr)

	mov	edx, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@Swap_all

; 241  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@Swap_all:

; 242  : 	}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
_this$ = -20						; size = 4
__Pnext$3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR __Pnext$3[ebp], edx
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:

; 221  : 			*_Pnext != nullptr; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN4@Orphan_all:
	mov	ecx, DWORD PTR __Pnext$3[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@Orphan_all

; 222  : 			(*_Pnext)->_Myproxy = nullptr;

	mov	edx, DWORD PTR __Pnext$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax], 0
	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = nullptr;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], 0

; 224  : 		}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN6@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC ; std::_Container_base12::_Getpfirst, COMDAT
; _this$ = ecx

; 95   : 		{	// get address of iterator chain

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 96   : 		return (_Myproxy == nullptr ? nullptr : &_Myproxy->_Myfirstiter);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Getpfirst
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@Getpfirst
$LN3@Getpfirst:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	mov	DWORD PTR tv68[ebp], edx
$LN4@Getpfirst:
	mov	eax, DWORD PTR tv68[ebp]

; 97   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ ENDP ; std::_Container_base12::_Getpfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 81   : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		: _Myproxy(nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 82   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 69   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 		: _Mycont(nullptr), _Myfirstiter(nullptr)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 70   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 540  : 		{	// return end-of-file metacharacter

	push	ebp
	mov	ebp, esp

; 541  : 		return (EOF);

	or	eax, -1

; 542  : 		}

	pop	ebp
	ret	0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -4						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 530  : 		{	// test for metacharacter equality

	push	ebp
	mov	ebp, esp
	push	ecx

; 531  : 		return (_Left == _Right);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN3@eq_int_typ
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
	mov	DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
	mov	al, BYTE PTR tv65[ebp]

; 532  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		; std::char_traits<char>::to_int_type, COMDAT

; 525  : 		{	// convert character to metacharacter

	push	ebp
	mov	ebp, esp

; 526  : 		return (static_cast<unsigned char>(_Ch));

	mov	eax, DWORD PTR __Ch$[ebp]
	movzx	eax, BYTE PTR [eax]

; 527  : 		}

	pop	ebp
	ret	0
?to_int_type@?$char_traits@D@std@@SAHABD@Z ENDP		; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 505  : 		{	// assign an element

	push	ebp
	mov	ebp, esp

; 506  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 507  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADQADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADQADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 500  : 		{	// assign _Count * _Ch to [_First, ...)

	push	ebp
	mov	ebp, esp

; 501  : 		return (static_cast<char *>(_CSTD memset(_First, _Ch, _Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	movsx	ecx, BYTE PTR __Ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 502  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAPADQADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 494  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp

; 495  : 		return (static_cast<char *>(_CSTD memmove(_First1, _First2, _Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 496  : 		}

	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 470  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 472  : 		}

	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 460  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp

; 461  : #if _HAS_CXX17
; 462  : 		return (__builtin_strlen(_First));
; 463  : #else /* _HAS_CXX17 */
; 464  : 		return (_CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 465  : #endif /* _HAS_CXX17 */
; 466  : 		}

	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 90   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 91   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 92   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 85   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 86   :         __std_exception_destroy(&_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_destroy
	add	esp, 4

; 87   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 68   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 67   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 69   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 70   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 62   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 61   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 63   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 64   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -12					; size = 8
_this$ = -4						; size = 4
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 55   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 54   :         : _Data()

	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx

; 56   :         __std_exception_data _InitData = { _Message, true };

	mov	eax, DWORD PTR __Message$[ebp]
	mov	DWORD PTR __InitData$[ebp], eax
	mov	BYTE PTR __InitData$[ebp+4], 1

; 57   :         __std_exception_copy(&_InitData, &_Data);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR __InitData$[ebp]
	push	edx
	call	___std_exception_copy
	add	esp, 8

; 58   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
;	COMDAT _frexpl
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 4
_frexpl	PROC						; COMDAT

; 863  :     {

	push	ebp
	mov	ebp, esp

; 864  :         return frexp((double)_X, _Y);

	mov	eax, DWORD PTR __Y$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_frexp
	add	esp, 12					; 0000000cH

; 865  :     }

	pop	ebp
	ret	0
_frexpl	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
;	COMDAT _fabsl
_TEXT	SEGMENT
__X$ = 8						; size = 8
_fabsl	PROC						; COMDAT

; 842  :     {

	push	ebp
	mov	ebp, esp

; 843  :         return fabs((double)_X);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8

; 844  :     }

	pop	ebp
	ret	0
_fabsl	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

	push	ebp
	mov	ebp, esp
	push	ecx

; 760  :             return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 761  :         }

	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 185  :     {

	push	ebp
	mov	ebp, esp

; 186  :         (void)_Size;
; 187  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 188  :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1841 :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1842 :             int _Result;
; 1843 :             va_list _ArgList;
; 1844 :             __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1845 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	__vsprintf_s_l
	add	esp, 20					; 00000014H
	mov	DWORD PTR __Result$[ebp], eax

; 1846 :             __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1847 :             return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1848 :         }

	mov	esp, ebp
	pop	ebp
	ret	0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsprintf_s_l PROC					; COMDAT

; 1497 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 1498 :         int const _Result = __stdio_common_vsprintf_s(

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___stdio_common_vsprintf_s
	add	esp, 28					; 0000001cH
	mov	DWORD PTR __Result$[ebp], eax

; 1499 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1500 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1501 : 
; 1502 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$[ebp], 0
	jge	SHORT $LN3@vsprintf_s
	mov	DWORD PTR tv73[ebp], -1
	jmp	SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
	mov	ecx, DWORD PTR __Result$[ebp]
	mov	DWORD PTR tv73[ebp], ecx
$LN4@vsprintf_s:
	mov	eax, DWORD PTR tv73[ebp]

; 1503 :     }

	mov	esp, ebp
	pop	ebp
	ret	0
__vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\users\michael mcnally\source\repos\final proj\src\mainsrc\mysphere.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
